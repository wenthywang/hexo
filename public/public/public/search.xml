<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用Hexo+Git+Nodejs搭建个人博客]]></title>
      <url>https://wenthywang.github.io/2016/09/11/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用<code>&amp;emsp;&amp;emsp;</code>反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul>
<li>首先也是必须要注册一个<a href="https://github.com/" title="github" target="_blank" rel="external">Git</a>，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，<strong>名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名</strong><img src="/img/git1.png" alt="参考">  创建完成后，需要git客户端，客户端下载就不说了，百度都有。</li>
</ul>
<h2 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h2><p>&emsp;&emsp;首先要安装<a href="https://nodejs.org/download/" target="_blank" rel="external">nodejs</a>挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令<br><code>mpn -v</code><br>查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><ul>
<li><p>正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令<br><code>npm install -g hexo</code><br>安装hexo，速度的快慢要看你的网速了。  </p>
</li>
<li><p>执行初始化hexo,命令：<br><code>hexo init</code>  </p>
</li>
<li>启动本地服务命令：<br><code>hexo server</code>（hexo s也可以）  </li>
<li>浏览器输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>  </li>
</ul>
<p><strong>浏览器有出现hexo的主题页面</strong>，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。</p>
<h2 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h2><ul>
<li><p>找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">type: git  </div><div class="line">repository: git@github.com:wenthywang/wenthywang.github.io.git  </div><div class="line">branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>执行命令：<br><code>npm install hexo-deployer-git --save</code><br><strong><em>网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。</em></strong></p>
</li>
<li><p>执行配置命令：<br><code>hexo deploy(hexo d)</code></p>
</li>
<li>浏览器中输入<code>http://wenthywang.github.io/</code>就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了</li>
</ul>
<h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>三步走：</p>
<ul>
<li><p>hexo clean</p>
</li>
<li><p>hexo generate(hexo g)</p>
</li>
<li><p>hexo deploy(hexo d)</p>
</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><p>hexo new”postName” #新建文章</p>
</li>
<li><p>hexo new page”pageName” #新建页面</p>
</li>
<li><p>hexo generate #生成静态页面至public目录</p>
</li>
<li><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>
</li>
<li><p>hexo deploy #将.deploy目录部署到GitHub</p>
</li>
<li><p>hexo help # 查看帮助</p>
</li>
<li><p>hexo version #查看Hexo的版本</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[项目中POI导出出现HTML特殊符号的实体--已解决]]></title>
      <url>https://wenthywang.github.io/2016/07/28/%E9%A1%B9%E7%9B%AE%E4%B8%ADPOI%E5%AF%BC%E5%87%BA%E5%87%BA%E7%8E%B0HTML%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%AE%9E%E4%BD%93(%E5%B7%B2%E8%A7%A3%E5%86%B3)/</url>
      <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><pre><code>导出excel 时出现 类似这样的&amp;gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。
</code></pre><h2 id="废话不说-贴码："><a href="#废话不说-贴码：" class="headerlink" title="废话不说,贴码："></a>废话不说,贴码：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">  /**</div><div class="line">*转换html特殊符号。</div><div class="line">* @param content 需要转换的html特殊符号</div><div class="line">* @param defaultName 默认返回值</div><div class="line">* @<span class="built_in">return</span> 转化后实际的符号</div><div class="line">*/</div><div class="line">public static String transferHtml(String content, String defaultName) &#123;</div><div class="line"><span class="keyword">if</span>(content==null) <span class="built_in">return</span> defaultName; </div><div class="line">String html = content;</div><div class="line">html = StringUtils.replace(html, <span class="string">"&amp;quot;"</span>, <span class="string">"\""</span>);</div><div class="line">html = StringUtils.replace(html, <span class="string">"&amp;lt;"</span>, <span class="string">"&lt;"</span>);</div><div class="line">html = StringUtils.replace(html, <span class="string">"&amp;gt;"</span>, <span class="string">"&gt;"</span>);</div><div class="line">html = StringUtils.replace(html, <span class="string">"&amp;gt;"</span>, <span class="string">"&gt;"</span>);</div><div class="line">html = StringUtils.replace(html, <span class="string">"&amp;sim;"</span>, <span class="string">"~"</span>);</div><div class="line">html = StringUtils.replace(html, <span class="string">"&amp;and;"</span>, <span class="string">"^"</span>);</div><div class="line">html = StringUtils.replace(html, <span class="string">"&amp;hellip;"</span>, <span class="string">"..."</span>);</div><div class="line"><span class="built_in">return</span> html;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><pre><code>StringUtils用的是apach的工具类。
</code></pre><p>另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。</p>
<p>具体就参考 <a href="http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html" target="_blank" rel="external"><strong>String自带replaceAll和StringUtils工具类replace区别</strong></a>    这博主分析得挺不错的。</p>
<p>另外我也度了一下html特殊符号的对照表，具体参考 <a href="http://tool.chinaz.com/tools/htmlchar.aspx" target="_blank" rel="external"><strong>HTML 特殊符号编码对照表</strong></a></p>
<pre><code>总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC静态资源加载出错--未解决]]></title>
      <url>https://wenthywang.github.io/2016/02/19/SpringMVC%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%87%BA%E9%94%99--%E6%9C%AA%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><pre><code>使用mvc：resource配置

web.xml配置是rest风格的/
</code></pre><p>服务器启动没问题 访问地址是报404</p>
<pre><code>另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。
</code></pre><p>希望有大神来解答一下</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringMVC报错]]></title>
      <url>https://wenthywang.github.io/2016/01/11/SpringMVC%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<h2 id="spring-报错"><a href="#spring-报错" class="headerlink" title="spring 报错"></a>spring 报错</h2><h3 id="贴码"><a href="#贴码" class="headerlink" title="贴码"></a>贴码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">  org.springframework.core.convert.ConversionFailedException: Failed to convert from <span class="built_in">type</span> java.util.ArrayList&lt;?&gt; to <span class="built_in">type</span> java.util.List&lt;org.springframework.core.io.Resource&gt; <span class="keyword">for</span> value <span class="string">'[/img/]'</span>; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class="built_in">type</span> java.lang.String to <span class="built_in">type</span> org.springframework.core.io.Resource</div><div class="line">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)</div><div class="line">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)</div><div class="line">at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)</div><div class="line">at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)</div><div class="line">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)</div><div class="line">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)</div><div class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)</div><div class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)</div><div class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)</div><div class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)</div><div class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)</div><div class="line">at org.springframework.beans.factory.support.AbstractBeanFactory<span class="variable">$1</span>.getObject(AbstractBeanFactory.java:295)</div><div class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)</div><div class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)</div><div class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)</div><div class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)</div><div class="line">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)</div><div class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)</div><div class="line">at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)</div><div class="line">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)</div><div class="line">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)</div><div class="line">at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)</div><div class="line">at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)</div><div class="line">at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)</div><div class="line">at javax.servlet.GenericServlet.init(GenericServlet.java:158)</div><div class="line">at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)</div><div class="line">at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)</div><div class="line">at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)</div><div class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)</div><div class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)</div><div class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)</div><div class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)</div><div class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</div><div class="line">at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)</div><div class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</div><div class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)</div><div class="line">at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)</div><div class="line">at org.apache.coyote.AbstractProtocol<span class="variable">$AbstractConnectionHandler</span>.process(AbstractProtocol.java:620)</div><div class="line">at org.apache.tomcat.util.net.JIoEndpoint<span class="variable">$SocketProcessor</span>.run(JIoEndpoint.java:316)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:615)</div><div class="line">at org.apache.tomcat.util.threads.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread.java:61)</div><div class="line">at java.lang.Thread.run(Thread.java:745)</div><div class="line">Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class="built_in">type</span> java.lang.String to <span class="built_in">type</span> org.springframework.core.io.Resource</div><div class="line">at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)</div><div class="line">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)</div><div class="line">at org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)</div><div class="line">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)</div><div class="line">... 42 more</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我在springmvc.xml配置了mvc：resoure，配置信息如下：</p>
<pre><code class="bash">&lt;mvc:resources location=<span class="string">"/js/"</span> mapping=<span class="string">"/js/**"</span>/&gt;
&lt;mvc:resources location=<span class="string">"/img/"</span> mapping=<span class="string">"/img/**"</span>/&gt;
</code></pre>
<p>如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？</p>
<p>网上找不到解决的办法。求好心人能帮忙解答</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2015最后一日公瑾]]></title>
      <url>https://wenthywang.github.io/2015/12/31/2015%E6%9C%80%E5%90%8E%E4%B8%80%E6%97%A5%E5%85%AC%E7%91%BE/</url>
      <content type="html"><![CDATA[<p>今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。</p>
<p>公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。</p>
<p>用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。</p>
<h3 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* REST调用入口。</div><div class="line">* @param request</div><div class="line">* HttpServletRequest</div><div class="line">* @param method</div><div class="line">* String</div><div class="line">* @<span class="built_in">return</span> RestResponse</div><div class="line">* @throws Exception</div><div class="line">* 异常</div><div class="line">*/</div><div class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</div><div class="line">public Object rest(HttpServletRequest request, String method) throws Exception &#123;</div><div class="line">// 获取接口API名称</div><div class="line">String api = <span class="string">""</span>;</div><div class="line">Matcher matcher = uriPattern.matcher(request.getRequestURI());</div><div class="line"><span class="keyword">if</span> (matcher.find()) &#123;</div><div class="line">api = matcher.group(1);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (StringUtils.isBlank(api)) &#123;</div><div class="line"><span class="built_in">return</span> ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, <span class="string">"该服务不存在"</span>, <span class="string">""</span>);</div><div class="line">&#125;</div><div class="line">String channel = request.getHeader(<span class="string">"channel"</span>);</div><div class="line">// 请求头信息</div><div class="line">Map&lt;String, Object&gt; header = new HashMap&lt;String, Object&gt;();</div><div class="line">header.put(<span class="string">"method"</span>, method);</div><div class="line">header.put(<span class="string">"channel"</span>, channel);</div><div class="line"><span class="keyword">if</span> (log.isInfoEnabled()) &#123;</div><div class="line">log.info(<span class="string">"访问接口API:"</span> + api);</div><div class="line">&#125;</div><div class="line">// 判断是否合法渠道</div><div class="line"><span class="keyword">if</span> (!ChannelConstant.validateChannel(channel)) &#123;</div><div class="line"><span class="built_in">return</span> ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + <span class="string">"填写的渠道不存在，请确认渠道信息"</span>, <span class="string">""</span>);</div><div class="line">&#125;</div><div class="line">SdkClient.setChannel(channel);</div><div class="line">Object result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);</div><div class="line">resultMap.put(appVo.getUrl() + appVo.getSort(), result);</div><div class="line">&#125;</div><div class="line">Object result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);</div><div class="line">resultMap.put(appVo2.getUrl() + appVo2.getSort(), result);</div><div class="line">&#125; catch (FtspException ex) &#123;</div><div class="line">log.error(appVo2.getUrl() + <span class="string">"自定义错误信息"</span>, ex);</div><div class="line">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class="line">FtspJSONUtil.objectToJsonString(</div><div class="line">ResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), <span class="string">""</span>)));</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">log.error(appVo2.getUrl() + <span class="string">"请求接口失败"</span>, e);</div><div class="line">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class="line">FtspJSONUtil.objectToJsonString(</div><div class="line">ResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, <span class="string">"服务器繁忙！"</span>, <span class="string">""</span>)));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">return</span> ResponseUtils.getSuccess(<span class="string">"业务操作成功"</span>, RestOperateCode.GET_DATA, resultMap);</div><div class="line">&#125;</div><div class="line">//小接口</div><div class="line"><span class="built_in">return</span> execution(request, api, channel, header);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><pre><code>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。
目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。
</code></pre><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p> 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。<br> 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static Pattern uriPattern = Pattern.compile(<span class="string">"/api/([\\w\\/]+)"</span>);</div><div class="line">   Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串</div><div class="line">    apis.put(<span class="string">"sap/fpxx/cgfp"</span>, (API) ContextInit.getContext().getBean(<span class="string">"ftsp_api_sap_cgfpAPI"</span>));  @Component(value = <span class="string">"ftsp_api_sap_djxx_jsfsAPI"</span>)// spring的装配功能，对应的组件申明value，来作为beanID</div><div class="line">    List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;();//声明键值 来用来传参数 使用httppost的时候</div></pre></td></tr></table></figure></p>
<h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。</p>
<pre><code>引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源    程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原    理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 
</code></pre><p>MD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[公瑾科技给我的...]]></title>
      <url>https://wenthywang.github.io/2015/12/23/%E5%85%AC%E7%91%BE%E7%A7%91%E6%8A%80%E7%BB%99%E6%88%91%E7%9A%84/</url>
      <content type="html"><![CDATA[<p> 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自</p>
<p><a href="http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/" target="_blank" rel="external">Jenkins</a>.</p>
<h2 id="持续集成概述"><a href="#持续集成概述" class="headerlink" title="持续集成概述"></a>持续集成概述</h2><h3 id="什么是持续集成"><a href="#什么是持续集成" class="headerlink" title="什么是持续集成"></a>什么是持续集成</h3><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p>
<p>持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p>
<p>持续集成的核心价值在于：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。</div><div class="line">持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。</div><div class="line">持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</div></pre></td></tr></table></figure></p>
<h3 id="持续集成的原则"><a href="#持续集成的原则" class="headerlink" title="持续集成的原则"></a>持续集成的原则</h3><p>业界普遍认同的持续集成的原则包括：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。</div><div class="line">开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。</div><div class="line">需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。</div><div class="line">必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。</div></pre></td></tr></table></figure></p>
<h3 id="持续集成系统的组成"><a href="#持续集成系统的组成" class="headerlink" title="持续集成系统的组成"></a>持续集成系统的组成</h3><p>由此可见，一个完整的构建系统必须包括：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">一个自动构建过程，包括自动编译、分发、部署和测试等。</div><div class="line">一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。</div><div class="line">一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面的介绍估计了解得差不多了。 </p>
<p>另外还会有ivy，下面内容是它的简介。</p>
<pre><code>Apache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 

公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。
</code></pre><p>傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。</p>
<p>说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。</p>
<p>今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于我]]></title>
      <url>https://wenthywang.github.io/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="王文辉"><a href="#王文辉" class="headerlink" title="王文辉"></a>王文辉</h1><blockquote>
<p>一个对技术充满好奇的小伙子</p>
</blockquote>
<p><em>涉世未深，有着洞察世界的眼</em>   </p>
<p><strong> 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考</strong>  </p>
<p><strong> <em>but</em>…..我更想和别人分享和交流想法…..特别是你…..come on </strong></p>
<p><img src="/img/img2.jpg" alt="NexT Schemes"></p>
<h2 id="目前Status"><a href="#目前Status" class="headerlink" title="目前Status"></a>目前Status</h2><p>  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感<br>  感觉在学习 不是在工作<br>    <blockquote><p>Working is Study</p>
</blockquote>  </p>
<blockquote>
<p> <strong>Working is Study</strong><br> <strong>Study is working</strong></p>
</blockquote>
<h2 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h2><p>学习过C++,C#,汇编语言，外挂制作，反编译等。<br>曾经对技术的热爱，你无法想象  。</p>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p><strong>better than present</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[分类]]></title>
      <url>https://wenthywang.github.io/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>https://wenthywang.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
