{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/.nojekyll","path":".nojekyll","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/img/404.png","path":"img/404.png","modified":1,"renderable":0},{"_id":"source/img/es2.png","path":"img/es2.png","modified":1,"renderable":0},{"_id":"source/img/es3.png","path":"img/es3.png","modified":1,"renderable":0},{"_id":"source/img/es1.png","path":"img/es1.png","modified":1,"renderable":0},{"_id":"source/img/git.png","path":"img/git.png","modified":1,"renderable":0},{"_id":"source/img/git1.png","path":"img/git1.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat.png","path":"images/wechat.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"source/img/img2.jpg","path":"img/img2.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/img/img1.jpg","path":"img/img1.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/img/link1.bmp","path":"img/link1.bmp","modified":1,"renderable":0},{"_id":"source/img/sql.bmp","path":"img/sql.bmp","modified":1,"renderable":0},{"_id":"source/img/link2.bmp","path":"img/link2.bmp","modified":1,"renderable":0},{"_id":"source/img/head.bmp","path":"img/head.bmp","modified":1,"renderable":0}],"Cache":[{"_id":"source/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479454706895},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1473076556989},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1473076556990},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1473076556991},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1473076556991},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1473076556991},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1473076556990},{"_id":"themes/next/_config.yml","hash":"5ecd3360654e5a6b8c82e7979a3d899e91d2288c","modified":1511419102859},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1473076556991},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1473076556992},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1473076556993},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1473076556992},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1473076557016},{"_id":"source/favicon.ico","hash":"efc8690dc0734d650f6b2f22b77e039356bc6730","modified":1473249916937},{"_id":"source/_posts/2015最后一日公瑾.md","hash":"286bebcf372b368e270785f9058d5d2c6475fa96","modified":1473300975462},{"_id":"source/_posts/Future Callable 初使用.md","hash":"eb3a2dd46d4479a6cf1ff2b2574177d4ca9a7c0b","modified":1479691728618},{"_id":"source/_posts/Mybatis调用存储过程报错.md","hash":"1720627000c0a5c62255f1927db8384f5e6413df","modified":1474345423760},{"_id":"source/_posts/Hexo搭建个人博客.md","hash":"96de8e367062dc3cebeea3455f192500c9347294","modified":1474180899068},{"_id":"source/_posts/SpringMVC报错.md","hash":"549089e95ff2918a6bf3ed02adecd233dbdef815","modified":1473301028985},{"_id":"source/_posts/common-csv.md","hash":"8cad21a280294b1d1827f4ced8edbb365cfcac67","modified":1480683554561},{"_id":"source/_posts/SpringMVC静态资源加载出错--未解决.md","hash":"86fd80a99585df45581d8224d1d0c677e8496127","modified":1473301053812},{"_id":"source/_posts/elasticsearch-笔记-插件.md","hash":"96c5b363c26798b5645c1f84b5b125f22d55f0e9","modified":1483086687524},{"_id":"source/_posts/elasticsearch-sql-5.1.2笔记.md","hash":"5f2e619de433aaef954dfc5a29cf625062279b17","modified":1490606017960},{"_id":"source/_posts/elasticsearch插件安装笔记（head,sql）.md","hash":"9062ca50b09ea678be1273be9f0cc14761711f81","modified":1493885644260},{"_id":"source/_posts/elasticsearch笔记.md","hash":"7a6aa00aa9c9b5afea25bce2aa072e1789747c78","modified":1479402557358},{"_id":"source/_posts/git工程批量更新和自动提交.md","hash":"679b6131d4d3e34e9c8717ab3b3569318c3e9836","modified":1474537473664},{"_id":"source/_posts/springAOP.md","hash":"75f0db0ac6d6ac11b2d2abbbb56c9287c8905f0f","modified":1499345419217},{"_id":"source/_posts/maven mirror修改 国内镜像.md","hash":"97f7372c96ff573f4b3b76620a8f672fce97bcde","modified":1478088434564},{"_id":"source/_posts/next部署git页面资源加载404.md","hash":"e3678d6bc9a6e2e81ce7187d48b4b35a6a62b2d4","modified":1479456898713},{"_id":"source/_posts/公瑾科技给我的.md","hash":"6aa0af62a6cec0a4c924261d695f3be61abb9a37","modified":1473300933477},{"_id":"source/_posts/在线预览office小结.md","hash":"24dc3431597aa6401e6da2beac805f81865de49f","modified":1511427176349},{"_id":"source/_posts/百度文字识别API接入.md","hash":"b1c73a7609c663248f25c632fccd52d8426c4804","modified":1499161980129},{"_id":"source/_posts/项目中POI导出出现HTML特殊符号的实体(已解决).md","hash":"0e92796cedf1f5d94bf53cc40b809083005ab84d","modified":1473301076308},{"_id":"source/about/index.md","hash":"52253ae3be4080d1412ab8f59bbf46cec49b83fd","modified":1473303314934},{"_id":"source/img/404.png","hash":"91042facefa5445e43748d48a99d838b79469466","modified":1479456536610},{"_id":"source/img/es2.png","hash":"67a65ebc0c00f40dad60db8feab1c9c19d1651ac","modified":1477917609877},{"_id":"source/img/es3.png","hash":"eec8dc5d0d5e9ff0c3f2e93feb9bfde88b71cdc3","modified":1477917634935},{"_id":"source/img/es1.png","hash":"884105fa57c29671f574152c0978c6d94f5f841a","modified":1477917273693},{"_id":"source/img/git.png","hash":"1cb9994cd932775ba63902eb6e3dfdf0d1b1ebe7","modified":1474536287851},{"_id":"source/img/git1.png","hash":"19aa3ebd71072328a2711113bd930b34dfd259c9","modified":1473588096271},{"_id":"source/categories/index.md","hash":"e32284ed03a27df68649c30841c8221d039a2bbf","modified":1473302553181},{"_id":"source/tags/index.md","hash":"e477e0b7f1a72099fe0ed5f2a8c58b70b694c0a4","modified":1473302643307},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1479453664080},{"_id":"themes/next/.git/FETCH_HEAD","hash":"2435ee624db8f94b40625d9a0e9403c383171002","modified":1479454278945},{"_id":"themes/next/.git/config","hash":"84e953afc0a047966ff4f688ac6bf27820fbfca2","modified":1479453668878},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1479453664076},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1473076556990},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1473076556990},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1473076556993},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1473076556993},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1473076556994},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1473076556994},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1473076556994},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1473076556995},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1473076556995},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1473076556995},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1473076556996},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1473076556997},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1473076556996},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1473076556997},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1473076556997},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1473076556998},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1473076557014},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1473076557015},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1473076557015},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1473076557015},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1473076557016},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1473076557016},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1473076557017},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1473076557091},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1473076557091},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1473076557091},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473076557051},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1479453664077},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1479453664077},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1479453664078},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1479453664078},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1479453664077},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1479453664078},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1479453664079},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1479453664079},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1479453664079},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1479453664080},{"_id":"themes/next/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1479453664080},{"_id":"themes/next/hexo-theme-next/.git/config","hash":"84e953afc0a047966ff4f688ac6bf27820fbfca2","modified":1479453668878},{"_id":"themes/next/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1479453664076},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1473076556998},{"_id":"themes/next/layout/_macro/post.swig","hash":"6266d91d8a49f84390bca65d8e893979ecf7a867","modified":1473424338767},{"_id":"themes/next/layout/_macro/reward.swig","hash":"e416207f6abe22516573789c75620e59c3f4514c","modified":1511407928086},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"fc036d33890f64dd13d07efb33d46a74ae04934f","modified":1511408368814},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1473076557000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1473076557001},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1473076557001},{"_id":"themes/next/layout/_partials/footer.swig","hash":"a6ee872d347c4a35b3b0a403c3b06d869cb0feb4","modified":1511430404710},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1473076557001},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1473076557002},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1473076557003},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1473076557003},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1473076557006},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1473076557006},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1473076557007},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1473076557014},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1473076557051},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1473076557052},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1473076557052},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1473076557052},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1473076557053},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1473076557053},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1473076557053},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1473076557054},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1473076557054},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473076557055},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473076557055},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1473076557055},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1473076557056},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1473076557056},{"_id":"themes/next/source/images/wechat.png","hash":"8ce45a2ea25e331f4e2fb8febc9c2b20973acece","modified":1473308356739},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1473076557017},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1473076557017},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1473076557018},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473076557007},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473076557008},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473076557039},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473076557039},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473076557040},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473076557049},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473076557050},{"_id":"themes/next/source/images/alipay.jpg","hash":"d359f26f3064323eab5c6ed1cc33c9b508184c45","modified":1473308339568},{"_id":"themes/next/.git/refs/tags/v0.1.0","hash":"4131ee173e7ccb518cfdb5bfdb82e2ca39b397e9","modified":1479453914997},{"_id":"themes/next/.git/refs/tags/v0.2.0","hash":"1bb0eb21a1b732f257b41cfbebbde82befe1e93d","modified":1479453914999},{"_id":"themes/next/.git/refs/tags/v0.3.0","hash":"63bf4ae4f5f04d666818d072fcd12938e8f8a095","modified":1479453915002},{"_id":"themes/next/.git/refs/tags/v0.1.3","hash":"4b6852c6d03499316a3c0682eb85d475280c5a70","modified":1479453914998},{"_id":"themes/next/.git/refs/tags/v0.2.2","hash":"4970bda4df4f24bd0a1355d879cdd400d07e04ef","modified":1479453915001},{"_id":"themes/next/.git/refs/tags/v0.3.0rc1","hash":"c3b0520606e24e2b055125bc56299ea86c0a04cf","modified":1479453915003},{"_id":"themes/next/.git/refs/tags/v0.4.0","hash":"6ffae8c2660193cef94f2a676decba27a8c19eef","modified":1479453915004},{"_id":"themes/next/.git/refs/tags/v0.4.4","hash":"ca10471ab08289ed10c10cf8504ab8844d5392ab","modified":1479453915007},{"_id":"themes/next/.git/refs/tags/v0.4.5.1","hash":"361f90f9c4fc29b424a3156dc512e683a0a19d75","modified":1479453915008},{"_id":"themes/next/.git/refs/tags/v0.4.5.2","hash":"b7daf711143ef7cb06d12e908f9e25d40688d809","modified":1479453915009},{"_id":"themes/next/.git/refs/tags/v0.4.3","hash":"61eaf135adbfedfa15d423118ccd7326bbc783f5","modified":1479453915006},{"_id":"themes/next/.git/refs/tags/v5.1.0","hash":"cabf39f34bb81548f82c93481989ec34274873a1","modified":1479453915123},{"_id":"themes/next/.git/refs/tags/v5.0.0","hash":"3db07998a600b0c7d7d15359cb4ef808b6ec8648","modified":1479453915010},{"_id":"themes/next/.git/refs/tags/v5.0.1","hash":"4bd3aae6c4ad63fce23f9306572ecd3961d58a03","modified":1479453915011},{"_id":"themes/next/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1479453664077},{"_id":"themes/next/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1479453664077},{"_id":"themes/next/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1479453664077},{"_id":"themes/next/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1479453664078},{"_id":"themes/next/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1479453664078},{"_id":"themes/next/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1479453664078},{"_id":"themes/next/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1479453664079},{"_id":"themes/next/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1479453664079},{"_id":"themes/next/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1479453664079},{"_id":"themes/next/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1479453664080},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1473076557002},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1473076557004},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1473076557004},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1473076557004},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1473076557005},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1473076557005},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1473076557005},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1473076557006},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1473076557007},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1473076557008},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1473076557012},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1473076557011},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1473076557012},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1473076557014},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1473076557013},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1473076557008},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1473076557039},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1473076557040},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1473076557039},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1473076557049},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1473076557050},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1473076557050},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1473076557060},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1473076557060},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1473076557067},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1473076557067},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1473076557067},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1473076557068},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1473076557069},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1473076557069},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1473076557070},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1473076557070},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1473076557070},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1473076557081},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1473076557083},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1473076557083},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1473076557084},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1473076557084},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1473076557084},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1473076557085},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1473076557087},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1473076557087},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1473076557089},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1473076557090},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1473076557090},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1473076557057},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1473076557057},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1473076557057},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1473076557058},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1473076557057},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1473076557059},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1473076557059},{"_id":"source/img/img2.jpg","hash":"87ab2512f6172c74b0f201b19a17f2fe5757f55a","modified":1467880997490},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1473076557082},{"_id":"themes/next/.git/objects/pack/pack-9040b4fdd7cb1ce4f4478b4b6db8071e533c2edb.idx","hash":"2199e27819228e7416ec5c225cc9fbf991419c17","modified":1473076556526},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"41ab21bbe0d88c2cc439c0af33807af4e95aef31","modified":1479453914990},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"776e91b78b954875a8d38297e05b80eab20df4b9","modified":1479453914994},{"_id":"themes/next/.git/refs/remotes/origin/servant","hash":"cc0719ca98bd124977db7d9c89b69ede35e83d88","modified":1479453914995},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1473076557009},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1473076557010},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1473076557009},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1473076557011},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1473076557010},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a576c23d426ab236eb3dcd0bfe1b3f0b0c54ad1a","modified":1473076557010},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1473076557011},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1473076557012},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1473076557019},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1473076557020},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1473076557019},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1473076557020},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1473076557025},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1473076557032},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1473076557036},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1473076557037},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1473076557037},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1473076557038},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1473076557037},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1473076557041},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1473076557038},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1473076557041},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1473076557041},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1473076557042},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1473076557042},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1473076557042},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1473076557043},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1473076557044},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1473076557045},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1473076557045},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1473076557045},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1473076557045},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1473076557047},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1473076557047},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1473076557048},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1473076557047},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1473076557048},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1473076557049},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1473076557048},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473076557061},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473076557061},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473076557062},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473076557061},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473076557062},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473076557062},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1473076557065},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1473076557066},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1473076557066},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1473076557068},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1473076557069},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1473076557071},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1473076557072},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1473076557071},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1473076557080},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1473076557086},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1473076557086},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1473076557058},{"_id":"themes/next/.git/objects/pack/pack-701aac6a47eb147f7190676f63ffed832681db77.idx","hash":"e4afb12edf28ecd80c575f933dcc383f3c30eecb","modified":1479453914353},{"_id":"themes/next/.git/objects/pack/tmp_pack_Z1w0b9","hash":"5d57a6aee14f600617ee99e9704668616ca5af93","modified":1479453669383},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1473076557074},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1473076557074},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1473076557080},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1473076557089},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"56b1088e01692a337461002b01e4136912881ab8","modified":1479453914992},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"446dbf1b4101f1ceed8052b03e052398b37747b7","modified":1479453914994},{"_id":"themes/next/.git/logs/refs/remotes/origin/servant","hash":"cfe05930caa0dc64e6e1f6141cba355a37ed4ee5","modified":1479453914996},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1473076557021},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"0d88da497e14908b6421d2b368f5f98c63f42228","modified":1511430393638},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1473076557021},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1473076557021},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1473076557022},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1473076557022},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1473076557024},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1473076557024},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1473076557024},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1473076557024},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1473076557025},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1473076557026},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1473076557025},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1473076557026},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1473076557026},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1473076557027},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1473076557027},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1473076557028},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"636884d2ec9caaa5566107dc2af94160de8731ed","modified":1511407692005},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1473076557028},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1473076557029},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1473076557029},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1473076557023},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1473076557023},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1473076557030},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1473076557029},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1473076557031},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1473076557030},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1473076557030},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1473076557031},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1473076557031},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1473076557032},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1473076557032},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1473076557034},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1473076557034},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1473076557035},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1473076557035},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1473076557036},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1473076557035},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1473076557033},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1473076557033},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1473076557034},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1473076557033},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1473076557044},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1473076557043},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1473076557046},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473076557063},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1473076557063},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1473076557064},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1473076557064},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1473076557065},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1473076557064},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1473076557079},{"_id":"source/img/img1.jpg","hash":"18f8e9d5a126b70ead0e2e5c3a88bea6614464a2","modified":1467881032131},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1473076557077},{"_id":"source/img/link1.bmp","hash":"a173f15c511e809cab3c851d1693f24288c31e73","modified":1493884651088},{"_id":"source/img/sql.bmp","hash":"21ef9c6afd079efd07983de5287fa5a6e6951214","modified":1493884200368},{"_id":"source/img/link2.bmp","hash":"1919731f23383dc23c3b7e1b82e2ba91ebc6856d","modified":1493884679017},{"_id":"source/img/head.bmp","hash":"0eb632e900b1a9b2d587d7c2d53c4ef1146b4750","modified":1493884185514},{"_id":"themes/next/hexo-theme-next/.git/objects/pack/tmp_pack_Z1w0b9","hash":"2986bc513bcb8ba8a0c4c1dc7bba1bf25c4860a5","modified":1479457063061},{"_id":"themes/next/.git/objects/pack/pack-9040b4fdd7cb1ce4f4478b4b6db8071e533c2edb.pack","hash":"755408c17ccef18b6acd8baee3547a5e2785192b","modified":1473076556573},{"_id":"themes/next/.git/objects/pack/pack-701aac6a47eb147f7190676f63ffed832681db77.pack","hash":"6a95f5137046c713dcd1069cf62f7aeb7a6d8e4a","modified":1479453914405},{"_id":"public/public/public/search.xml","hash":"19cf9cd7979d069e795920a6d429dbcb64bf2eb7","modified":1511430421402},{"_id":"public/about/index.html","hash":"7ef0a9cdb1aca8fb94e802e02dfefdbc551e0ad9","modified":1511430423472},{"_id":"public/tags/index.html","hash":"175a385ba2d9ed3038c925cec0e9b2eecb50ae1a","modified":1511430423495},{"_id":"public/categories/index.html","hash":"ed0c99471aacae0f9759d00f16ef6e4caea48dbc","modified":1511430423495},{"_id":"public/2017/10/27/在线预览office小结/index.html","hash":"7ce9614728d4068b07a6713bf2cd72424b7d538f","modified":1511430423495},{"_id":"public/2017/07/04/百度文字识别API接入/index.html","hash":"b27d14852f0d431c99976be9cb6f2ffe9bbc5a92","modified":1511430423495},{"_id":"public/2017/06/28/springAOP/index.html","hash":"bc51f8d1be6602bed8d9ab665de6c23c4873e111","modified":1511430423495},{"_id":"public/2017/05/04/elasticsearch插件安装笔记（head,sql）/index.html","hash":"1d888b0361244fa903d028e55cae82bd5b3b94bc","modified":1511430423495},{"_id":"public/2017/03/27/elasticsearch-sql-5.1.2笔记/index.html","hash":"7b42917fdacde372750754e62bf0415f84dffa41","modified":1511430423495},{"_id":"public/2016/12/30/elasticsearch-笔记-插件/index.html","hash":"20aba570150b8ddb34b6e729e063890796c29f14","modified":1511430423495},{"_id":"public/2016/12/02/common-csv/index.html","hash":"bd3d4bbf7b3a848851fd8af6fe40e480a768f163","modified":1511430423495},{"_id":"public/2016/11/19/Future Callable 初使用/index.html","hash":"126e4648cdd3a50559bc71c023d737eab3882e07","modified":1511430423495},{"_id":"public/2016/11/18/next部署git页面资源加载404/index.html","hash":"573e1f7528289cae0048e4b71f79c841c5982e6b","modified":1511430423495},{"_id":"public/2016/11/18/elasticsearch笔记/index.html","hash":"436640a372f95c7a23b755932388cc7bdc45597f","modified":1511430423495},{"_id":"public/2016/11/02/maven mirror修改 国内镜像/index.html","hash":"59351a766e4bb8d4a7dc138950807ee96b3c0adc","modified":1511430423497},{"_id":"public/2016/09/22/git工程批量更新和自动提交/index.html","hash":"83d39da1e9e06ba9443704030dc3c1ffc1a1cdf9","modified":1511430423497},{"_id":"public/2016/09/20/Mybatis调用存储过程报错/index.html","hash":"a0738387d5799f14182670e8692e3d010ac9f0ab","modified":1511430423497},{"_id":"public/2016/09/11/Hexo搭建个人博客/index.html","hash":"e5249089869eff661414341564c3c7be3da7fb03","modified":1511430423497},{"_id":"public/2016/07/28/项目中POI导出出现HTML特殊符号的实体(已解决)/index.html","hash":"8877a83e4fcf16d627595943ae6dd52efe959341","modified":1511430423497},{"_id":"public/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511430423497},{"_id":"public/2016/02/19/SpringMVC静态资源加载出错--未解决/index.html","hash":"0e9db6784283f1a05af7bef90a1e3e499f57e3db","modified":1511430423513},{"_id":"public/2016/01/11/SpringMVC报错/index.html","hash":"19a7c4ea1a79dd15f922dcbf9485d93e2808881a","modified":1511430423513},{"_id":"public/2015/12/31/2015最后一日公瑾/index.html","hash":"697a78871bcf2d777990b9e72ddd6e73fef6a32c","modified":1511430423513},{"_id":"public/2015/12/23/公瑾科技给我的/index.html","hash":"b967223008e9747bfd4472dc051b13fffdbe710f","modified":1511430423513},{"_id":"public/archives/index.html","hash":"c6977a9e1e0c2446ad6022f12df327a333e4e036","modified":1511430423513},{"_id":"public/archives/page/2/index.html","hash":"68d4ebd99ffa8366ddc72a5ee88fb5e0967f3c11","modified":1511430423513},{"_id":"public/archives/2015/index.html","hash":"b4073d6024c6aab912a5e9d78a44fb43ed800321","modified":1511430423513},{"_id":"public/archives/2015/12/index.html","hash":"afa076befb7fdd007fe93ea121e0a83e41d7878e","modified":1511430423513},{"_id":"public/archives/2016/index.html","hash":"54c1bd63c261ce0ff2728e496ebc1faba55fda8f","modified":1511430423513},{"_id":"public/archives/2016/page/2/index.html","hash":"aceade83274c146e851b8cce21a498c400588125","modified":1511430423513},{"_id":"public/archives/2016/01/index.html","hash":"af34a1c0564a7d76823a19eaa86248e4865e1dd3","modified":1511430423513},{"_id":"public/archives/2016/02/index.html","hash":"96c621698a471cac86556b4d8cf13a3b1e41ae0b","modified":1511430423513},{"_id":"public/archives/2016/07/index.html","hash":"a757096f95410efc779882c7e89c9f9577b7b31a","modified":1511430423513},{"_id":"public/archives/2016/09/index.html","hash":"bc173ef96788f81f8c9a870fd084d4dcc145e5d1","modified":1511430423513},{"_id":"public/archives/2016/11/index.html","hash":"19ce731246db84eedb0428d9b722c0526fe15fb2","modified":1511430423513},{"_id":"public/archives/2016/12/index.html","hash":"3c81d04f7b0ee3e7de36f45abe1ed86c5917b4e0","modified":1511430423513},{"_id":"public/archives/2017/index.html","hash":"a45bdba6cb31d47c5c0aa8252496124089776af0","modified":1511430423513},{"_id":"public/archives/2017/03/index.html","hash":"5fde2ab19322a5c171b641fd7c7440e8b2320e99","modified":1511430423513},{"_id":"public/archives/2017/05/index.html","hash":"7167345af4a82fc7402051fc9cc6b387b9a69131","modified":1511430423513},{"_id":"public/archives/2017/06/index.html","hash":"fad4e60192d1d839b1c6b991b99373fd5b8e3a33","modified":1511430423513},{"_id":"public/archives/2017/07/index.html","hash":"91517cb91c22a626d6d7357f64785493b3286ed5","modified":1511430423513},{"_id":"public/index.html","hash":"911a29a109409ca7e0126d7a842c7ef4dedf99ac","modified":1511430423513},{"_id":"public/archives/2017/10/index.html","hash":"e0fbd116d37e137f2c8f503a049e7ff2d9f8132c","modified":1511430423513},{"_id":"public/page/2/index.html","hash":"4b626bd94c439b08ddee4f9932dd80c18261c939","modified":1511430423513},{"_id":"public/categories/Mybatis/index.html","hash":"282c5ef4ed2efcba97072591395467bcec76f892","modified":1511430423513},{"_id":"public/categories/笔记/index.html","hash":"4924c9a720c459b631db450b8e1c1805b76615b2","modified":1511430423513},{"_id":"public/categories/Java/index.html","hash":"0f71ba265a71e7e6cb4f08b15f565415919dfb51","modified":1511430423514},{"_id":"public/categories/笔记/Java/index.html","hash":"1a91dcc7286737d5bb88a4486761145f1832491b","modified":1511430423514},{"_id":"public/categories/Java/SpringMVC/index.html","hash":"1e32aa7480fff73640a154d0ee3c56d0501e819e","modified":1511430423514},{"_id":"public/categories/Java/work/index.html","hash":"7faa1cce0352c5d3c556b195d5480da76fc2efb4","modified":1511430423514},{"_id":"public/categories/elasticsearch/index.html","hash":"396ab5f9a875bafaaef3e985b87571135bb5097e","modified":1511430423514},{"_id":"public/categories/Mybatis/problems/index.html","hash":"4dd94fc6180517e4c1a094277f4f882211b684af","modified":1511430423514},{"_id":"public/categories/GIT/index.html","hash":"ac2241bed7a9aa9957f3bb7c29d1e34cb7c52d28","modified":1511430423514},{"_id":"public/categories/spring/index.html","hash":"29ab35d65bf657c613c5012d9cbd7238713800f5","modified":1511430423514},{"_id":"public/categories/笔记/Java/多线程/index.html","hash":"b36c562802bb705246b002485daffef6ec96edc7","modified":1511430423514},{"_id":"public/categories/笔记/bug/index.html","hash":"88e7144bf93ed2d7916b3cf042565a38f0b8c942","modified":1511430423514},{"_id":"public/categories/Java/SpringMVC/problems/index.html","hash":"3ad983f6522d32f7e225a1601cdf193583a8010a","modified":1511430423514},{"_id":"public/categories/验证码识别/index.html","hash":"9110bf38b5d274490f9a678c35b89e1c99395765","modified":1511430423514},{"_id":"public/categories/Java/problems/index.html","hash":"376bd64d49699fe5304493d213dfc5b56a20aa05","modified":1511430423514},{"_id":"public/categories/Java/work/REST/index.html","hash":"304f46e6ddb26e76c157172ccbd09be241f0e038","modified":1511430423514},{"_id":"public/categories/elasticsearch/分布式/index.html","hash":"fd88c1efa4b768fb59d7d906e3076c1107d25397","modified":1511430423514},{"_id":"public/categories/elasticsearch/linux/index.html","hash":"3f6cac6b88a06a546f4245034c7a8580be6af2ee","modified":1511430423514},{"_id":"public/tags/Future/index.html","hash":"6a66f56504fec2fd4d896d720f3ff756077c7df0","modified":1511430423514},{"_id":"public/tags/excel导出/index.html","hash":"ac519c1d2f5b13a8f67e66efc8ce2379736a0474","modified":1511430423514},{"_id":"public/tags/Java/index.html","hash":"d11fa02446fa5c7e4cb413afb650e5124653672b","modified":1511430423514},{"_id":"public/tags/Rest/index.html","hash":"e31258b1579658b850ae3ad88e3b82e9f329b708","modified":1511430423514},{"_id":"public/tags/API/index.html","hash":"8bb1d304693b6e5f2448e3d14b2602b646d0b984","modified":1511430423514},{"_id":"public/tags/MD5/index.html","hash":"7403cb4031aa1159baf39e455d7afdca1bdd70e1","modified":1511430423515},{"_id":"public/tags/Hexo/index.html","hash":"8c956fb94e5b45ebdda4ea8ae08a53d1e24cad75","modified":1511430423515},{"_id":"public/tags/Mybatis/index.html","hash":"0c7e23664c388e1876840892a663ac283a6196af","modified":1511430423515},{"_id":"public/tags/存储过程/index.html","hash":"bf07404b8275e2e37b7c0bf6045858ade41609f4","modified":1511430423515},{"_id":"public/tags/SpringMVC/index.html","hash":"88c379d2bc70a42c042cac5a3666f2d3da7c28bb","modified":1511430423515},{"_id":"public/tags/静态资源/index.html","hash":"dd027e5225110879ec306348822f39360219bf64","modified":1511430423515},{"_id":"public/tags/csv/index.html","hash":"50d800f22bb414611ee495f11bfc330f7e1f80a1","modified":1511430423515},{"_id":"public/tags/myslq/index.html","hash":"77fa03ff99433fda1ed4517dddd9fd3de658030a","modified":1511430423515},{"_id":"public/tags/elasticsearch-插件/index.html","hash":"16656033e707d5f383ba3bae021648787a6599cc","modified":1511430423515},{"_id":"public/tags/分布式/index.html","hash":"28f56edce470432dd849e9d72dcb5af1e7dc27d0","modified":1511430423515},{"_id":"public/tags/elasticsearch插件/index.html","hash":"0e505cda4c21be0dedc587b39f270fe6d0622014","modified":1511430423515},{"_id":"public/tags/linux/index.html","hash":"f21f7e42013da8fd020e3db96f3dfd4b7d59fba9","modified":1511430423515},{"_id":"public/tags/elasticsearch-sql/index.html","hash":"66b74c8244b547b3e43dce2c3c8bb56c5d0d67d2","modified":1511430423515},{"_id":"public/tags/group-by/index.html","hash":"e953413e31ee36f95c83faa75e09bb10109cb5cd","modified":1511430423515},{"_id":"public/tags/Git/index.html","hash":"8f6dcd3eeb61b8df23d4d037527567d343ad0cef","modified":1511430423515},{"_id":"public/tags/Shell/index.html","hash":"d35602c7e5939d614b16309dea4ceeae3fe8d8df","modified":1511430423515},{"_id":"public/tags/elasticsearch/index.html","hash":"b28b73834bdf5cb869188aa90857fda1cee961da","modified":1511430423515},{"_id":"public/tags/spring/index.html","hash":"5e54766b64cd3c456f72ae45b5ac873feb8c0bbb","modified":1511430423515},{"_id":"public/tags/aop/index.html","hash":"c47bad7aa1a1d9ddf02ee9cd9489be7ce2127f92","modified":1511430423515},{"_id":"public/tags/maven/index.html","hash":"553da2dda96d1d5bc567d25f9353fadca1b0c05a","modified":1511430423515},{"_id":"public/tags/eclipse/index.html","hash":"b5653bd217bfd17ae33b8149b8daf1e7636c718a","modified":1511430423515},{"_id":"public/tags/hexo/index.html","hash":"4b99cd3653938777f757724dc03cf1673fb06275","modified":1511430423515},{"_id":"public/tags/在线预览/index.html","hash":"b3cdfed27aaf435bf078f70ff7da8f141b89d511","modified":1511430423515},{"_id":"public/tags/office/index.html","hash":"3d88d3d179ffda5ae466812baf730c2eeda3ff44","modified":1511430423515},{"_id":"public/tags/持续集成/index.html","hash":"34f528643b6fa537e5b4f8affce0e82488704e9e","modified":1511430423515},{"_id":"public/tags/Jenkins/index.html","hash":"a70be428a5ba71fffc0f31c04753ebc6e9b61622","modified":1511430423515},{"_id":"public/tags/百度API/index.html","hash":"26bbb5b11473eebff62a5416f219eb5bd34cfeaf","modified":1511430423516},{"_id":"public/tags/POI/index.html","hash":"ee0b3f2616ea55f63bfb617cecb536bd3f7a9534","modified":1511430423516},{"_id":"public/tags/特殊符号/index.html","hash":"1fe213fad2c74b419e4ea61fb251e2bb9467638c","modified":1511430423516},{"_id":"public/img/404.png","hash":"91042facefa5445e43748d48a99d838b79469466","modified":1511430423516},{"_id":"public/img/es2.png","hash":"67a65ebc0c00f40dad60db8feab1c9c19d1651ac","modified":1511430423516},{"_id":"public/img/es3.png","hash":"eec8dc5d0d5e9ff0c3f2e93feb9bfde88b71cdc3","modified":1511430423516},{"_id":"public/img/es1.png","hash":"884105fa57c29671f574152c0978c6d94f5f841a","modified":1511430423516},{"_id":"public/img/git.png","hash":"1cb9994cd932775ba63902eb6e3dfdf0d1b1ebe7","modified":1511430423516},{"_id":"public/img/git1.png","hash":"19aa3ebd71072328a2711113bd930b34dfd259c9","modified":1511430423516},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1511430423516},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1511430423516},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1511430423516},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1511430423516},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1511430423516},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1511430423517},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1511430423517},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1511430423517},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511430423517},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511430423517},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1511430423517},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1511430423517},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1511430423517},{"_id":"public/images/wechat.png","hash":"8ce45a2ea25e331f4e2fb8febc9c2b20973acece","modified":1511430423517},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1511430423517},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1511430423517},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1511430423517},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1511430423517},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1511430423517},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1511430423517},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1511430423517},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1511430423517},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1511430423517},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1511430423517},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1511430423517},{"_id":"public/favicon.ico","hash":"efc8690dc0734d650f6b2f22b77e039356bc6730","modified":1511430424085},{"_id":"public/images/alipay.jpg","hash":"d359f26f3064323eab5c6ed1cc33c9b508184c45","modified":1511430424085},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1511430424094},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1511430424094},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1511430424094},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1511430424103},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1511430424103},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1511430424103},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1511430424103},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1511430424103},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1511430424103},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1511430424103},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1511430424103},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1511430424103},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1511430424103},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1511430424103},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1511430424103},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1511430424103},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1511430424103},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1511430424103},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1511430424103},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1511430424103},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1511430424103},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1511430424103},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1511430424103},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1511430424103},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1511430424103},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1511430424103},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1511430424103},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1511430424104},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1511430424104},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1511430424104},{"_id":"public/css/main.css","hash":"5098bf86906d15c1510c56a74fa13916a64a3d6a","modified":1511430424104},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1511430424104},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1511430424104},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1511430424104},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1511430424104},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1511430424104},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1511430424104},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1511430424104},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1511430424104},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1511430424104},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1511430424104},{"_id":"public/img/img2.jpg","hash":"87ab2512f6172c74b0f201b19a17f2fe5757f55a","modified":1511430424123},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1511430424123},{"_id":"public/img/img1.jpg","hash":"18f8e9d5a126b70ead0e2e5c3a88bea6614464a2","modified":1511430424150},{"_id":"public/img/link1.bmp","hash":"a173f15c511e809cab3c851d1693f24288c31e73","modified":1511430424165},{"_id":"public/img/sql.bmp","hash":"21ef9c6afd079efd07983de5287fa5a6e6951214","modified":1511430424173},{"_id":"public/img/link2.bmp","hash":"1919731f23383dc23c3b7e1b82e2ba91ebc6856d","modified":1511430424176},{"_id":"public/img/head.bmp","hash":"0eb632e900b1a9b2d587d7c2d53c4ef1146b4750","modified":1511430424180}],"Category":[{"name":"笔记","_id":"cjacanc2z0004pcfp9srdetao"},{"name":"Java","_id":"cjacanc39000apcfp6hqt1vsh"},{"name":"Mybatis","_id":"cjacanc3i000kpcfpd2ccoowd"},{"name":"Java","parent":"cjacanc2z0004pcfp9srdetao","_id":"cjacanc3m000qpcfpsjdc67uz"},{"name":"SpringMVC","parent":"cjacanc39000apcfp6hqt1vsh","_id":"cjacanc3v000ypcfpqx3unyj8"},{"name":"实习","parent":"cjacanc39000apcfp6hqt1vsh","_id":"cjacanc400015pcfp807hclu8"},{"name":"elasticsearch","_id":"cjacanc44001cpcfp066hok0t"},{"name":"问题","parent":"cjacanc3i000kpcfpd2ccoowd","_id":"cjacanc49001lpcfpuobg7236"},{"name":"GIT","_id":"cjacanc4a001npcfp30gjkywc"},{"name":"spring","_id":"cjacanc4d001xpcfp58g5mqna"},{"name":"多线程","parent":"cjacanc3m000qpcfpsjdc67uz","_id":"cjacanc4e001zpcfp8ll37rbs"},{"name":"bug","parent":"cjacanc2z0004pcfp9srdetao","_id":"cjacanc4h0028pcfpu7edtrqh"},{"name":"问题","parent":"cjacanc3v000ypcfpqx3unyj8","_id":"cjacanc4k002hpcfpefc5izs1"},{"name":"验证码识别","_id":"cjacanc4m002mpcfph7tc7tsg"},{"name":"问题","parent":"cjacanc39000apcfp6hqt1vsh","_id":"cjacanc4n002rpcfpflhelck0"},{"name":"REST","parent":"cjacanc400015pcfp807hclu8","_id":"cjacanc4o002wpcfpgswcr26i"},{"name":"分布式","parent":"cjacanc44001cpcfp066hok0t","_id":"cjacanc4p0031pcfp9ftk4kza"},{"name":"linux","parent":"cjacanc44001cpcfp066hok0t","_id":"cjacanc4r0036pcfp5sq1ggx4"}],"Data":[],"Page":[{"title":"关于我","categories":["关于我"],"comments":0,"_content":"# 王文辉\n\n> 一个对技术充满好奇的小伙子\n\n*涉世未深，有着洞察世界的眼*   \n\n\n** 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考**  \n\n** *but*.....我更想和别人分享和交流想法.....特别是你.....come on **\n\n\n![NexT Schemes](/img/img2.jpg)\n\n\n## 目前Status\n\n  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感   \n  感觉在学习 不是在工作 \n    {% blockquote %}  \n   Working is Study\n    {% endblockquote %}  \n >  **Working is Study**  \n >  **Study is working**\n\n\n## 过去\n\n学习过C++,C#,汇编语言，外挂制作，反编译等。  \n曾经对技术的热爱，你无法想象  。\n\n\n## 未来\n\n**better than present**\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ncategories: \n- 关于我\ncomments: false\n---\n# 王文辉\n\n> 一个对技术充满好奇的小伙子\n\n*涉世未深，有着洞察世界的眼*   \n\n\n** 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考**  \n\n** *but*.....我更想和别人分享和交流想法.....特别是你.....come on **\n\n\n![NexT Schemes](/img/img2.jpg)\n\n\n## 目前Status\n\n  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感   \n  感觉在学习 不是在工作 \n    {% blockquote %}  \n   Working is Study\n    {% endblockquote %}  \n >  **Working is Study**  \n >  **Study is working**\n\n\n## 过去\n\n学习过C++,C#,汇编语言，外挂制作，反编译等。  \n曾经对技术的热爱，你无法想象  。\n\n\n## 未来\n\n**better than present**\n\n\n","date":"2016-10-31T12:37:07.516Z","updated":"2016-09-08T02:55:14.934Z","path":"about/index.html","layout":"page","_id":"cjacanc2u0001pcfpb93qi9kd","content":"<h1 id=\"王文辉\"><a href=\"#王文辉\" class=\"headerlink\" title=\"王文辉\"></a>王文辉</h1><blockquote>\n<p>一个对技术充满好奇的小伙子</p>\n</blockquote>\n<p><em>涉世未深，有着洞察世界的眼</em>   </p>\n<p><strong> 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考</strong>  </p>\n<p><strong> <em>but</em>…..我更想和别人分享和交流想法…..特别是你…..come on </strong></p>\n<p><img src=\"/img/img2.jpg\" alt=\"NexT Schemes\"></p>\n<h2 id=\"目前Status\"><a href=\"#目前Status\" class=\"headerlink\" title=\"目前Status\"></a>目前Status</h2><p>  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感<br>  感觉在学习 不是在工作<br>    <blockquote><p>Working is Study</p>\n</blockquote>  </p>\n<blockquote>\n<p> <strong>Working is Study</strong><br> <strong>Study is working</strong></p>\n</blockquote>\n<h2 id=\"过去\"><a href=\"#过去\" class=\"headerlink\" title=\"过去\"></a>过去</h2><p>学习过C++,C#,汇编语言，外挂制作，反编译等。<br>曾经对技术的热爱，你无法想象  。</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p><strong>better than present</strong></p>\n","excerpt":"","more":"<h1 id=\"王文辉\"><a href=\"#王文辉\" class=\"headerlink\" title=\"王文辉\"></a>王文辉</h1><blockquote>\n<p>一个对技术充满好奇的小伙子</p>\n</blockquote>\n<p><em>涉世未深，有着洞察世界的眼</em>   </p>\n<p><strong> 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考</strong>  </p>\n<p><strong> <em>but</em>…..我更想和别人分享和交流想法…..特别是你…..come on </strong></p>\n<p><img src=\"/img/img2.jpg\" alt=\"NexT Schemes\"></p>\n<h2 id=\"目前Status\"><a href=\"#目前Status\" class=\"headerlink\" title=\"目前Status\"></a>目前Status</h2><p>  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感<br>  感觉在学习 不是在工作<br>    <blockquote><p>Working is Study</p>\n</blockquote>  </p>\n<blockquote>\n<p> <strong>Working is Study</strong><br> <strong>Study is working</strong></p>\n</blockquote>\n<h2 id=\"过去\"><a href=\"#过去\" class=\"headerlink\" title=\"过去\"></a>过去</h2><p>学习过C++,C#,汇编语言，外挂制作，反编译等。<br>曾经对技术的热爱，你无法想象  。</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p><strong>better than present</strong></p>\n"},{"title":"tags","date":"2016-09-08T02:43:42.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-08 10:43:42\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-09-08T02:44:03.307Z","path":"tags/index.html","layout":"page","_id":"cjacanc2x0003pcfprnowuir7","content":"","excerpt":"","more":""},{"title":"分类","date":"2016-09-08T04:39:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-09-08 12:39:04\ntype: \"categories\"\ncomments: false\n---","updated":"2016-09-08T02:42:33.181Z","path":"categories/index.html","layout":"page","_id":"cjacanc350007pcfp11eqkr12","content":"","excerpt":"","more":""}],"Post":[{"title":"Future Callable 初使用","date":"2016-11-19T06:28:41.000Z","_content":" ## 线程优化 \n  昨天看到一同事的导出代码，单线程，看着就觉得还是差了点东西。然后就想进行一番改造，然后就找来了future和callable。\n  **\n      Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。\n  **\n\n  简单来说就是一个是执行任务，然后它带着任务执行的结果回来。\n\n### 简单看下下面的demo\n```\nimport java.util.ArrayList;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class demo{\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        ExecutorService executor = Executors.newCachedThreadPool();\n        ArrayList<Future<Integer>> resultList = new ArrayList<>();\n        \n        //创建并提交任务1\n        AddNumberTask task1 = new AddNumberTask(1, 5000);\n        Future<Integer> future1 = executor.submit(task1);\n        resultList.add(future1);\n        \n        //创建并提交任务2\n        AddNumberTask task2 = new AddNumberTask(5001, 10000);\n        Future<Integer> future2 = executor.submit(task2);\n        resultList.add(future2);\n        \n        executor.shutdown();\n        \n        int total = 0;\n        \n        for(Future<Integer> future : resultList){\n            while(true){\n                if(future.isDone() && !future.isCancelled()){\n                    int sum = future.get();\n                    total += sum;\n                    break;\n                }\n                else{\n                    Thread.sleep(100);\n                }\n            }\n        }\n        \n        System.out.println(\"total sum is \" + total);\n    }\n\n}\n\nclass AddNumberTask implements Callable<Integer>{\n    private int start;\n    private int end;\n    \n    public AddNumberTask(int start, int end) {\n        // TODO Auto-generated constructor stub\n        this.start = start;\n        this.end = end;\n    }\n    \n    @Override\n    public Integer call() throws Exception {\n        // TODO Auto-generated method stub\n        int totalSum = 0;\n        \n        for(int i = start; i <= end; i++){\n            totalSum += i;\n        }\n        \n        Thread.sleep(5000);\n        \n        return totalSum;\n    }\n    \n}\n\n```\n- 参考了这个例子，我就改造了导出的那段代码，1w2数据从原来的6-8s 到现在的2-3s，虽然不是很多，但是也是一大进步，后来想了下，时间其实就花在了查询的sql，如果sql 再继续优化下去的的话应该可以突破到1s执行返回的。但因为还有新需求要进行，我就不再细究下去了。\n\n- 改造的时候，同样我也是根据查询的数据量来新建任务执行，使用了for循环，本来公司已经提供了线程池fixedPool(100)的，我就不用自己再创建了。\n\n### 出现的问题\n- future 没有表示返回来的这堆数据是谁的\n  于是我就对返回变量进行了修改，返回一个map，标识这个数据是我的，后面根据map的key获取数据。\n- size 数据量的大小影响任务的执行\n  查询数据使用了limit 字段每次查询1000 2000 3000 500 这几个size 都试过，似乎值越大越好，一次查询数据量比多次查询数据量效率要高。因为3000恐怕生产环境的数据会比较多，后来我就改成了2000。  \n- mysql 索引 不合理\n  索引建不好，导致查询sql也是很慢的，查询的那个表使用了多列索引，问题就出在这了，使用sql的执行计划看了下，查询的字段虽然有索引但是没有使用到，因为多列索引的第一个不是我的查询字段，导致查询效率会有小小的降低，我也没跟负责人说，毕竟也不是很大的问题，差的时间不是很多。","source":"_posts/Future Callable 初使用.md","raw":"---\ntitle: Future Callable 初使用\ndate: 2016-11-19 14:28:41\ntags: \n- Future\n- excel导出\ncategories: \n- 笔记\n- Java \n- 多线程\n---\n ## 线程优化 \n  昨天看到一同事的导出代码，单线程，看着就觉得还是差了点东西。然后就想进行一番改造，然后就找来了future和callable。\n  **\n      Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。\n  **\n\n  简单来说就是一个是执行任务，然后它带着任务执行的结果回来。\n\n### 简单看下下面的demo\n```\nimport java.util.ArrayList;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class demo{\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        ExecutorService executor = Executors.newCachedThreadPool();\n        ArrayList<Future<Integer>> resultList = new ArrayList<>();\n        \n        //创建并提交任务1\n        AddNumberTask task1 = new AddNumberTask(1, 5000);\n        Future<Integer> future1 = executor.submit(task1);\n        resultList.add(future1);\n        \n        //创建并提交任务2\n        AddNumberTask task2 = new AddNumberTask(5001, 10000);\n        Future<Integer> future2 = executor.submit(task2);\n        resultList.add(future2);\n        \n        executor.shutdown();\n        \n        int total = 0;\n        \n        for(Future<Integer> future : resultList){\n            while(true){\n                if(future.isDone() && !future.isCancelled()){\n                    int sum = future.get();\n                    total += sum;\n                    break;\n                }\n                else{\n                    Thread.sleep(100);\n                }\n            }\n        }\n        \n        System.out.println(\"total sum is \" + total);\n    }\n\n}\n\nclass AddNumberTask implements Callable<Integer>{\n    private int start;\n    private int end;\n    \n    public AddNumberTask(int start, int end) {\n        // TODO Auto-generated constructor stub\n        this.start = start;\n        this.end = end;\n    }\n    \n    @Override\n    public Integer call() throws Exception {\n        // TODO Auto-generated method stub\n        int totalSum = 0;\n        \n        for(int i = start; i <= end; i++){\n            totalSum += i;\n        }\n        \n        Thread.sleep(5000);\n        \n        return totalSum;\n    }\n    \n}\n\n```\n- 参考了这个例子，我就改造了导出的那段代码，1w2数据从原来的6-8s 到现在的2-3s，虽然不是很多，但是也是一大进步，后来想了下，时间其实就花在了查询的sql，如果sql 再继续优化下去的的话应该可以突破到1s执行返回的。但因为还有新需求要进行，我就不再细究下去了。\n\n- 改造的时候，同样我也是根据查询的数据量来新建任务执行，使用了for循环，本来公司已经提供了线程池fixedPool(100)的，我就不用自己再创建了。\n\n### 出现的问题\n- future 没有表示返回来的这堆数据是谁的\n  于是我就对返回变量进行了修改，返回一个map，标识这个数据是我的，后面根据map的key获取数据。\n- size 数据量的大小影响任务的执行\n  查询数据使用了limit 字段每次查询1000 2000 3000 500 这几个size 都试过，似乎值越大越好，一次查询数据量比多次查询数据量效率要高。因为3000恐怕生产环境的数据会比较多，后来我就改成了2000。  \n- mysql 索引 不合理\n  索引建不好，导致查询sql也是很慢的，查询的那个表使用了多列索引，问题就出在这了，使用sql的执行计划看了下，查询的字段虽然有索引但是没有使用到，因为多列索引的第一个不是我的查询字段，导致查询效率会有小小的降低，我也没跟负责人说，毕竟也不是很大的问题，差的时间不是很多。","slug":"Future Callable 初使用","published":1,"updated":"2016-11-21T01:28:48.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc2q0000pcfpi83scaat","content":"<h2 id=\"线程优化\"><a href=\"#线程优化\" class=\"headerlink\" title=\"线程优化\"></a>线程优化</h2><p>  昨天看到一同事的导出代码，单线程，看着就觉得还是差了点东西。然后就想进行一番改造，然后就找来了future和callable。<br>  <strong><br>      Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。\n  </strong></p>\n<p>  简单来说就是一个是执行任务，然后它带着任务执行的结果回来。</p>\n<h3 id=\"简单看下下面的demo\"><a href=\"#简单看下下面的demo\" class=\"headerlink\" title=\"简单看下下面的demo\"></a>简单看下下面的demo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.concurrent.Callable;</div><div class=\"line\">import java.util.concurrent.ExecutionException;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.Executors;</div><div class=\"line\">import java.util.concurrent.Future;</div><div class=\"line\"></div><div class=\"line\">public class demo&#123;</div><div class=\"line\">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</div><div class=\"line\">        ExecutorService executor = Executors.newCachedThreadPool();</div><div class=\"line\">        ArrayList&lt;Future&lt;Integer&gt;&gt; resultList = new ArrayList&lt;&gt;();</div><div class=\"line\">        </div><div class=\"line\">        //创建并提交任务1</div><div class=\"line\">        AddNumberTask task1 = new AddNumberTask(1, 5000);</div><div class=\"line\">        Future&lt;Integer&gt; future1 = executor.submit(task1);</div><div class=\"line\">        resultList.add(future1);</div><div class=\"line\">        </div><div class=\"line\">        //创建并提交任务2</div><div class=\"line\">        AddNumberTask task2 = new AddNumberTask(5001, 10000);</div><div class=\"line\">        Future&lt;Integer&gt; future2 = executor.submit(task2);</div><div class=\"line\">        resultList.add(future2);</div><div class=\"line\">        </div><div class=\"line\">        executor.shutdown();</div><div class=\"line\">        </div><div class=\"line\">        int total = 0;</div><div class=\"line\">        </div><div class=\"line\">        for(Future&lt;Integer&gt; future : resultList)&#123;</div><div class=\"line\">            while(true)&#123;</div><div class=\"line\">                if(future.isDone() &amp;&amp; !future.isCancelled())&#123;</div><div class=\"line\">                    int sum = future.get();</div><div class=\"line\">                    total += sum;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else&#123;</div><div class=\"line\">                    Thread.sleep(100);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(&quot;total sum is &quot; + total);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class AddNumberTask implements Callable&lt;Integer&gt;&#123;</div><div class=\"line\">    private int start;</div><div class=\"line\">    private int end;</div><div class=\"line\">    </div><div class=\"line\">    public AddNumberTask(int start, int end) &#123;</div><div class=\"line\">        // TODO Auto-generated constructor stub</div><div class=\"line\">        this.start = start;</div><div class=\"line\">        this.end = end;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    @Override</div><div class=\"line\">    public Integer call() throws Exception &#123;</div><div class=\"line\">        // TODO Auto-generated method stub</div><div class=\"line\">        int totalSum = 0;</div><div class=\"line\">        </div><div class=\"line\">        for(int i = start; i &lt;= end; i++)&#123;</div><div class=\"line\">            totalSum += i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        Thread.sleep(5000);</div><div class=\"line\">        </div><div class=\"line\">        return totalSum;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>参考了这个例子，我就改造了导出的那段代码，1w2数据从原来的6-8s 到现在的2-3s，虽然不是很多，但是也是一大进步，后来想了下，时间其实就花在了查询的sql，如果sql 再继续优化下去的的话应该可以突破到1s执行返回的。但因为还有新需求要进行，我就不再细究下去了。</p>\n</li>\n<li><p>改造的时候，同样我也是根据查询的数据量来新建任务执行，使用了for循环，本来公司已经提供了线程池fixedPool(100)的，我就不用自己再创建了。</p>\n</li>\n</ul>\n<h3 id=\"出现的问题\"><a href=\"#出现的问题\" class=\"headerlink\" title=\"出现的问题\"></a>出现的问题</h3><ul>\n<li>future 没有表示返回来的这堆数据是谁的<br>于是我就对返回变量进行了修改，返回一个map，标识这个数据是我的，后面根据map的key获取数据。</li>\n<li>size 数据量的大小影响任务的执行<br>查询数据使用了limit 字段每次查询1000 2000 3000 500 这几个size 都试过，似乎值越大越好，一次查询数据量比多次查询数据量效率要高。因为3000恐怕生产环境的数据会比较多，后来我就改成了2000。  </li>\n<li>mysql 索引 不合理<br>索引建不好，导致查询sql也是很慢的，查询的那个表使用了多列索引，问题就出在这了，使用sql的执行计划看了下，查询的字段虽然有索引但是没有使用到，因为多列索引的第一个不是我的查询字段，导致查询效率会有小小的降低，我也没跟负责人说，毕竟也不是很大的问题，差的时间不是很多。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"线程优化\"><a href=\"#线程优化\" class=\"headerlink\" title=\"线程优化\"></a>线程优化</h2><p>  昨天看到一同事的导出代码，单线程，看着就觉得还是差了点东西。然后就想进行一番改造，然后就找来了future和callable。<br>  <strong><br>      Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。\n  </strong></p>\n<p>  简单来说就是一个是执行任务，然后它带着任务执行的结果回来。</p>\n<h3 id=\"简单看下下面的demo\"><a href=\"#简单看下下面的demo\" class=\"headerlink\" title=\"简单看下下面的demo\"></a>简单看下下面的demo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.concurrent.Callable;</div><div class=\"line\">import java.util.concurrent.ExecutionException;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.Executors;</div><div class=\"line\">import java.util.concurrent.Future;</div><div class=\"line\"></div><div class=\"line\">public class demo&#123;</div><div class=\"line\">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</div><div class=\"line\">        ExecutorService executor = Executors.newCachedThreadPool();</div><div class=\"line\">        ArrayList&lt;Future&lt;Integer&gt;&gt; resultList = new ArrayList&lt;&gt;();</div><div class=\"line\">        </div><div class=\"line\">        //创建并提交任务1</div><div class=\"line\">        AddNumberTask task1 = new AddNumberTask(1, 5000);</div><div class=\"line\">        Future&lt;Integer&gt; future1 = executor.submit(task1);</div><div class=\"line\">        resultList.add(future1);</div><div class=\"line\">        </div><div class=\"line\">        //创建并提交任务2</div><div class=\"line\">        AddNumberTask task2 = new AddNumberTask(5001, 10000);</div><div class=\"line\">        Future&lt;Integer&gt; future2 = executor.submit(task2);</div><div class=\"line\">        resultList.add(future2);</div><div class=\"line\">        </div><div class=\"line\">        executor.shutdown();</div><div class=\"line\">        </div><div class=\"line\">        int total = 0;</div><div class=\"line\">        </div><div class=\"line\">        for(Future&lt;Integer&gt; future : resultList)&#123;</div><div class=\"line\">            while(true)&#123;</div><div class=\"line\">                if(future.isDone() &amp;&amp; !future.isCancelled())&#123;</div><div class=\"line\">                    int sum = future.get();</div><div class=\"line\">                    total += sum;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else&#123;</div><div class=\"line\">                    Thread.sleep(100);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(&quot;total sum is &quot; + total);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class AddNumberTask implements Callable&lt;Integer&gt;&#123;</div><div class=\"line\">    private int start;</div><div class=\"line\">    private int end;</div><div class=\"line\">    </div><div class=\"line\">    public AddNumberTask(int start, int end) &#123;</div><div class=\"line\">        // TODO Auto-generated constructor stub</div><div class=\"line\">        this.start = start;</div><div class=\"line\">        this.end = end;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    @Override</div><div class=\"line\">    public Integer call() throws Exception &#123;</div><div class=\"line\">        // TODO Auto-generated method stub</div><div class=\"line\">        int totalSum = 0;</div><div class=\"line\">        </div><div class=\"line\">        for(int i = start; i &lt;= end; i++)&#123;</div><div class=\"line\">            totalSum += i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        Thread.sleep(5000);</div><div class=\"line\">        </div><div class=\"line\">        return totalSum;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>参考了这个例子，我就改造了导出的那段代码，1w2数据从原来的6-8s 到现在的2-3s，虽然不是很多，但是也是一大进步，后来想了下，时间其实就花在了查询的sql，如果sql 再继续优化下去的的话应该可以突破到1s执行返回的。但因为还有新需求要进行，我就不再细究下去了。</p>\n</li>\n<li><p>改造的时候，同样我也是根据查询的数据量来新建任务执行，使用了for循环，本来公司已经提供了线程池fixedPool(100)的，我就不用自己再创建了。</p>\n</li>\n</ul>\n<h3 id=\"出现的问题\"><a href=\"#出现的问题\" class=\"headerlink\" title=\"出现的问题\"></a>出现的问题</h3><ul>\n<li>future 没有表示返回来的这堆数据是谁的<br>于是我就对返回变量进行了修改，返回一个map，标识这个数据是我的，后面根据map的key获取数据。</li>\n<li>size 数据量的大小影响任务的执行<br>查询数据使用了limit 字段每次查询1000 2000 3000 500 这几个size 都试过，似乎值越大越好，一次查询数据量比多次查询数据量效率要高。因为3000恐怕生产环境的数据会比较多，后来我就改成了2000。  </li>\n<li>mysql 索引 不合理<br>索引建不好，导致查询sql也是很慢的，查询的那个表使用了多列索引，问题就出在这了，使用sql的执行计划看了下，查询的字段虽然有索引但是没有使用到，因为多列索引的第一个不是我的查询字段，导致查询效率会有小小的降低，我也没跟负责人说，毕竟也不是很大的问题，差的时间不是很多。</li>\n</ul>\n"},{"title":"2015最后一日公瑾","date":"2015-12-31T15:09:59.000Z","_content":"今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。\n\n公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。\n\n用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。\n\n### 核心代码：\n\n``` bash\n/**\n* REST调用入口。\n* @param request\n* HttpServletRequest\n* @param method\n* String\n* @return RestResponse\n* @throws Exception\n* 异常\n*/\n@SuppressWarnings(\"unchecked\")\npublic Object rest(HttpServletRequest request, String method) throws Exception {\n// 获取接口API名称\nString api = \"\";\nMatcher matcher = uriPattern.matcher(request.getRequestURI());\nif (matcher.find()) {\napi = matcher.group(1);\n}\nif (StringUtils.isBlank(api)) {\nreturn ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, \"该服务不存在\", \"\");\n}\nString channel = request.getHeader(\"channel\");\n// 请求头信息\nMap<String, Object> header = new HashMap<String, Object>();\nheader.put(\"method\", method);\nheader.put(\"channel\", channel);\nif (log.isInfoEnabled()) {\nlog.info(\"访问接口API:\" + api);\n}\n// 判断是否合法渠道\nif (!ChannelConstant.validateChannel(channel)) {\nreturn ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + \"填写的渠道不存在，请确认渠道信息\", \"\");\n}\nSdkClient.setChannel(channel);\nObject result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);\nresultMap.put(appVo.getUrl() + appVo.getSort(), result);\n}\nObject result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(), result);\n} catch (FtspException ex) {\nlog.error(appVo2.getUrl() + \"自定义错误信息\", ex);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(),\nFtspJSONUtil.objectToJsonString(\nResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), \"\")));\n} catch (Exception e) {\nlog.error(appVo2.getUrl() + \"请求接口失败\", e);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(),\nFtspJSONUtil.objectToJsonString(\nResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, \"服务器繁忙！\", \"\")));\n}\n}\n}\n}\nreturn ResponseUtils.getSuccess(\"业务操作成功\", RestOperateCode.GET_DATA, resultMap);\n}\n//小接口\nreturn execution(request, api, channel, header);\n}\n```\n\n\n\n### REST\n\tREST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。\n\t目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。\n\n\n\n### 理解\n 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。\n 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：\n``` bash\n private static Pattern uriPattern = Pattern.compile(\"/api/([\\\\w\\\\/]+)\");\n    Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串\n     apis.put(\"sap/fpxx/cgfp\", (API) ContextInit.getContext().getBean(\"ftsp_api_sap_cgfpAPI\"));  @Component(value = \"ftsp_api_sap_djxx_jsfsAPI\")// spring的装配功能，对应的组件申明value，来作为beanID\n     List<NameValuePair> nvps = new ArrayList<NameValuePair>();//声明键值 来用来传参数 使用httppost的时候\n```\n### MD5\n以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。\n\n    引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源\t程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原\t理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 \n\n\nMD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。\n\n### 总结\n感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。","source":"_posts/2015最后一日公瑾.md","raw":"---\ntitle: 2015最后一日公瑾\ndate: 2015-12-31 23:09:59\ntags: \n- Java\n- Rest\n- API\n- MD5\ncategories: \n- Java\n- 实习\n- REST\n---\n今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。\n\n公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。\n\n用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。\n\n### 核心代码：\n\n``` bash\n/**\n* REST调用入口。\n* @param request\n* HttpServletRequest\n* @param method\n* String\n* @return RestResponse\n* @throws Exception\n* 异常\n*/\n@SuppressWarnings(\"unchecked\")\npublic Object rest(HttpServletRequest request, String method) throws Exception {\n// 获取接口API名称\nString api = \"\";\nMatcher matcher = uriPattern.matcher(request.getRequestURI());\nif (matcher.find()) {\napi = matcher.group(1);\n}\nif (StringUtils.isBlank(api)) {\nreturn ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, \"该服务不存在\", \"\");\n}\nString channel = request.getHeader(\"channel\");\n// 请求头信息\nMap<String, Object> header = new HashMap<String, Object>();\nheader.put(\"method\", method);\nheader.put(\"channel\", channel);\nif (log.isInfoEnabled()) {\nlog.info(\"访问接口API:\" + api);\n}\n// 判断是否合法渠道\nif (!ChannelConstant.validateChannel(channel)) {\nreturn ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + \"填写的渠道不存在，请确认渠道信息\", \"\");\n}\nSdkClient.setChannel(channel);\nObject result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);\nresultMap.put(appVo.getUrl() + appVo.getSort(), result);\n}\nObject result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(), result);\n} catch (FtspException ex) {\nlog.error(appVo2.getUrl() + \"自定义错误信息\", ex);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(),\nFtspJSONUtil.objectToJsonString(\nResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), \"\")));\n} catch (Exception e) {\nlog.error(appVo2.getUrl() + \"请求接口失败\", e);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(),\nFtspJSONUtil.objectToJsonString(\nResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, \"服务器繁忙！\", \"\")));\n}\n}\n}\n}\nreturn ResponseUtils.getSuccess(\"业务操作成功\", RestOperateCode.GET_DATA, resultMap);\n}\n//小接口\nreturn execution(request, api, channel, header);\n}\n```\n\n\n\n### REST\n\tREST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。\n\t目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。\n\n\n\n### 理解\n 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。\n 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：\n``` bash\n private static Pattern uriPattern = Pattern.compile(\"/api/([\\\\w\\\\/]+)\");\n    Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串\n     apis.put(\"sap/fpxx/cgfp\", (API) ContextInit.getContext().getBean(\"ftsp_api_sap_cgfpAPI\"));  @Component(value = \"ftsp_api_sap_djxx_jsfsAPI\")// spring的装配功能，对应的组件申明value，来作为beanID\n     List<NameValuePair> nvps = new ArrayList<NameValuePair>();//声明键值 来用来传参数 使用httppost的时候\n```\n### MD5\n以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。\n\n    引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源\t程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原\t理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 \n\n\nMD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。\n\n### 总结\n感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。","slug":"2015最后一日公瑾","published":1,"updated":"2016-09-08T02:16:15.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc2v0002pcfpgp5d9ogg","content":"<p>今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。</p>\n<p>公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。</p>\n<p>用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。</p>\n<h3 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* REST调用入口。</div><div class=\"line\">* @param request</div><div class=\"line\">* HttpServletRequest</div><div class=\"line\">* @param method</div><div class=\"line\">* String</div><div class=\"line\">* @<span class=\"built_in\">return</span> RestResponse</div><div class=\"line\">* @throws Exception</div><div class=\"line\">* 异常</div><div class=\"line\">*/</div><div class=\"line\">@SuppressWarnings(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">public Object rest(HttpServletRequest request, String method) throws Exception &#123;</div><div class=\"line\">// 获取接口API名称</div><div class=\"line\">String api = <span class=\"string\">\"\"</span>;</div><div class=\"line\">Matcher matcher = uriPattern.matcher(request.getRequestURI());</div><div class=\"line\"><span class=\"keyword\">if</span> (matcher.find()) &#123;</div><div class=\"line\">api = matcher.group(1);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (StringUtils.isBlank(api)) &#123;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, <span class=\"string\">\"该服务不存在\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">String channel = request.getHeader(<span class=\"string\">\"channel\"</span>);</div><div class=\"line\">// 请求头信息</div><div class=\"line\">Map&lt;String, Object&gt; header = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">header.put(<span class=\"string\">\"method\"</span>, method);</div><div class=\"line\">header.put(<span class=\"string\">\"channel\"</span>, channel);</div><div class=\"line\"><span class=\"keyword\">if</span> (log.isInfoEnabled()) &#123;</div><div class=\"line\">log.info(<span class=\"string\">\"访问接口API:\"</span> + api);</div><div class=\"line\">&#125;</div><div class=\"line\">// 判断是否合法渠道</div><div class=\"line\"><span class=\"keyword\">if</span> (!ChannelConstant.validateChannel(channel)) &#123;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + <span class=\"string\">\"填写的渠道不存在，请确认渠道信息\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">SdkClient.setChannel(channel);</div><div class=\"line\">Object result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);</div><div class=\"line\">resultMap.put(appVo.getUrl() + appVo.getSort(), result);</div><div class=\"line\">&#125;</div><div class=\"line\">Object result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(), result);</div><div class=\"line\">&#125; catch (FtspException ex) &#123;</div><div class=\"line\">log.error(appVo2.getUrl() + <span class=\"string\">\"自定义错误信息\"</span>, ex);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class=\"line\">FtspJSONUtil.objectToJsonString(</div><div class=\"line\">ResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), <span class=\"string\">\"\"</span>)));</div><div class=\"line\">&#125; catch (Exception e) &#123;</div><div class=\"line\">log.error(appVo2.getUrl() + <span class=\"string\">\"请求接口失败\"</span>, e);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class=\"line\">FtspJSONUtil.objectToJsonString(</div><div class=\"line\">ResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, <span class=\"string\">\"服务器繁忙！\"</span>, <span class=\"string\">\"\"</span>)));</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getSuccess(<span class=\"string\">\"业务操作成功\"</span>, RestOperateCode.GET_DATA, resultMap);</div><div class=\"line\">&#125;</div><div class=\"line\">//小接口</div><div class=\"line\"><span class=\"built_in\">return</span> execution(request, api, channel, header);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h3><pre><code>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。\n目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。\n</code></pre><h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p> 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。<br> 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Pattern uriPattern = Pattern.compile(<span class=\"string\">\"/api/([\\\\w\\\\/]+)\"</span>);</div><div class=\"line\">   Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串</div><div class=\"line\">    apis.put(<span class=\"string\">\"sap/fpxx/cgfp\"</span>, (API) ContextInit.getContext().getBean(<span class=\"string\">\"ftsp_api_sap_cgfpAPI\"</span>));  @Component(value = <span class=\"string\">\"ftsp_api_sap_djxx_jsfsAPI\"</span>)// spring的装配功能，对应的组件申明value，来作为beanID</div><div class=\"line\">    List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;();//声明键值 来用来传参数 使用httppost的时候</div></pre></td></tr></table></figure></p>\n<h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><p>以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。</p>\n<pre><code>引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源    程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原    理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 \n</code></pre><p>MD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。</p>\n","excerpt":"","more":"<p>今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。</p>\n<p>公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。</p>\n<p>用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。</p>\n<h3 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* REST调用入口。</div><div class=\"line\">* @param request</div><div class=\"line\">* HttpServletRequest</div><div class=\"line\">* @param method</div><div class=\"line\">* String</div><div class=\"line\">* @<span class=\"built_in\">return</span> RestResponse</div><div class=\"line\">* @throws Exception</div><div class=\"line\">* 异常</div><div class=\"line\">*/</div><div class=\"line\">@SuppressWarnings(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">public Object rest(HttpServletRequest request, String method) throws Exception &#123;</div><div class=\"line\">// 获取接口API名称</div><div class=\"line\">String api = <span class=\"string\">\"\"</span>;</div><div class=\"line\">Matcher matcher = uriPattern.matcher(request.getRequestURI());</div><div class=\"line\"><span class=\"keyword\">if</span> (matcher.find()) &#123;</div><div class=\"line\">api = matcher.group(1);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (StringUtils.isBlank(api)) &#123;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, <span class=\"string\">\"该服务不存在\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">String channel = request.getHeader(<span class=\"string\">\"channel\"</span>);</div><div class=\"line\">// 请求头信息</div><div class=\"line\">Map&lt;String, Object&gt; header = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">header.put(<span class=\"string\">\"method\"</span>, method);</div><div class=\"line\">header.put(<span class=\"string\">\"channel\"</span>, channel);</div><div class=\"line\"><span class=\"keyword\">if</span> (log.isInfoEnabled()) &#123;</div><div class=\"line\">log.info(<span class=\"string\">\"访问接口API:\"</span> + api);</div><div class=\"line\">&#125;</div><div class=\"line\">// 判断是否合法渠道</div><div class=\"line\"><span class=\"keyword\">if</span> (!ChannelConstant.validateChannel(channel)) &#123;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + <span class=\"string\">\"填写的渠道不存在，请确认渠道信息\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">SdkClient.setChannel(channel);</div><div class=\"line\">Object result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);</div><div class=\"line\">resultMap.put(appVo.getUrl() + appVo.getSort(), result);</div><div class=\"line\">&#125;</div><div class=\"line\">Object result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(), result);</div><div class=\"line\">&#125; catch (FtspException ex) &#123;</div><div class=\"line\">log.error(appVo2.getUrl() + <span class=\"string\">\"自定义错误信息\"</span>, ex);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class=\"line\">FtspJSONUtil.objectToJsonString(</div><div class=\"line\">ResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), <span class=\"string\">\"\"</span>)));</div><div class=\"line\">&#125; catch (Exception e) &#123;</div><div class=\"line\">log.error(appVo2.getUrl() + <span class=\"string\">\"请求接口失败\"</span>, e);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class=\"line\">FtspJSONUtil.objectToJsonString(</div><div class=\"line\">ResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, <span class=\"string\">\"服务器繁忙！\"</span>, <span class=\"string\">\"\"</span>)));</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getSuccess(<span class=\"string\">\"业务操作成功\"</span>, RestOperateCode.GET_DATA, resultMap);</div><div class=\"line\">&#125;</div><div class=\"line\">//小接口</div><div class=\"line\"><span class=\"built_in\">return</span> execution(request, api, channel, header);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h3><pre><code>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。\n目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。\n</code></pre><h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p> 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。<br> 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Pattern uriPattern = Pattern.compile(<span class=\"string\">\"/api/([\\\\w\\\\/]+)\"</span>);</div><div class=\"line\">   Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串</div><div class=\"line\">    apis.put(<span class=\"string\">\"sap/fpxx/cgfp\"</span>, (API) ContextInit.getContext().getBean(<span class=\"string\">\"ftsp_api_sap_cgfpAPI\"</span>));  @Component(value = <span class=\"string\">\"ftsp_api_sap_djxx_jsfsAPI\"</span>)// spring的装配功能，对应的组件申明value，来作为beanID</div><div class=\"line\">    List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;();//声明键值 来用来传参数 使用httppost的时候</div></pre></td></tr></table></figure></p>\n<h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><p>以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。</p>\n<pre><code>引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源    程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原    理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 \n</code></pre><p>MD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。</p>\n"},{"title":"使用Hexo+Git+Nodejs搭建个人博客","date":"2016-09-11T09:34:41.000Z","_content":"&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用`&emsp;&emsp;`反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。\n## Git\n- 首先也是必须要注册一个[Git](https://github.com/ \"github\")，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，**名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名**![参考](/img/git1.png)  创建完成后，需要git客户端，客户端下载就不说了，百度都有。\n\n## NodeJs\n&emsp;&emsp;首先要安装[nodejs](https://nodejs.org/download/)挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令  \n`mpn -v`  \n查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。\n## Hexo\n- 正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令  \n`npm install -g hexo`   \n安装hexo，速度的快慢要看你的网速了。  \n\n- 执行初始化hexo,命令：  \n`hexo init`  \n- 启动本地服务命令：  \n`hexo server`（hexo s也可以）  \n- 浏览器输入http://localhost:4000  \n\n**浏览器有出现hexo的主题页面**，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。\n\n\n## 配置Github\n- 找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：\n```deploy:\n    type: git  \n    repository: git@github.com:wenthywang/wenthywang.github.io.git  \n    branch: master\n```\n- 执行命令：\n`\nnpm install hexo-deployer-git --save\n`\n***网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。***\n\n- 执行配置命令：\n`\nhexo deploy(hexo d)\n`\n- 浏览器中输入```http://wenthywang.github.io/```就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了\n\n## 部署步骤\n\n三步走：\n\n- hexo clean\n\n- hexo generate(hexo g)\n\n- hexo deploy(hexo d)\n\n## 常用命令\n\n- hexo new\"postName\" #新建文章\n\n- hexo new page\"pageName\" #新建页面\n\n- hexo generate #生成静态页面至public目录\n\n- hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\n- hexo deploy #将.deploy目录部署到GitHub\n\n- hexo help # 查看帮助\n\n- hexo version #查看Hexo的版本\n","source":"_posts/Hexo搭建个人博客.md","raw":"---\ntitle: 使用Hexo+Git+Nodejs搭建个人博客\ndate: 2016-09-11 17:34:41\ntags: \n- Hexo\ncategories: \n- 笔记 \n---\n&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用`&emsp;&emsp;`反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。\n## Git\n- 首先也是必须要注册一个[Git](https://github.com/ \"github\")，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，**名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名**![参考](/img/git1.png)  创建完成后，需要git客户端，客户端下载就不说了，百度都有。\n\n## NodeJs\n&emsp;&emsp;首先要安装[nodejs](https://nodejs.org/download/)挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令  \n`mpn -v`  \n查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。\n## Hexo\n- 正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令  \n`npm install -g hexo`   \n安装hexo，速度的快慢要看你的网速了。  \n\n- 执行初始化hexo,命令：  \n`hexo init`  \n- 启动本地服务命令：  \n`hexo server`（hexo s也可以）  \n- 浏览器输入http://localhost:4000  \n\n**浏览器有出现hexo的主题页面**，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。\n\n\n## 配置Github\n- 找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：\n```deploy:\n    type: git  \n    repository: git@github.com:wenthywang/wenthywang.github.io.git  \n    branch: master\n```\n- 执行命令：\n`\nnpm install hexo-deployer-git --save\n`\n***网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。***\n\n- 执行配置命令：\n`\nhexo deploy(hexo d)\n`\n- 浏览器中输入```http://wenthywang.github.io/```就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了\n\n## 部署步骤\n\n三步走：\n\n- hexo clean\n\n- hexo generate(hexo g)\n\n- hexo deploy(hexo d)\n\n## 常用命令\n\n- hexo new\"postName\" #新建文章\n\n- hexo new page\"pageName\" #新建页面\n\n- hexo generate #生成静态页面至public目录\n\n- hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\n- hexo deploy #将.deploy目录部署到GitHub\n\n- hexo help # 查看帮助\n\n- hexo version #查看Hexo的版本\n","slug":"Hexo搭建个人博客","published":1,"updated":"2016-09-18T06:41:39.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc320006pcfp9jsh8ras","content":"<p>&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用<code>&amp;emsp;&amp;emsp;</code>反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。</p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><ul>\n<li>首先也是必须要注册一个<a href=\"https://github.com/\" title=\"github\" target=\"_blank\" rel=\"external\">Git</a>，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，<strong>名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名</strong><img src=\"/img/git1.png\" alt=\"参考\">  创建完成后，需要git客户端，客户端下载就不说了，百度都有。</li>\n</ul>\n<h2 id=\"NodeJs\"><a href=\"#NodeJs\" class=\"headerlink\" title=\"NodeJs\"></a>NodeJs</h2><p>&emsp;&emsp;首先要安装<a href=\"https://nodejs.org/download/\" target=\"_blank\" rel=\"external\">nodejs</a>挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令<br><code>mpn -v</code><br>查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ul>\n<li><p>正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令<br><code>npm install -g hexo</code><br>安装hexo，速度的快慢要看你的网速了。  </p>\n</li>\n<li><p>执行初始化hexo,命令：<br><code>hexo init</code>  </p>\n</li>\n<li>启动本地服务命令：<br><code>hexo server</code>（hexo s也可以）  </li>\n<li>浏览器输入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>  </li>\n</ul>\n<p><strong>浏览器有出现hexo的主题页面</strong>，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。</p>\n<h2 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h2><ul>\n<li><p>找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">type: git  </div><div class=\"line\">repository: git@github.com:wenthywang/wenthywang.github.io.git  </div><div class=\"line\">branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行命令：<br><code>npm install hexo-deployer-git --save</code><br><strong><em>网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。</em></strong></p>\n</li>\n<li><p>执行配置命令：<br><code>hexo deploy(hexo d)</code></p>\n</li>\n<li>浏览器中输入<code>http://wenthywang.github.io/</code>就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了</li>\n</ul>\n<h2 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h2><p>三步走：</p>\n<ul>\n<li><p>hexo clean</p>\n</li>\n<li><p>hexo generate(hexo g)</p>\n</li>\n<li><p>hexo deploy(hexo d)</p>\n</li>\n</ul>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li><p>hexo new”postName” #新建文章</p>\n</li>\n<li><p>hexo new page”pageName” #新建页面</p>\n</li>\n<li><p>hexo generate #生成静态页面至public目录</p>\n</li>\n<li><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n</li>\n<li><p>hexo deploy #将.deploy目录部署到GitHub</p>\n</li>\n<li><p>hexo help # 查看帮助</p>\n</li>\n<li><p>hexo version #查看Hexo的版本</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用<code>&amp;emsp;&amp;emsp;</code>反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。</p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><ul>\n<li>首先也是必须要注册一个<a href=\"https://github.com/\" title=\"github\">Git</a>，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，<strong>名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名</strong><img src=\"/img/git1.png\" alt=\"参考\">  创建完成后，需要git客户端，客户端下载就不说了，百度都有。</li>\n</ul>\n<h2 id=\"NodeJs\"><a href=\"#NodeJs\" class=\"headerlink\" title=\"NodeJs\"></a>NodeJs</h2><p>&emsp;&emsp;首先要安装<a href=\"https://nodejs.org/download/\">nodejs</a>挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令<br><code>mpn -v</code><br>查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ul>\n<li><p>正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令<br><code>npm install -g hexo</code><br>安装hexo，速度的快慢要看你的网速了。  </p>\n</li>\n<li><p>执行初始化hexo,命令：<br><code>hexo init</code>  </p>\n</li>\n<li>启动本地服务命令：<br><code>hexo server</code>（hexo s也可以）  </li>\n<li>浏览器输入<a href=\"http://localhost:4000\">http://localhost:4000</a>  </li>\n</ul>\n<p><strong>浏览器有出现hexo的主题页面</strong>，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。</p>\n<h2 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h2><ul>\n<li><p>找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">type: git  </div><div class=\"line\">repository: git@github.com:wenthywang/wenthywang.github.io.git  </div><div class=\"line\">branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行命令：<br><code>npm install hexo-deployer-git --save</code><br><strong><em>网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。</em></strong></p>\n</li>\n<li><p>执行配置命令：<br><code>hexo deploy(hexo d)</code></p>\n</li>\n<li>浏览器中输入<code>http://wenthywang.github.io/</code>就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了</li>\n</ul>\n<h2 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h2><p>三步走：</p>\n<ul>\n<li><p>hexo clean</p>\n</li>\n<li><p>hexo generate(hexo g)</p>\n</li>\n<li><p>hexo deploy(hexo d)</p>\n</li>\n</ul>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li><p>hexo new”postName” #新建文章</p>\n</li>\n<li><p>hexo new page”pageName” #新建页面</p>\n</li>\n<li><p>hexo generate #生成静态页面至public目录</p>\n</li>\n<li><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n</li>\n<li><p>hexo deploy #将.deploy目录部署到GitHub</p>\n</li>\n<li><p>hexo help # 查看帮助</p>\n</li>\n<li><p>hexo version #查看Hexo的版本</p>\n</li>\n</ul>\n"},{"title":"Mybatis调用存储过程报错","date":"2016-09-20T04:13:41.000Z","_content":" ## Mybatis调用存储过程\n ### 贴码\n``` bash\nError querying database.  Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with \"noAccessToProcedureBodies=true\" to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.\n The error may exist in resources/mapper/AgentStatisDao.xml\n The error may involve com.jiaxincloud.gw.statistics.dao.statistics.AgentStatisDao.callAgentVisitorManualStatisProcedure\n The error occurred while executing a query\n SQL: {CALL PRO_AGENT_VISITOR_MANUAL_STATIS(?,?,?)}\n Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with \"noAccessToProcedureBodies=true\" to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.\n```\n\n\n### 总结\n跟着这个错误在网上找了一下，原来是该用户没有调用存储过程的权限，所以只要赋予proc的权限即可，亲测成功。在MySql中执行如下命令，授予权限。(user@host 是连接数据库的用户名，修改成连接数据库的用户名就行)\n``` bash\n    grant select on mysql.proc to user@host;\n    flush privileges;\n``` \n","source":"_posts/Mybatis调用存储过程报错.md","raw":"---\ntitle: Mybatis调用存储过程报错\ndate: 2016-09-20 12:13:41\ntags: \n- Mybatis\n- 存储过程\ncategories: \n- Mybatis\n- 问题\n---\n ## Mybatis调用存储过程\n ### 贴码\n``` bash\nError querying database.  Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with \"noAccessToProcedureBodies=true\" to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.\n The error may exist in resources/mapper/AgentStatisDao.xml\n The error may involve com.jiaxincloud.gw.statistics.dao.statistics.AgentStatisDao.callAgentVisitorManualStatisProcedure\n The error occurred while executing a query\n SQL: {CALL PRO_AGENT_VISITOR_MANUAL_STATIS(?,?,?)}\n Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with \"noAccessToProcedureBodies=true\" to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.\n```\n\n\n### 总结\n跟着这个错误在网上找了一下，原来是该用户没有调用存储过程的权限，所以只要赋予proc的权限即可，亲测成功。在MySql中执行如下命令，授予权限。(user@host 是连接数据库的用户名，修改成连接数据库的用户名就行)\n``` bash\n    grant select on mysql.proc to user@host;\n    flush privileges;\n``` \n","slug":"Mybatis调用存储过程报错","published":1,"updated":"2016-09-20T04:23:43.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc350008pcfpjls8a39e","content":"<h2 id=\"Mybatis调用存储过程\"><a href=\"#Mybatis调用存储过程\" class=\"headerlink\" title=\"Mybatis调用存储过程\"></a>Mybatis调用存储过程</h2><h3 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error querying database.  Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class=\"string\">\"noAccessToProcedureBodies=true\"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</div><div class=\"line\"> The error may exist <span class=\"keyword\">in</span> resources/mapper/AgentStatisDao.xml</div><div class=\"line\"> The error may involve com.jiaxincloud.gw.statistics.dao.statistics.AgentStatisDao.callAgentVisitorManualStatisProcedure</div><div class=\"line\"> The error occurred <span class=\"keyword\">while</span> executing a query</div><div class=\"line\"> SQL: &#123;CALL PRO_AGENT_VISITOR_MANUAL_STATIS(?,?,?)&#125;</div><div class=\"line\"> Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class=\"string\">\"noAccessToProcedureBodies=true\"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>跟着这个错误在网上找了一下，原来是该用户没有调用存储过程的权限，所以只要赋予proc的权限即可，亲测成功。在MySql中执行如下命令，授予权限。(user@host 是连接数据库的用户名，修改成连接数据库的用户名就行)</p>\n<pre><code class=\"bash\">grant select on mysql.proc to user@host;\nflush privileges;\n</code></pre>\n","excerpt":"","more":"<h2 id=\"Mybatis调用存储过程\"><a href=\"#Mybatis调用存储过程\" class=\"headerlink\" title=\"Mybatis调用存储过程\"></a>Mybatis调用存储过程</h2><h3 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error querying database.  Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class=\"string\">\"noAccessToProcedureBodies=true\"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</div><div class=\"line\"> The error may exist <span class=\"keyword\">in</span> resources/mapper/AgentStatisDao.xml</div><div class=\"line\"> The error may involve com.jiaxincloud.gw.statistics.dao.statistics.AgentStatisDao.callAgentVisitorManualStatisProcedure</div><div class=\"line\"> The error occurred <span class=\"keyword\">while</span> executing a query</div><div class=\"line\"> SQL: &#123;CALL PRO_AGENT_VISITOR_MANUAL_STATIS(?,?,?)&#125;</div><div class=\"line\"> Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class=\"string\">\"noAccessToProcedureBodies=true\"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>跟着这个错误在网上找了一下，原来是该用户没有调用存储过程的权限，所以只要赋予proc的权限即可，亲测成功。在MySql中执行如下命令，授予权限。(user@host 是连接数据库的用户名，修改成连接数据库的用户名就行)</p>\n<pre><code class=\"bash\">grant select on mysql.proc to user@host;\nflush privileges;\n</code></pre>\n"},{"title":"SpringMVC报错","date":"2016-01-11T15:03:41.000Z","_content":" ## spring 报错\n ### 贴码\n``` bash\n  org.springframework.core.convert.ConversionFailedException: Failed to convert from type java.util.ArrayList<?> to type java.util.List<org.springframework.core.io.Resource> for value '[/img/]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type org.springframework.core.io.Resource\nat org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)\nat org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)\nat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)\nat org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)\nat org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)\nat org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)\nat org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)\nat org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)\nat org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)\nat org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)\nat org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)\nat org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)\nat javax.servlet.GenericServlet.init(GenericServlet.java:158)\nat org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)\nat org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)\nat org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)\nat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)\nat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\nat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)\nat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\nat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\nat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)\nat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\nat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)\nat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)\nat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:620)\nat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\nat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\nat java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type org.springframework.core.io.Resource\nat org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)\nat org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)\nat org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)\nat org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)\n... 42 more\n```\n\n\n### 总结\n我在springmvc.xml配置了mvc：resoure，配置信息如下：\n``` bash\n<mvc:resources location=\"/js/\" mapping=\"/js/**\"/>\n<mvc:resources location=\"/img/\" mapping=\"/img/**\"/>\n``` \n如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？\n\n网上找不到解决的办法。求好心人能帮忙解答\n","source":"_posts/SpringMVC报错.md","raw":"---\ntitle: SpringMVC报错\ndate: 2016-01-11 23:03:41\ntags: \n- Java\n- SpringMVC\n- 静态资源\ncategories: \n- Java \n- SpringMVC\n- 问题\n---\n ## spring 报错\n ### 贴码\n``` bash\n  org.springframework.core.convert.ConversionFailedException: Failed to convert from type java.util.ArrayList<?> to type java.util.List<org.springframework.core.io.Resource> for value '[/img/]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type org.springframework.core.io.Resource\nat org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)\nat org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)\nat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)\nat org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)\nat org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)\nat org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)\nat org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)\nat org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)\nat org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)\nat org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)\nat org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)\nat org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)\nat javax.servlet.GenericServlet.init(GenericServlet.java:158)\nat org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)\nat org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)\nat org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)\nat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)\nat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\nat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)\nat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\nat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\nat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)\nat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\nat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)\nat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)\nat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:620)\nat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\nat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\nat java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type org.springframework.core.io.Resource\nat org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)\nat org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)\nat org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)\nat org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)\n... 42 more\n```\n\n\n### 总结\n我在springmvc.xml配置了mvc：resoure，配置信息如下：\n``` bash\n<mvc:resources location=\"/js/\" mapping=\"/js/**\"/>\n<mvc:resources location=\"/img/\" mapping=\"/img/**\"/>\n``` \n如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？\n\n网上找不到解决的办法。求好心人能帮忙解答\n","slug":"SpringMVC报错","published":1,"updated":"2016-09-08T02:17:08.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc380009pcfp6wrl3wnw","content":"<h2 id=\"spring-报错\"><a href=\"#spring-报错\" class=\"headerlink\" title=\"spring 报错\"></a>spring 报错</h2><h3 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">  org.springframework.core.convert.ConversionFailedException: Failed to convert from <span class=\"built_in\">type</span> java.util.ArrayList&lt;?&gt; to <span class=\"built_in\">type</span> java.util.List&lt;org.springframework.core.io.Resource&gt; <span class=\"keyword\">for</span> value <span class=\"string\">'[/img/]'</span>; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class=\"built_in\">type</span> java.lang.String to <span class=\"built_in\">type</span> org.springframework.core.io.Resource</div><div class=\"line\">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)</div><div class=\"line\">at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory<span class=\"variable\">$1</span>.getObject(AbstractBeanFactory.java:295)</div><div class=\"line\">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)</div><div class=\"line\">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)</div><div class=\"line\">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)</div><div class=\"line\">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)</div><div class=\"line\">at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)</div><div class=\"line\">at javax.servlet.GenericServlet.init(GenericServlet.java:158)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)</div><div class=\"line\">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)</div><div class=\"line\">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)</div><div class=\"line\">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)</div><div class=\"line\">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</div><div class=\"line\">at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)</div><div class=\"line\">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</div><div class=\"line\">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)</div><div class=\"line\">at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)</div><div class=\"line\">at org.apache.coyote.AbstractProtocol<span class=\"variable\">$AbstractConnectionHandler</span>.process(AbstractProtocol.java:620)</div><div class=\"line\">at org.apache.tomcat.util.net.JIoEndpoint<span class=\"variable\">$SocketProcessor</span>.run(JIoEndpoint.java:316)</div><div class=\"line\">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class=\"line\">at java.util.concurrent.ThreadPoolExecutor<span class=\"variable\">$Worker</span>.run(ThreadPoolExecutor.java:615)</div><div class=\"line\">at org.apache.tomcat.util.threads.TaskThread<span class=\"variable\">$WrappingRunnable</span>.run(TaskThread.java:61)</div><div class=\"line\">at java.lang.Thread.run(Thread.java:745)</div><div class=\"line\">Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class=\"built_in\">type</span> java.lang.String to <span class=\"built_in\">type</span> org.springframework.core.io.Resource</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)</div><div class=\"line\">at org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)</div><div class=\"line\">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)</div><div class=\"line\">... 42 more</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>我在springmvc.xml配置了mvc：resoure，配置信息如下：</p>\n<pre><code class=\"bash\">&lt;mvc:resources location=<span class=\"string\">\"/js/\"</span> mapping=<span class=\"string\">\"/js/**\"</span>/&gt;\n&lt;mvc:resources location=<span class=\"string\">\"/img/\"</span> mapping=<span class=\"string\">\"/img/**\"</span>/&gt;\n</code></pre>\n<p>如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？</p>\n<p>网上找不到解决的办法。求好心人能帮忙解答</p>\n","excerpt":"","more":"<h2 id=\"spring-报错\"><a href=\"#spring-报错\" class=\"headerlink\" title=\"spring 报错\"></a>spring 报错</h2><h3 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">  org.springframework.core.convert.ConversionFailedException: Failed to convert from <span class=\"built_in\">type</span> java.util.ArrayList&lt;?&gt; to <span class=\"built_in\">type</span> java.util.List&lt;org.springframework.core.io.Resource&gt; <span class=\"keyword\">for</span> value <span class=\"string\">'[/img/]'</span>; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class=\"built_in\">type</span> java.lang.String to <span class=\"built_in\">type</span> org.springframework.core.io.Resource</div><div class=\"line\">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)</div><div class=\"line\">at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory<span class=\"variable\">$1</span>.getObject(AbstractBeanFactory.java:295)</div><div class=\"line\">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)</div><div class=\"line\">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)</div><div class=\"line\">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)</div><div class=\"line\">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)</div><div class=\"line\">at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)</div><div class=\"line\">at javax.servlet.GenericServlet.init(GenericServlet.java:158)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)</div><div class=\"line\">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)</div><div class=\"line\">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)</div><div class=\"line\">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)</div><div class=\"line\">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</div><div class=\"line\">at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)</div><div class=\"line\">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</div><div class=\"line\">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)</div><div class=\"line\">at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)</div><div class=\"line\">at org.apache.coyote.AbstractProtocol<span class=\"variable\">$AbstractConnectionHandler</span>.process(AbstractProtocol.java:620)</div><div class=\"line\">at org.apache.tomcat.util.net.JIoEndpoint<span class=\"variable\">$SocketProcessor</span>.run(JIoEndpoint.java:316)</div><div class=\"line\">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class=\"line\">at java.util.concurrent.ThreadPoolExecutor<span class=\"variable\">$Worker</span>.run(ThreadPoolExecutor.java:615)</div><div class=\"line\">at org.apache.tomcat.util.threads.TaskThread<span class=\"variable\">$WrappingRunnable</span>.run(TaskThread.java:61)</div><div class=\"line\">at java.lang.Thread.run(Thread.java:745)</div><div class=\"line\">Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class=\"built_in\">type</span> java.lang.String to <span class=\"built_in\">type</span> org.springframework.core.io.Resource</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)</div><div class=\"line\">at org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)</div><div class=\"line\">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)</div><div class=\"line\">... 42 more</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>我在springmvc.xml配置了mvc：resoure，配置信息如下：</p>\n<pre><code class=\"bash\">&lt;mvc:resources location=<span class=\"string\">\"/js/\"</span> mapping=<span class=\"string\">\"/js/**\"</span>/&gt;\n&lt;mvc:resources location=<span class=\"string\">\"/img/\"</span> mapping=<span class=\"string\">\"/img/**\"</span>/&gt;\n</code></pre>\n<p>如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？</p>\n<p>网上找不到解决的办法。求好心人能帮忙解答</p>\n"},{"title":"SpringMVC静态资源加载出错--未解决","date":"2016-02-19T14:55:44.000Z","_content":"## 问题：\n\t使用mvc：resource配置\n\n\tweb.xml配置是rest风格的/\n\n服务器启动没问题 访问地址是报404\n\n\t另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。\n\n希望有大神来解答一下\n\n","source":"_posts/SpringMVC静态资源加载出错--未解决.md","raw":"---\ntitle: SpringMVC静态资源加载出错--未解决\ndate: 2016-02-19 22:55:44\ntags: \n- Java\n- SpringMVC \n- 静态资源\ncategories: \n- Java\n- SpringMVC \n- 问题\n---\n## 问题：\n\t使用mvc：resource配置\n\n\tweb.xml配置是rest风格的/\n\n服务器启动没问题 访问地址是报404\n\n\t另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。\n\n希望有大神来解答一下\n\n","slug":"SpringMVC静态资源加载出错--未解决","published":1,"updated":"2016-09-08T02:17:33.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3a000cpcfpkknv6p7j","content":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><pre><code>使用mvc：resource配置\n\nweb.xml配置是rest风格的/\n</code></pre><p>服务器启动没问题 访问地址是报404</p>\n<pre><code>另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。\n</code></pre><p>希望有大神来解答一下</p>\n","excerpt":"","more":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><pre><code>使用mvc：resource配置\n\nweb.xml配置是rest风格的/\n</code></pre><p>服务器启动没问题 访问地址是报404</p>\n<pre><code>另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。\n</code></pre><p>希望有大神来解答一下</p>\n"},{"title":"csv 笔记","date":"2016-12-02T12:40:41.000Z","_content":" ## csv初使用\nCOMMON-CSV**[官网](http://commons.apache.org/proper/commons-csv/)**\n> 项目中批量插入数据库使用的mybatis，在做数据导入的时候，觉得是mybatis的批量导入有问题，后来发现其实是没问题的。当时没看时间花费多少，就找到了common-csv来做测试，在知乎上也有很多人说用csv配合load data会很快，后来测试之后，其实感觉是差不多的，我的数据量是1000左右，可能在1w以上的数据就会出现差异，load data 这个东西感觉是效率很高，使用起来也是很方便，在项目中引用common-csv的jar包即可\n\n\n### 示例\n- mybatis xml 文件配置\n```\n<insert id=\"createOrdersByCsv\"   >\n    LOAD  DATA LOCAL INFILE #{filePath}\n   INTO TABLE wo_work_order_test\n   FIELDS   TERMINATED BY ','\n      lines terminated by '\\r\\n'\n(ID, ENTERPRISE_ID, ORDER_NO,CUSTOMER_ID,\nSTATUS,PRIORITY,SUBJECT,CONTENT,SOURCE,WORKGROUP,AGENT,IS_DELETE,\nSTRATEGY,HAS_FILES,DISPATCH_STATUS,BATCH_NO,CREATE_TIME,\nUPDATE_TIME,OVER_TIME,HANDING_OVER_TIME,OVER_TIME_FLAG,\nHANDING_OVER_TIME_FLAG,WG_RECEIVE_TIME,AG_RECEIVE_TIME);\n    </insert>\n```\n- java 代码生成csv文件\n```\n/**\n     * 通过Csv文件导入mySql数据库\n     * @param entities 实体list\n     * @return boolean 导入结果\n     */\n    private boolean createOrdersByCsv(List<OrderEntity>entities){\n        boolean result=false;\n        String filename = \"/usr/local/jiaxin_gw_container-1.0/tmp/\"+TimeUtils.getCurrentTimeStamp()+\"orders-tmp.csv\";\n        try {     \n        CSVFormat csvFileFormat = CSVFormat.RFC4180.withRecordSeparator(\"\\n\");// 创建CSVFormat\n\n        OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(filename),\"UTF-8\");\n        BufferedWriter bufferedWriter = new BufferedWriter(write);\n        CSVPrinter csvFilePrinter = new CSVPrinter(bufferedWriter, csvFileFormat);\n        StringBuilder recordStr = new StringBuilder();\n\n        for (OrderEntity entity : entities) {\n            recordStr.append(entity.getID() + \",\");\n            recordStr.append(entity.getEnterpriseID() + \",\");\n            recordStr.append(entity.getOrderNo() + \",\");\n            if(entity.getCustomerJID()==null){\n                recordStr.append(\"\\\\N\" + \",\");\n            }else{\n                recordStr.append(entity.getCustomerJID() + \",\");\n            }\n        \n            recordStr.append(entity.getStatus() + \",\");\n            recordStr.append(entity.getPriority() + \",\");\n            if(entity.getSubject()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getSubject() + \",\");\n            }\n        if(entity.getDescription()==null){\n            recordStr.append(\"\\\\N\" + \",\");\n        }else{\n            recordStr.append(entity.getDescription() + \",\");\n        }\n            \n            recordStr.append(entity.getSource() + \",\");\n\n            if(entity.getAcceptWkgroupJID()==null){\n                recordStr.append( \"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getAcceptWkgroupJID()+ \",\");\n            }\n \n            if(entity.getAcceptAgentJID()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getAcceptAgentJID() + \",\");\n            }\n        \n            recordStr.append(entity.getIsDelete() + \",\");\n            recordStr.append(entity.getDispatchStrategy() + \",\");\n            recordStr.append(entity.getHasAttach()+ \",\");\n            recordStr.append(entity.getDispatchStatus()+ \",\");\n            \n            recordStr.append(entity.getBatchNo()+ \",\");\n            recordStr.append(entity.getCreateTime()+ \",\");\n            recordStr.append(entity.getUpdateTime()+ \",\");\n            if(entity.getTimeoutTime()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getTimeoutTime()+ \",\"); \n            }\n        if(entity.getHandingOverTime()==null){\n            recordStr.append(\"\\\\N\"+ \",\");\n        }else{\n            recordStr.append(entity.getHandingOverTime()+ \",\");\n        }\n        \n            recordStr.append(entity.getOverTimeFlag()+ \",\");\n            recordStr.append(entity.getHandingOverTimeFlag());\n            recordStr.append(\"\\r\\n\");\n        }\n        \n                 recordStr.deleteCharAt(0);  \n                recordStr.deleteCharAt(recordStr.length()-1);  \n                csvFilePrinter.printRecord(recordStr.toString());  \n                recordStr.delete(0, recordStr.length()-1);  \n                csvFilePrinter.close();\n        orderDao.createOrdersByCsv(filename);\n        result=true;\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return result;\n    }\n```\n上面的\\\\N是null的String插入到mysql为null，如果不使用\\\\N，插入到数据库就是null的字符串，显然不对。\n\n### 总结\n 在使用过程中，生成csv文件中，产生的头尾双引号，还没有找到解决方法，所以导致插入数据库是有双引号的。\n 需要在api文档中找寻相关解决方法。这是一个问题。\n 还有就是分隔符的问题，导入的数据要是比较正常的数据还好，如果出现跟分割符相同的数据，会直接导致插入的数据90%的错误，这个是很严重的问题，所以用的时候要注意。","source":"_posts/common-csv.md","raw":"---\ntitle: csv 笔记\ndate: 2016-12-02 20:40:41\ntags: \n- csv\n- myslq\ncategories: \n- 笔记\n---\n ## csv初使用\nCOMMON-CSV**[官网](http://commons.apache.org/proper/commons-csv/)**\n> 项目中批量插入数据库使用的mybatis，在做数据导入的时候，觉得是mybatis的批量导入有问题，后来发现其实是没问题的。当时没看时间花费多少，就找到了common-csv来做测试，在知乎上也有很多人说用csv配合load data会很快，后来测试之后，其实感觉是差不多的，我的数据量是1000左右，可能在1w以上的数据就会出现差异，load data 这个东西感觉是效率很高，使用起来也是很方便，在项目中引用common-csv的jar包即可\n\n\n### 示例\n- mybatis xml 文件配置\n```\n<insert id=\"createOrdersByCsv\"   >\n    LOAD  DATA LOCAL INFILE #{filePath}\n   INTO TABLE wo_work_order_test\n   FIELDS   TERMINATED BY ','\n      lines terminated by '\\r\\n'\n(ID, ENTERPRISE_ID, ORDER_NO,CUSTOMER_ID,\nSTATUS,PRIORITY,SUBJECT,CONTENT,SOURCE,WORKGROUP,AGENT,IS_DELETE,\nSTRATEGY,HAS_FILES,DISPATCH_STATUS,BATCH_NO,CREATE_TIME,\nUPDATE_TIME,OVER_TIME,HANDING_OVER_TIME,OVER_TIME_FLAG,\nHANDING_OVER_TIME_FLAG,WG_RECEIVE_TIME,AG_RECEIVE_TIME);\n    </insert>\n```\n- java 代码生成csv文件\n```\n/**\n     * 通过Csv文件导入mySql数据库\n     * @param entities 实体list\n     * @return boolean 导入结果\n     */\n    private boolean createOrdersByCsv(List<OrderEntity>entities){\n        boolean result=false;\n        String filename = \"/usr/local/jiaxin_gw_container-1.0/tmp/\"+TimeUtils.getCurrentTimeStamp()+\"orders-tmp.csv\";\n        try {     \n        CSVFormat csvFileFormat = CSVFormat.RFC4180.withRecordSeparator(\"\\n\");// 创建CSVFormat\n\n        OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(filename),\"UTF-8\");\n        BufferedWriter bufferedWriter = new BufferedWriter(write);\n        CSVPrinter csvFilePrinter = new CSVPrinter(bufferedWriter, csvFileFormat);\n        StringBuilder recordStr = new StringBuilder();\n\n        for (OrderEntity entity : entities) {\n            recordStr.append(entity.getID() + \",\");\n            recordStr.append(entity.getEnterpriseID() + \",\");\n            recordStr.append(entity.getOrderNo() + \",\");\n            if(entity.getCustomerJID()==null){\n                recordStr.append(\"\\\\N\" + \",\");\n            }else{\n                recordStr.append(entity.getCustomerJID() + \",\");\n            }\n        \n            recordStr.append(entity.getStatus() + \",\");\n            recordStr.append(entity.getPriority() + \",\");\n            if(entity.getSubject()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getSubject() + \",\");\n            }\n        if(entity.getDescription()==null){\n            recordStr.append(\"\\\\N\" + \",\");\n        }else{\n            recordStr.append(entity.getDescription() + \",\");\n        }\n            \n            recordStr.append(entity.getSource() + \",\");\n\n            if(entity.getAcceptWkgroupJID()==null){\n                recordStr.append( \"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getAcceptWkgroupJID()+ \",\");\n            }\n \n            if(entity.getAcceptAgentJID()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getAcceptAgentJID() + \",\");\n            }\n        \n            recordStr.append(entity.getIsDelete() + \",\");\n            recordStr.append(entity.getDispatchStrategy() + \",\");\n            recordStr.append(entity.getHasAttach()+ \",\");\n            recordStr.append(entity.getDispatchStatus()+ \",\");\n            \n            recordStr.append(entity.getBatchNo()+ \",\");\n            recordStr.append(entity.getCreateTime()+ \",\");\n            recordStr.append(entity.getUpdateTime()+ \",\");\n            if(entity.getTimeoutTime()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getTimeoutTime()+ \",\"); \n            }\n        if(entity.getHandingOverTime()==null){\n            recordStr.append(\"\\\\N\"+ \",\");\n        }else{\n            recordStr.append(entity.getHandingOverTime()+ \",\");\n        }\n        \n            recordStr.append(entity.getOverTimeFlag()+ \",\");\n            recordStr.append(entity.getHandingOverTimeFlag());\n            recordStr.append(\"\\r\\n\");\n        }\n        \n                 recordStr.deleteCharAt(0);  \n                recordStr.deleteCharAt(recordStr.length()-1);  \n                csvFilePrinter.printRecord(recordStr.toString());  \n                recordStr.delete(0, recordStr.length()-1);  \n                csvFilePrinter.close();\n        orderDao.createOrdersByCsv(filename);\n        result=true;\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return result;\n    }\n```\n上面的\\\\N是null的String插入到mysql为null，如果不使用\\\\N，插入到数据库就是null的字符串，显然不对。\n\n### 总结\n 在使用过程中，生成csv文件中，产生的头尾双引号，还没有找到解决方法，所以导致插入数据库是有双引号的。\n 需要在api文档中找寻相关解决方法。这是一个问题。\n 还有就是分隔符的问题，导入的数据要是比较正常的数据还好，如果出现跟分割符相同的数据，会直接导致插入的数据90%的错误，这个是很严重的问题，所以用的时候要注意。","slug":"common-csv","published":1,"updated":"2016-12-02T12:59:14.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3b000dpcfpu784vmwy","content":"<h2 id=\"csv初使用\"><a href=\"#csv初使用\" class=\"headerlink\" title=\"csv初使用\"></a>csv初使用</h2><p>COMMON-CSV<strong><a href=\"http://commons.apache.org/proper/commons-csv/\" target=\"_blank\" rel=\"external\">官网</a></strong></p>\n<blockquote>\n<p>项目中批量插入数据库使用的mybatis，在做数据导入的时候，觉得是mybatis的批量导入有问题，后来发现其实是没问题的。当时没看时间花费多少，就找到了common-csv来做测试，在知乎上也有很多人说用csv配合load data会很快，后来测试之后，其实感觉是差不多的，我的数据量是1000左右，可能在1w以上的数据就会出现差异，load data 这个东西感觉是效率很高，使用起来也是很方便，在项目中引用common-csv的jar包即可</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li><p>mybatis xml 文件配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;insert id=&quot;createOrdersByCsv&quot;   &gt;</div><div class=\"line\">    LOAD  DATA LOCAL INFILE #&#123;filePath&#125;</div><div class=\"line\">   INTO TABLE wo_work_order_test</div><div class=\"line\">   FIELDS   TERMINATED BY &apos;,&apos;</div><div class=\"line\">      lines terminated by &apos;\\r\\n&apos;</div><div class=\"line\">(ID, ENTERPRISE_ID, ORDER_NO,CUSTOMER_ID,</div><div class=\"line\">STATUS,PRIORITY,SUBJECT,CONTENT,SOURCE,WORKGROUP,AGENT,IS_DELETE,</div><div class=\"line\">STRATEGY,HAS_FILES,DISPATCH_STATUS,BATCH_NO,CREATE_TIME,</div><div class=\"line\">UPDATE_TIME,OVER_TIME,HANDING_OVER_TIME,OVER_TIME_FLAG,</div><div class=\"line\">HANDING_OVER_TIME_FLAG,WG_RECEIVE_TIME,AG_RECEIVE_TIME);</div><div class=\"line\">    &lt;/insert&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>java 代码生成csv文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">     * 通过Csv文件导入mySql数据库</div><div class=\"line\">     * @param entities 实体list</div><div class=\"line\">     * @return boolean 导入结果</div><div class=\"line\">     */</div><div class=\"line\">    private boolean createOrdersByCsv(List&lt;OrderEntity&gt;entities)&#123;</div><div class=\"line\">        boolean result=false;</div><div class=\"line\">        String filename = &quot;/usr/local/jiaxin_gw_container-1.0/tmp/&quot;+TimeUtils.getCurrentTimeStamp()+&quot;orders-tmp.csv&quot;;</div><div class=\"line\">        try &#123;     </div><div class=\"line\">        CSVFormat csvFileFormat = CSVFormat.RFC4180.withRecordSeparator(&quot;\\n&quot;);// 创建CSVFormat</div><div class=\"line\"></div><div class=\"line\">        OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(filename),&quot;UTF-8&quot;);</div><div class=\"line\">        BufferedWriter bufferedWriter = new BufferedWriter(write);</div><div class=\"line\">        CSVPrinter csvFilePrinter = new CSVPrinter(bufferedWriter, csvFileFormat);</div><div class=\"line\">        StringBuilder recordStr = new StringBuilder();</div><div class=\"line\"></div><div class=\"line\">        for (OrderEntity entity : entities) &#123;</div><div class=\"line\">            recordStr.append(entity.getID() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getEnterpriseID() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getOrderNo() + &quot;,&quot;);</div><div class=\"line\">            if(entity.getCustomerJID()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot; + &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getCustomerJID() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getStatus() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getPriority() + &quot;,&quot;);</div><div class=\"line\">            if(entity.getSubject()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getSubject() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        if(entity.getDescription()==null)&#123;</div><div class=\"line\">            recordStr.append(&quot;\\\\N&quot; + &quot;,&quot;);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            recordStr.append(entity.getDescription() + &quot;,&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">            recordStr.append(entity.getSource() + &quot;,&quot;);</div><div class=\"line\"></div><div class=\"line\">            if(entity.getAcceptWkgroupJID()==null)&#123;</div><div class=\"line\">                recordStr.append( &quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getAcceptWkgroupJID()+ &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            if(entity.getAcceptAgentJID()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getAcceptAgentJID() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getIsDelete() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getDispatchStrategy() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getHasAttach()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getDispatchStatus()+ &quot;,&quot;);</div><div class=\"line\">            </div><div class=\"line\">            recordStr.append(entity.getBatchNo()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getCreateTime()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getUpdateTime()+ &quot;,&quot;);</div><div class=\"line\">            if(entity.getTimeoutTime()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getTimeoutTime()+ &quot;,&quot;); </div><div class=\"line\">            &#125;</div><div class=\"line\">        if(entity.getHandingOverTime()==null)&#123;</div><div class=\"line\">            recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            recordStr.append(entity.getHandingOverTime()+ &quot;,&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getOverTimeFlag()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getHandingOverTimeFlag());</div><div class=\"line\">            recordStr.append(&quot;\\r\\n&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">                 recordStr.deleteCharAt(0);  </div><div class=\"line\">                recordStr.deleteCharAt(recordStr.length()-1);  </div><div class=\"line\">                csvFilePrinter.printRecord(recordStr.toString());  </div><div class=\"line\">                recordStr.delete(0, recordStr.length()-1);  </div><div class=\"line\">                csvFilePrinter.close();</div><div class=\"line\">        orderDao.createOrdersByCsv(filename);</div><div class=\"line\">        result=true;</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            // TODO Auto-generated catch block</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的\\N是null的String插入到mysql为null，如果不使用\\N，插入到数据库就是null的字符串，显然不对。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p> 在使用过程中，生成csv文件中，产生的头尾双引号，还没有找到解决方法，所以导致插入数据库是有双引号的。<br> 需要在api文档中找寻相关解决方法。这是一个问题。<br> 还有就是分隔符的问题，导入的数据要是比较正常的数据还好，如果出现跟分割符相同的数据，会直接导致插入的数据90%的错误，这个是很严重的问题，所以用的时候要注意。</p>\n","excerpt":"","more":"<h2 id=\"csv初使用\"><a href=\"#csv初使用\" class=\"headerlink\" title=\"csv初使用\"></a>csv初使用</h2><p>COMMON-CSV<strong><a href=\"http://commons.apache.org/proper/commons-csv/\">官网</a></strong></p>\n<blockquote>\n<p>项目中批量插入数据库使用的mybatis，在做数据导入的时候，觉得是mybatis的批量导入有问题，后来发现其实是没问题的。当时没看时间花费多少，就找到了common-csv来做测试，在知乎上也有很多人说用csv配合load data会很快，后来测试之后，其实感觉是差不多的，我的数据量是1000左右，可能在1w以上的数据就会出现差异，load data 这个东西感觉是效率很高，使用起来也是很方便，在项目中引用common-csv的jar包即可</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li><p>mybatis xml 文件配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;insert id=&quot;createOrdersByCsv&quot;   &gt;</div><div class=\"line\">    LOAD  DATA LOCAL INFILE #&#123;filePath&#125;</div><div class=\"line\">   INTO TABLE wo_work_order_test</div><div class=\"line\">   FIELDS   TERMINATED BY &apos;,&apos;</div><div class=\"line\">      lines terminated by &apos;\\r\\n&apos;</div><div class=\"line\">(ID, ENTERPRISE_ID, ORDER_NO,CUSTOMER_ID,</div><div class=\"line\">STATUS,PRIORITY,SUBJECT,CONTENT,SOURCE,WORKGROUP,AGENT,IS_DELETE,</div><div class=\"line\">STRATEGY,HAS_FILES,DISPATCH_STATUS,BATCH_NO,CREATE_TIME,</div><div class=\"line\">UPDATE_TIME,OVER_TIME,HANDING_OVER_TIME,OVER_TIME_FLAG,</div><div class=\"line\">HANDING_OVER_TIME_FLAG,WG_RECEIVE_TIME,AG_RECEIVE_TIME);</div><div class=\"line\">    &lt;/insert&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>java 代码生成csv文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">     * 通过Csv文件导入mySql数据库</div><div class=\"line\">     * @param entities 实体list</div><div class=\"line\">     * @return boolean 导入结果</div><div class=\"line\">     */</div><div class=\"line\">    private boolean createOrdersByCsv(List&lt;OrderEntity&gt;entities)&#123;</div><div class=\"line\">        boolean result=false;</div><div class=\"line\">        String filename = &quot;/usr/local/jiaxin_gw_container-1.0/tmp/&quot;+TimeUtils.getCurrentTimeStamp()+&quot;orders-tmp.csv&quot;;</div><div class=\"line\">        try &#123;     </div><div class=\"line\">        CSVFormat csvFileFormat = CSVFormat.RFC4180.withRecordSeparator(&quot;\\n&quot;);// 创建CSVFormat</div><div class=\"line\"></div><div class=\"line\">        OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(filename),&quot;UTF-8&quot;);</div><div class=\"line\">        BufferedWriter bufferedWriter = new BufferedWriter(write);</div><div class=\"line\">        CSVPrinter csvFilePrinter = new CSVPrinter(bufferedWriter, csvFileFormat);</div><div class=\"line\">        StringBuilder recordStr = new StringBuilder();</div><div class=\"line\"></div><div class=\"line\">        for (OrderEntity entity : entities) &#123;</div><div class=\"line\">            recordStr.append(entity.getID() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getEnterpriseID() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getOrderNo() + &quot;,&quot;);</div><div class=\"line\">            if(entity.getCustomerJID()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot; + &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getCustomerJID() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getStatus() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getPriority() + &quot;,&quot;);</div><div class=\"line\">            if(entity.getSubject()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getSubject() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        if(entity.getDescription()==null)&#123;</div><div class=\"line\">            recordStr.append(&quot;\\\\N&quot; + &quot;,&quot;);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            recordStr.append(entity.getDescription() + &quot;,&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">            recordStr.append(entity.getSource() + &quot;,&quot;);</div><div class=\"line\"></div><div class=\"line\">            if(entity.getAcceptWkgroupJID()==null)&#123;</div><div class=\"line\">                recordStr.append( &quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getAcceptWkgroupJID()+ &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            if(entity.getAcceptAgentJID()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getAcceptAgentJID() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getIsDelete() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getDispatchStrategy() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getHasAttach()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getDispatchStatus()+ &quot;,&quot;);</div><div class=\"line\">            </div><div class=\"line\">            recordStr.append(entity.getBatchNo()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getCreateTime()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getUpdateTime()+ &quot;,&quot;);</div><div class=\"line\">            if(entity.getTimeoutTime()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getTimeoutTime()+ &quot;,&quot;); </div><div class=\"line\">            &#125;</div><div class=\"line\">        if(entity.getHandingOverTime()==null)&#123;</div><div class=\"line\">            recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            recordStr.append(entity.getHandingOverTime()+ &quot;,&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getOverTimeFlag()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getHandingOverTimeFlag());</div><div class=\"line\">            recordStr.append(&quot;\\r\\n&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">                 recordStr.deleteCharAt(0);  </div><div class=\"line\">                recordStr.deleteCharAt(recordStr.length()-1);  </div><div class=\"line\">                csvFilePrinter.printRecord(recordStr.toString());  </div><div class=\"line\">                recordStr.delete(0, recordStr.length()-1);  </div><div class=\"line\">                csvFilePrinter.close();</div><div class=\"line\">        orderDao.createOrdersByCsv(filename);</div><div class=\"line\">        result=true;</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            // TODO Auto-generated catch block</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的\\N是null的String插入到mysql为null，如果不使用\\N，插入到数据库就是null的字符串，显然不对。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p> 在使用过程中，生成csv文件中，产生的头尾双引号，还没有找到解决方法，所以导致插入数据库是有双引号的。<br> 需要在api文档中找寻相关解决方法。这是一个问题。<br> 还有就是分隔符的问题，导入的数据要是比较正常的数据还好，如果出现跟分割符相同的数据，会直接导致插入的数据90%的错误，这个是很严重的问题，所以用的时候要注意。</p>\n"},{"title":"elasticsearch 笔记-插件","date":"2016-12-30T07:07:41.000Z","_content":" ## delete-by-query插件使用\n```\nTransportClient.builder().settings(settings).addPlugin(DeleteByQueryPlugin.class).build();  \n\n```\n\ndeleteByQuery插件是通过按照查询出来的doc 来进行删除操作。\n- es的集群都需要安装deleteByQuery 插件，到es的安装目录里执行plugin install deletebyQuery命令则可安装\n- es安装完需要重启，重新加载插件\n- 客户端创建时需要添加plugin的支持如上面代码\n- eg：  \n\n```\n/**\n * es 查询删除操作\n * @param index 索引\n * @param type 类型\n * @param column 删除字段的列名\n * @param deleteValue 删除字段值\n * @return long 删除结果\n */\n    public  long deleteByQuery (String index,String type,String column,String deleteValue) {\n        String deleteByQuery=\"{\\\"query\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"term\\\":{\\\"\"+column+\"\\\":\\\"\"+deleteValue+\"\\\"}}]}}}\";\n        LOG.info(\"[EsJdbcDaoSupport.deleteByQuery] request json-> \"+deleteByQuery);\n        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(EsConnectionFactory.transportClient,   \n                                          DeleteByQueryAction.INSTANCE)\n                                          .setIndices(index)\n                                          .setTypes(type)\n                                          .setSource(deleteByQuery)\n                                          .execute()\n                                          .actionGet();  \n        return response.getTotalFound();\n    }\n```\n这种方式是通过拼装请求json 来获得查询条件，然后es发送json查询。  \n\n```\n    /**\n     * 查询es记录\n     * \n     * @param index 数据库\n     * @param type 表\n     * @param dataMap 字段对应的数据\n     * @return  boolean\n     */\n    public  long delete (String index,String type,String deleteId) {\n        TransportClient client =EsConnectionFactory.createEsClient();\n        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(client,   \n                                          DeleteByQueryAction.INSTANCE)\n                                          .setIndices(index)\n                                          .setTypes(type)\n                                         .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"QS_ENTERPRISE_ID\", deleteId)))\n                                          .execute()\n                                          .actionGet();  \n        return response.getTotalFound();\n    }\n```\n这种方式是通过原生es的查询查询数据，两种效果一样，不过我还是比较喜欢第二种。第一种可以动态生成查询条件，第二种动态生成好像是不行。\n\n## update-by-query 插件使用  \n\n```\nTransportClient.builder().settings(settings).addPlugin(ReindexPlugin.class).build();\n```\n\n- update-by-query插件是通过按照查询出来的doc 来进行更新操作，主要原理应该是：es不支持直接操作es单条记录，所以要把更新的记录拿出来，然后删除原来的，把更新后插入进去。\n- es 不需要安装，不需要重启\n- 工程中添加reindex.jar，jar包在下载es里面的lib中可以找到\n- 客户端创建时需要添加plugin的支持如上面代码\n- eg：  \n\n```\n        UpdateByQueryRequestBuilder ubqrb=UpdateByQueryAction.INSTANCE.newRequestBuilder(client);\n        BulkIndexByScrollResponse r=ubqrb.source(INDEX_ST_SESSION_TAG_SDR)\n                              .script(new Script(\"[ctx._source.ST_TAG_ID2=0,ctx._source.ST_TAG_ID3=0]\"))\n                              .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"ST_ENTERPRISE_ID\", orgName)))\n                             .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"ST_TAG_ID2\", tagid)))\n                             .get();\n```\n\nupdate-by-query 的难点在于一开始的script的写法，一开始不懂如何写script，后来看了各种文档api，才发现ctx.source是最重要的一个参数。后面的才是es的对应的列名（mapping），个人感觉ctx代表了所有数据的所有属性。\n\n## 总结\n通过学习两种插件的使用，更加了解了es的运作，现在用的是2.4.1的版本。没有升级，好像5的版本已经自带插件了，不需要再手动添加插件了。不过，还是觉得es配合sql的操作还是不让人放心。复杂的业务操作还是用原生的es，不需要用sql插件，不然会出现一些不可预知的情况。","source":"_posts/elasticsearch-笔记-插件.md","raw":"---\ntitle: elasticsearch 笔记-插件\ndate: 2016-12-30 15:07:41\ntags: \n- elasticsearch-插件\n- 分布式\ncategories: \n- elasticsearch\n- 分布式\n---\n ## delete-by-query插件使用\n```\nTransportClient.builder().settings(settings).addPlugin(DeleteByQueryPlugin.class).build();  \n\n```\n\ndeleteByQuery插件是通过按照查询出来的doc 来进行删除操作。\n- es的集群都需要安装deleteByQuery 插件，到es的安装目录里执行plugin install deletebyQuery命令则可安装\n- es安装完需要重启，重新加载插件\n- 客户端创建时需要添加plugin的支持如上面代码\n- eg：  \n\n```\n/**\n * es 查询删除操作\n * @param index 索引\n * @param type 类型\n * @param column 删除字段的列名\n * @param deleteValue 删除字段值\n * @return long 删除结果\n */\n    public  long deleteByQuery (String index,String type,String column,String deleteValue) {\n        String deleteByQuery=\"{\\\"query\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"term\\\":{\\\"\"+column+\"\\\":\\\"\"+deleteValue+\"\\\"}}]}}}\";\n        LOG.info(\"[EsJdbcDaoSupport.deleteByQuery] request json-> \"+deleteByQuery);\n        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(EsConnectionFactory.transportClient,   \n                                          DeleteByQueryAction.INSTANCE)\n                                          .setIndices(index)\n                                          .setTypes(type)\n                                          .setSource(deleteByQuery)\n                                          .execute()\n                                          .actionGet();  \n        return response.getTotalFound();\n    }\n```\n这种方式是通过拼装请求json 来获得查询条件，然后es发送json查询。  \n\n```\n    /**\n     * 查询es记录\n     * \n     * @param index 数据库\n     * @param type 表\n     * @param dataMap 字段对应的数据\n     * @return  boolean\n     */\n    public  long delete (String index,String type,String deleteId) {\n        TransportClient client =EsConnectionFactory.createEsClient();\n        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(client,   \n                                          DeleteByQueryAction.INSTANCE)\n                                          .setIndices(index)\n                                          .setTypes(type)\n                                         .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"QS_ENTERPRISE_ID\", deleteId)))\n                                          .execute()\n                                          .actionGet();  \n        return response.getTotalFound();\n    }\n```\n这种方式是通过原生es的查询查询数据，两种效果一样，不过我还是比较喜欢第二种。第一种可以动态生成查询条件，第二种动态生成好像是不行。\n\n## update-by-query 插件使用  \n\n```\nTransportClient.builder().settings(settings).addPlugin(ReindexPlugin.class).build();\n```\n\n- update-by-query插件是通过按照查询出来的doc 来进行更新操作，主要原理应该是：es不支持直接操作es单条记录，所以要把更新的记录拿出来，然后删除原来的，把更新后插入进去。\n- es 不需要安装，不需要重启\n- 工程中添加reindex.jar，jar包在下载es里面的lib中可以找到\n- 客户端创建时需要添加plugin的支持如上面代码\n- eg：  \n\n```\n        UpdateByQueryRequestBuilder ubqrb=UpdateByQueryAction.INSTANCE.newRequestBuilder(client);\n        BulkIndexByScrollResponse r=ubqrb.source(INDEX_ST_SESSION_TAG_SDR)\n                              .script(new Script(\"[ctx._source.ST_TAG_ID2=0,ctx._source.ST_TAG_ID3=0]\"))\n                              .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"ST_ENTERPRISE_ID\", orgName)))\n                             .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"ST_TAG_ID2\", tagid)))\n                             .get();\n```\n\nupdate-by-query 的难点在于一开始的script的写法，一开始不懂如何写script，后来看了各种文档api，才发现ctx.source是最重要的一个参数。后面的才是es的对应的列名（mapping），个人感觉ctx代表了所有数据的所有属性。\n\n## 总结\n通过学习两种插件的使用，更加了解了es的运作，现在用的是2.4.1的版本。没有升级，好像5的版本已经自带插件了，不需要再手动添加插件了。不过，还是觉得es配合sql的操作还是不让人放心。复杂的业务操作还是用原生的es，不需要用sql插件，不然会出现一些不可预知的情况。","slug":"elasticsearch-笔记-插件","published":1,"updated":"2016-12-30T08:31:27.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3f000gpcfp5fy4htdc","content":"<h2 id=\"delete-by-query插件使用\"><a href=\"#delete-by-query插件使用\" class=\"headerlink\" title=\"delete-by-query插件使用\"></a>delete-by-query插件使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TransportClient.builder().settings(settings).addPlugin(DeleteByQueryPlugin.class).build();</div></pre></td></tr></table></figure>\n<p>deleteByQuery插件是通过按照查询出来的doc 来进行删除操作。</p>\n<ul>\n<li>es的集群都需要安装deleteByQuery 插件，到es的安装目录里执行plugin install deletebyQuery命令则可安装</li>\n<li>es安装完需要重启，重新加载插件</li>\n<li>客户端创建时需要添加plugin的支持如上面代码</li>\n<li>eg：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * es 查询删除操作</div><div class=\"line\"> * @param index 索引</div><div class=\"line\"> * @param type 类型</div><div class=\"line\"> * @param column 删除字段的列名</div><div class=\"line\"> * @param deleteValue 删除字段值</div><div class=\"line\"> * @return long 删除结果</div><div class=\"line\"> */</div><div class=\"line\">    public  long deleteByQuery (String index,String type,String column,String deleteValue) &#123;</div><div class=\"line\">        String deleteByQuery=&quot;&#123;\\&quot;query\\&quot;:&#123;\\&quot;bool\\&quot;:&#123;\\&quot;must\\&quot;:[&#123;\\&quot;term\\&quot;:&#123;\\&quot;&quot;+column+&quot;\\&quot;:\\&quot;&quot;+deleteValue+&quot;\\&quot;&#125;&#125;]&#125;&#125;&#125;&quot;;</div><div class=\"line\">        LOG.info(&quot;[EsJdbcDaoSupport.deleteByQuery] request json-&gt; &quot;+deleteByQuery);</div><div class=\"line\">        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(EsConnectionFactory.transportClient,   </div><div class=\"line\">                                          DeleteByQueryAction.INSTANCE)</div><div class=\"line\">                                          .setIndices(index)</div><div class=\"line\">                                          .setTypes(type)</div><div class=\"line\">                                          .setSource(deleteByQuery)</div><div class=\"line\">                                          .execute()</div><div class=\"line\">                                          .actionGet();  </div><div class=\"line\">        return response.getTotalFound();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这种方式是通过拼装请求json 来获得查询条件，然后es发送json查询。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 查询es记录</div><div class=\"line\"> * </div><div class=\"line\"> * @param index 数据库</div><div class=\"line\"> * @param type 表</div><div class=\"line\"> * @param dataMap 字段对应的数据</div><div class=\"line\"> * @return  boolean</div><div class=\"line\"> */</div><div class=\"line\">public  long delete (String index,String type,String deleteId) &#123;</div><div class=\"line\">    TransportClient client =EsConnectionFactory.createEsClient();</div><div class=\"line\">    DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(client,   </div><div class=\"line\">                                      DeleteByQueryAction.INSTANCE)</div><div class=\"line\">                                      .setIndices(index)</div><div class=\"line\">                                      .setTypes(type)</div><div class=\"line\">                                     .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;QS_ENTERPRISE_ID&quot;, deleteId)))</div><div class=\"line\">                                      .execute()</div><div class=\"line\">                                      .actionGet();  </div><div class=\"line\">    return response.getTotalFound();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式是通过原生es的查询查询数据，两种效果一样，不过我还是比较喜欢第二种。第一种可以动态生成查询条件，第二种动态生成好像是不行。</p>\n<h2 id=\"update-by-query-插件使用\"><a href=\"#update-by-query-插件使用\" class=\"headerlink\" title=\"update-by-query 插件使用\"></a>update-by-query 插件使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TransportClient.builder().settings(settings).addPlugin(ReindexPlugin.class).build();</div></pre></td></tr></table></figure>\n<ul>\n<li>update-by-query插件是通过按照查询出来的doc 来进行更新操作，主要原理应该是：es不支持直接操作es单条记录，所以要把更新的记录拿出来，然后删除原来的，把更新后插入进去。</li>\n<li>es 不需要安装，不需要重启</li>\n<li>工程中添加reindex.jar，jar包在下载es里面的lib中可以找到</li>\n<li>客户端创建时需要添加plugin的支持如上面代码</li>\n<li>eg：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">UpdateByQueryRequestBuilder ubqrb=UpdateByQueryAction.INSTANCE.newRequestBuilder(client);</div><div class=\"line\">BulkIndexByScrollResponse r=ubqrb.source(INDEX_ST_SESSION_TAG_SDR)</div><div class=\"line\">                      .script(new Script(&quot;[ctx._source.ST_TAG_ID2=0,ctx._source.ST_TAG_ID3=0]&quot;))</div><div class=\"line\">                      .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_ENTERPRISE_ID&quot;, orgName)))</div><div class=\"line\">                     .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_TAG_ID2&quot;, tagid)))</div><div class=\"line\">                     .get();</div></pre></td></tr></table></figure>\n<p>update-by-query 的难点在于一开始的script的写法，一开始不懂如何写script，后来看了各种文档api，才发现ctx.source是最重要的一个参数。后面的才是es的对应的列名（mapping），个人感觉ctx代表了所有数据的所有属性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过学习两种插件的使用，更加了解了es的运作，现在用的是2.4.1的版本。没有升级，好像5的版本已经自带插件了，不需要再手动添加插件了。不过，还是觉得es配合sql的操作还是不让人放心。复杂的业务操作还是用原生的es，不需要用sql插件，不然会出现一些不可预知的情况。</p>\n","excerpt":"","more":"<h2 id=\"delete-by-query插件使用\"><a href=\"#delete-by-query插件使用\" class=\"headerlink\" title=\"delete-by-query插件使用\"></a>delete-by-query插件使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TransportClient.builder().settings(settings).addPlugin(DeleteByQueryPlugin.class).build();</div></pre></td></tr></table></figure>\n<p>deleteByQuery插件是通过按照查询出来的doc 来进行删除操作。</p>\n<ul>\n<li>es的集群都需要安装deleteByQuery 插件，到es的安装目录里执行plugin install deletebyQuery命令则可安装</li>\n<li>es安装完需要重启，重新加载插件</li>\n<li>客户端创建时需要添加plugin的支持如上面代码</li>\n<li>eg：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * es 查询删除操作</div><div class=\"line\"> * @param index 索引</div><div class=\"line\"> * @param type 类型</div><div class=\"line\"> * @param column 删除字段的列名</div><div class=\"line\"> * @param deleteValue 删除字段值</div><div class=\"line\"> * @return long 删除结果</div><div class=\"line\"> */</div><div class=\"line\">    public  long deleteByQuery (String index,String type,String column,String deleteValue) &#123;</div><div class=\"line\">        String deleteByQuery=&quot;&#123;\\&quot;query\\&quot;:&#123;\\&quot;bool\\&quot;:&#123;\\&quot;must\\&quot;:[&#123;\\&quot;term\\&quot;:&#123;\\&quot;&quot;+column+&quot;\\&quot;:\\&quot;&quot;+deleteValue+&quot;\\&quot;&#125;&#125;]&#125;&#125;&#125;&quot;;</div><div class=\"line\">        LOG.info(&quot;[EsJdbcDaoSupport.deleteByQuery] request json-&gt; &quot;+deleteByQuery);</div><div class=\"line\">        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(EsConnectionFactory.transportClient,   </div><div class=\"line\">                                          DeleteByQueryAction.INSTANCE)</div><div class=\"line\">                                          .setIndices(index)</div><div class=\"line\">                                          .setTypes(type)</div><div class=\"line\">                                          .setSource(deleteByQuery)</div><div class=\"line\">                                          .execute()</div><div class=\"line\">                                          .actionGet();  </div><div class=\"line\">        return response.getTotalFound();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这种方式是通过拼装请求json 来获得查询条件，然后es发送json查询。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 查询es记录</div><div class=\"line\"> * </div><div class=\"line\"> * @param index 数据库</div><div class=\"line\"> * @param type 表</div><div class=\"line\"> * @param dataMap 字段对应的数据</div><div class=\"line\"> * @return  boolean</div><div class=\"line\"> */</div><div class=\"line\">public  long delete (String index,String type,String deleteId) &#123;</div><div class=\"line\">    TransportClient client =EsConnectionFactory.createEsClient();</div><div class=\"line\">    DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(client,   </div><div class=\"line\">                                      DeleteByQueryAction.INSTANCE)</div><div class=\"line\">                                      .setIndices(index)</div><div class=\"line\">                                      .setTypes(type)</div><div class=\"line\">                                     .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;QS_ENTERPRISE_ID&quot;, deleteId)))</div><div class=\"line\">                                      .execute()</div><div class=\"line\">                                      .actionGet();  </div><div class=\"line\">    return response.getTotalFound();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式是通过原生es的查询查询数据，两种效果一样，不过我还是比较喜欢第二种。第一种可以动态生成查询条件，第二种动态生成好像是不行。</p>\n<h2 id=\"update-by-query-插件使用\"><a href=\"#update-by-query-插件使用\" class=\"headerlink\" title=\"update-by-query 插件使用\"></a>update-by-query 插件使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TransportClient.builder().settings(settings).addPlugin(ReindexPlugin.class).build();</div></pre></td></tr></table></figure>\n<ul>\n<li>update-by-query插件是通过按照查询出来的doc 来进行更新操作，主要原理应该是：es不支持直接操作es单条记录，所以要把更新的记录拿出来，然后删除原来的，把更新后插入进去。</li>\n<li>es 不需要安装，不需要重启</li>\n<li>工程中添加reindex.jar，jar包在下载es里面的lib中可以找到</li>\n<li>客户端创建时需要添加plugin的支持如上面代码</li>\n<li>eg：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">UpdateByQueryRequestBuilder ubqrb=UpdateByQueryAction.INSTANCE.newRequestBuilder(client);</div><div class=\"line\">BulkIndexByScrollResponse r=ubqrb.source(INDEX_ST_SESSION_TAG_SDR)</div><div class=\"line\">                      .script(new Script(&quot;[ctx._source.ST_TAG_ID2=0,ctx._source.ST_TAG_ID3=0]&quot;))</div><div class=\"line\">                      .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_ENTERPRISE_ID&quot;, orgName)))</div><div class=\"line\">                     .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_TAG_ID2&quot;, tagid)))</div><div class=\"line\">                     .get();</div></pre></td></tr></table></figure>\n<p>update-by-query 的难点在于一开始的script的写法，一开始不懂如何写script，后来看了各种文档api，才发现ctx.source是最重要的一个参数。后面的才是es的对应的列名（mapping），个人感觉ctx代表了所有数据的所有属性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过学习两种插件的使用，更加了解了es的运作，现在用的是2.4.1的版本。没有升级，好像5的版本已经自带插件了，不需要再手动添加插件了。不过，还是觉得es配合sql的操作还是不让人放心。复杂的业务操作还是用原生的es，不需要用sql插件，不然会出现一些不可预知的情况。</p>\n"},{"title":"linux下elasticsearch插件安装笔记(head,sql)","date":"2017-05-04T07:43:41.000Z","_content":"\n ## 说明\n 这里的版本是es5.1.2，不适用5.x以下，5.x以下是用插件的形式安装在es上面，具体看git。\n 安装的目录，和解压的目录都可以随便选的，但是为了统一管理，最好全部插件安装在es的根目录下（个人建议），因为我这里此前有人安装过相关的插件，分散在不同的目录，搞起来让我很懵逼。\n\n ## elasticsearch-head\ngithub链接 **[elasticsearch-head](https://github.com/mobz/elasticsearch-head)**\n head 插件在window安装跟linux安装操作步骤基本相似，这里就介绍linux下安装即可。\n1.首先需要git clone head 插件到本地，在linux上使用git命令也行，下载到本地再上传到linux服务器也行，哪方便行。\n2.安装npm：\n使用国外镜像会比较慢，所以使用淘宝镜像，很快的。\n```\nwget https://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.4.7-linux-x64.tar.gz\n```\n3.解压：\n```\ntar -zxvf node-v4.4.7-linux-x64.tar.gz\n```\n4.设置环境变量：<strong>这个步骤很重要<strong>,直接影响到npm安装是否正确\n```\nexport PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin\n```\n  这个opt是刚才解压的目录，这个一定不要错。\n5.查看npm版本：\n\n```\nnpm -v\n```\n\n 看下有没有版本号，有的话就没问题了。没有的话应该是环境变量出问题了，先看下当前环境变量\n\n ```\n echo $PATH\n ```\n\n 有上一步的安装目录的话，就没有问题了，这时候需要你重新设置环境变量\n\n ```\n export PATH=把刚才path的值拷贝过来就可以了\n ```\n\n然后重新npm -v 看下，如果还是不行，建议重新安装npm。  \n  \n另外还有一个很奇葩的东西，不知道是不是linux自带了node，会导致环境变量有问题，如果发现自带的node，请务必要删掉，然后重新设置PATH。  \n\n另外装完npm之后可以装n插件，这个插件可以更新最新版本的node，具体详情可以bing一下。\n\n6.在head插件根目录下安装npm和grunt插件\n\n```\n npm install  cnpm --registry=https://registry.npm.taobao.org\n npm install  grunt–cli\n```\n\n7.修改Elasticsearch配置文件\n\n编辑elasticsearch-5.1.1/config/elasticsearch.yml,加入以下内容：\n\n```\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n\n8.修改Gruntfile.js\n打开elasticsearch-head-master/Gruntfile.js，找到下面connect属性，新增hostname: ‘0.0.0.0’,同时里面的port参数是对应的端口号，访问的时候就是这个端口号了，按需配置。\n\n```\nconnect: {\n        server: {\n            options: {\n                hostname: '0.0.0.0',\n                port: 9100,\n                base: '.',\n                keepalive: true\n            }\n        }\n    }   \n```\n\n9.启动elasticsearch-head\n在elasticsearch-head-master/目录下，运行启动命令:\n\n``` \ngrunt server  \n\n```\n\n这个操作可能会出现异常，提示插件找不到，所以要找到elasticsearch-head-master/目录下的package.json里面最后的\"devDependencies\"参数，安装需要的插件包。\n\n```\nnpm install 插件名@版本号\n```\n\n安装完再启动就好了。\n\n\n10.后台启动elasticsearch-head\n\n```\nnohup grunt server &exit\n```\n\n如果想关闭head插件，使用Linux查找进程命令：\n\n```\nps aux|grep head\n```\n\n结束进程：\n\n```\nkill 进程号\n```\n\n至此，head插件已成功安装。\n![head](/img/head.bmp)  \n\n ## elasticsearch-sql\n github链接 **[elasticsearch-sql](https://github.com/NLPchina/elasticsearch-sql)**\n由于上面已经安装好整个环境了，就不需要再安装了，如果是反过来装的话，也要先装npm才行。\n>1.下载es-sql-site压缩包[https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。\n>2.切换到解压目录，并安装express插件，同时部署node服务。\n```\ncd site-server\nnpm install express --save\nnode node-server.js \n```\n>至此sql插件已成功安装,同样如果需要后台运行，需要使用nohup命令执行。\n另外sql端口号的配置在es-sql-site\\site-server目录下的site_configuration.json文件中配置。\n![sql](/img/sql.bmp)  \n\n### 总结\n   插件安装可能比较繁琐，特别是npm的安装，需要耐心。另外配置链接的地址可以写死在js里面\n![link1](/img/link1.bmp)  \n>这个的链接配置在head-master目录下elasticsearch-head-master\\_site\\app.js \n```\nline 4327 \"http://localhost:9200\" ->\"http://172.16.54.74:19200\"\n```\n配置成启动的es的ip和端口即可\n\n![link2](/img/link2.bmp)  \n>这个的链接配置在head-master目录下es-sql-site\\_site\\controller.js\n\n```\nline 387    url = \"http://localhost:9200\"->\"http://172.16.54.74:19200\"\nline 390    url = location.protocol+'//' + location.hostname + (location.port ? ':'+location.port : '')->\"http://172.16.54.74:19200\"\n```  \n都改成启动的es的ip和端口即可，这样子就不需要每次打开插件都填写对应的ip和port了。","source":"_posts/elasticsearch插件安装笔记（head,sql）.md","raw":"---\ntitle: linux下elasticsearch插件安装笔记(head,sql)\ndate: 2017-05-04 15:43:41\ntags: \n- elasticsearch插件\n- linux\ncategories: \n- elasticsearch\n- linux\n---\n\n ## 说明\n 这里的版本是es5.1.2，不适用5.x以下，5.x以下是用插件的形式安装在es上面，具体看git。\n 安装的目录，和解压的目录都可以随便选的，但是为了统一管理，最好全部插件安装在es的根目录下（个人建议），因为我这里此前有人安装过相关的插件，分散在不同的目录，搞起来让我很懵逼。\n\n ## elasticsearch-head\ngithub链接 **[elasticsearch-head](https://github.com/mobz/elasticsearch-head)**\n head 插件在window安装跟linux安装操作步骤基本相似，这里就介绍linux下安装即可。\n1.首先需要git clone head 插件到本地，在linux上使用git命令也行，下载到本地再上传到linux服务器也行，哪方便行。\n2.安装npm：\n使用国外镜像会比较慢，所以使用淘宝镜像，很快的。\n```\nwget https://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.4.7-linux-x64.tar.gz\n```\n3.解压：\n```\ntar -zxvf node-v4.4.7-linux-x64.tar.gz\n```\n4.设置环境变量：<strong>这个步骤很重要<strong>,直接影响到npm安装是否正确\n```\nexport PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin\n```\n  这个opt是刚才解压的目录，这个一定不要错。\n5.查看npm版本：\n\n```\nnpm -v\n```\n\n 看下有没有版本号，有的话就没问题了。没有的话应该是环境变量出问题了，先看下当前环境变量\n\n ```\n echo $PATH\n ```\n\n 有上一步的安装目录的话，就没有问题了，这时候需要你重新设置环境变量\n\n ```\n export PATH=把刚才path的值拷贝过来就可以了\n ```\n\n然后重新npm -v 看下，如果还是不行，建议重新安装npm。  \n  \n另外还有一个很奇葩的东西，不知道是不是linux自带了node，会导致环境变量有问题，如果发现自带的node，请务必要删掉，然后重新设置PATH。  \n\n另外装完npm之后可以装n插件，这个插件可以更新最新版本的node，具体详情可以bing一下。\n\n6.在head插件根目录下安装npm和grunt插件\n\n```\n npm install  cnpm --registry=https://registry.npm.taobao.org\n npm install  grunt–cli\n```\n\n7.修改Elasticsearch配置文件\n\n编辑elasticsearch-5.1.1/config/elasticsearch.yml,加入以下内容：\n\n```\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n\n8.修改Gruntfile.js\n打开elasticsearch-head-master/Gruntfile.js，找到下面connect属性，新增hostname: ‘0.0.0.0’,同时里面的port参数是对应的端口号，访问的时候就是这个端口号了，按需配置。\n\n```\nconnect: {\n        server: {\n            options: {\n                hostname: '0.0.0.0',\n                port: 9100,\n                base: '.',\n                keepalive: true\n            }\n        }\n    }   \n```\n\n9.启动elasticsearch-head\n在elasticsearch-head-master/目录下，运行启动命令:\n\n``` \ngrunt server  \n\n```\n\n这个操作可能会出现异常，提示插件找不到，所以要找到elasticsearch-head-master/目录下的package.json里面最后的\"devDependencies\"参数，安装需要的插件包。\n\n```\nnpm install 插件名@版本号\n```\n\n安装完再启动就好了。\n\n\n10.后台启动elasticsearch-head\n\n```\nnohup grunt server &exit\n```\n\n如果想关闭head插件，使用Linux查找进程命令：\n\n```\nps aux|grep head\n```\n\n结束进程：\n\n```\nkill 进程号\n```\n\n至此，head插件已成功安装。\n![head](/img/head.bmp)  \n\n ## elasticsearch-sql\n github链接 **[elasticsearch-sql](https://github.com/NLPchina/elasticsearch-sql)**\n由于上面已经安装好整个环境了，就不需要再安装了，如果是反过来装的话，也要先装npm才行。\n>1.下载es-sql-site压缩包[https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。\n>2.切换到解压目录，并安装express插件，同时部署node服务。\n```\ncd site-server\nnpm install express --save\nnode node-server.js \n```\n>至此sql插件已成功安装,同样如果需要后台运行，需要使用nohup命令执行。\n另外sql端口号的配置在es-sql-site\\site-server目录下的site_configuration.json文件中配置。\n![sql](/img/sql.bmp)  \n\n### 总结\n   插件安装可能比较繁琐，特别是npm的安装，需要耐心。另外配置链接的地址可以写死在js里面\n![link1](/img/link1.bmp)  \n>这个的链接配置在head-master目录下elasticsearch-head-master\\_site\\app.js \n```\nline 4327 \"http://localhost:9200\" ->\"http://172.16.54.74:19200\"\n```\n配置成启动的es的ip和端口即可\n\n![link2](/img/link2.bmp)  \n>这个的链接配置在head-master目录下es-sql-site\\_site\\controller.js\n\n```\nline 387    url = \"http://localhost:9200\"->\"http://172.16.54.74:19200\"\nline 390    url = location.protocol+'//' + location.hostname + (location.port ? ':'+location.port : '')->\"http://172.16.54.74:19200\"\n```  \n都改成启动的es的ip和端口即可，这样子就不需要每次打开插件都填写对应的ip和port了。","slug":"elasticsearch插件安装笔记（head,sql）","published":1,"updated":"2017-05-04T08:14:04.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3h000ipcfpnyvwktx1","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p> 这里的版本是es5.1.2，不适用5.x以下，5.x以下是用插件的形式安装在es上面，具体看git。<br> 安装的目录，和解压的目录都可以随便选的，但是为了统一管理，最好全部插件安装在es的根目录下（个人建议），因为我这里此前有人安装过相关的插件，分散在不同的目录，搞起来让我很懵逼。</p>\n<h2 id=\"elasticsearch-head\"><a href=\"#elasticsearch-head\" class=\"headerlink\" title=\"elasticsearch-head\"></a>elasticsearch-head</h2><p>github链接 <strong><a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"external\">elasticsearch-head</a></strong><br> head 插件在window安装跟linux安装操作步骤基本相似，这里就介绍linux下安装即可。<br>1.首先需要git clone head 插件到本地，在linux上使用git命令也行，下载到本地再上传到linux服务器也行，哪方便行。<br>2.安装npm：<br>使用国外镜像会比较慢，所以使用淘宝镜像，很快的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.4.7-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<p>3.解压：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf node-v4.4.7-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<p>4.设置环境变量：<strong>这个步骤很重要<strong>,直接影响到npm安装是否正确<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin</div></pre></td></tr></table></figure></strong></strong></p>\n<p>  这个opt是刚才解压的目录，这个一定不要错。<br>5.查看npm版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p> 看下有没有版本号，有的话就没问题了。没有的话应该是环境变量出问题了，先看下当前环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $PATH</div></pre></td></tr></table></figure>\n<p> 有上一步的安装目录的话，就没有问题了，这时候需要你重新设置环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=把刚才path的值拷贝过来就可以了</div></pre></td></tr></table></figure>\n<p>然后重新npm -v 看下，如果还是不行，建议重新安装npm。  </p>\n<p>另外还有一个很奇葩的东西，不知道是不是linux自带了node，会导致环境变量有问题，如果发现自带的node，请务必要删掉，然后重新设置PATH。  </p>\n<p>另外装完npm之后可以装n插件，这个插件可以更新最新版本的node，具体详情可以bing一下。</p>\n<p>6.在head插件根目录下安装npm和grunt插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install  cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\">npm install  grunt–cli</div></pre></td></tr></table></figure>\n<p>7.修改Elasticsearch配置文件</p>\n<p>编辑elasticsearch-5.1.1/config/elasticsearch.yml,加入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.cors.enabled: true</div><div class=\"line\">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure>\n<p>8.修改Gruntfile.js<br>打开elasticsearch-head-master/Gruntfile.js，找到下面connect属性，新增hostname: ‘0.0.0.0’,同时里面的port参数是对应的端口号，访问的时候就是这个端口号了，按需配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">connect: &#123;</div><div class=\"line\">        server: &#123;</div><div class=\"line\">            options: &#123;</div><div class=\"line\">                hostname: &apos;0.0.0.0&apos;,</div><div class=\"line\">                port: 9100,</div><div class=\"line\">                base: &apos;.&apos;,</div><div class=\"line\">                keepalive: true</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>9.启动elasticsearch-head<br>在elasticsearch-head-master/目录下，运行启动命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grunt server</div></pre></td></tr></table></figure>\n<p>这个操作可能会出现异常，提示插件找不到，所以要找到elasticsearch-head-master/目录下的package.json里面最后的”devDependencies”参数，安装需要的插件包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install 插件名@版本号</div></pre></td></tr></table></figure>\n<p>安装完再启动就好了。</p>\n<p>10.后台启动elasticsearch-head</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup grunt server &amp;exit</div></pre></td></tr></table></figure>\n<p>如果想关闭head插件，使用Linux查找进程命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux|grep head</div></pre></td></tr></table></figure>\n<p>结束进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill 进程号</div></pre></td></tr></table></figure>\n<p>至此，head插件已成功安装。<br><img src=\"/img/head.bmp\" alt=\"head\">  </p>\n<h2 id=\"elasticsearch-sql\"><a href=\"#elasticsearch-sql\" class=\"headerlink\" title=\"elasticsearch-sql\"></a>elasticsearch-sql</h2><p> github链接 <strong><a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"external\">elasticsearch-sql</a></strong><br>由于上面已经安装好整个环境了，就不需要再安装了，如果是反过来装的话，也要先装npm才行。</p>\n<blockquote>\n<p>1.下载es-sql-site压缩包[<a href=\"https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。\" target=\"_blank\" rel=\"external\">https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。</a><br>2.切换到解压目录，并安装express插件，同时部署node服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd site-server</div><div class=\"line\">npm install express --save</div><div class=\"line\">node node-server.js</div></pre></td></tr></table></figure></p>\n<p>至此sql插件已成功安装,同样如果需要后台运行，需要使用nohup命令执行。<br>另外sql端口号的配置在es-sql-site\\site-server目录下的site_configuration.json文件中配置。<br><img src=\"/img/sql.bmp\" alt=\"sql\">  </p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>   插件安装可能比较繁琐，特别是npm的安装，需要耐心。另外配置链接的地址可以写死在js里面<br><img src=\"/img/link1.bmp\" alt=\"link1\">  </p>\n<blockquote>\n<p>这个的链接配置在head-master目录下elasticsearch-head-master_site\\app.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">line 4327 &quot;http://localhost:9200&quot; -&gt;&quot;http://172.16.54.74:19200&quot;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>配置成启动的es的ip和端口即可</p>\n<p><img src=\"/img/link2.bmp\" alt=\"link2\">  </p>\n<blockquote>\n<p>这个的链接配置在head-master目录下es-sql-site_site\\controller.js</p>\n</blockquote>\n<pre><code>line 387    url = &quot;http://localhost:9200&quot;-&gt;&quot;http://172.16.54.74:19200&quot;\nline 390    url = location.protocol+&apos;//&apos; + location.hostname + (location.port ? &apos;:&apos;+location.port : &apos;&apos;)-&gt;&quot;http://172.16.54.74:19200&quot;\n</code></pre><p>都改成启动的es的ip和端口即可，这样子就不需要每次打开插件都填写对应的ip和port了。</p>\n","excerpt":"","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p> 这里的版本是es5.1.2，不适用5.x以下，5.x以下是用插件的形式安装在es上面，具体看git。<br> 安装的目录，和解压的目录都可以随便选的，但是为了统一管理，最好全部插件安装在es的根目录下（个人建议），因为我这里此前有人安装过相关的插件，分散在不同的目录，搞起来让我很懵逼。</p>\n<h2 id=\"elasticsearch-head\"><a href=\"#elasticsearch-head\" class=\"headerlink\" title=\"elasticsearch-head\"></a>elasticsearch-head</h2><p>github链接 <strong><a href=\"https://github.com/mobz/elasticsearch-head\">elasticsearch-head</a></strong><br> head 插件在window安装跟linux安装操作步骤基本相似，这里就介绍linux下安装即可。<br>1.首先需要git clone head 插件到本地，在linux上使用git命令也行，下载到本地再上传到linux服务器也行，哪方便行。<br>2.安装npm：<br>使用国外镜像会比较慢，所以使用淘宝镜像，很快的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.4.7-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<p>3.解压：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf node-v4.4.7-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<p>4.设置环境变量：<strong>这个步骤很重要<strong>,直接影响到npm安装是否正确<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin</div></pre></td></tr></table></figure></p>\n<p>  这个opt是刚才解压的目录，这个一定不要错。<br>5.查看npm版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p> 看下有没有版本号，有的话就没问题了。没有的话应该是环境变量出问题了，先看下当前环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $PATH</div></pre></td></tr></table></figure>\n<p> 有上一步的安装目录的话，就没有问题了，这时候需要你重新设置环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=把刚才path的值拷贝过来就可以了</div></pre></td></tr></table></figure>\n<p>然后重新npm -v 看下，如果还是不行，建议重新安装npm。  </p>\n<p>另外还有一个很奇葩的东西，不知道是不是linux自带了node，会导致环境变量有问题，如果发现自带的node，请务必要删掉，然后重新设置PATH。  </p>\n<p>另外装完npm之后可以装n插件，这个插件可以更新最新版本的node，具体详情可以bing一下。</p>\n<p>6.在head插件根目录下安装npm和grunt插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install  cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\">npm install  grunt–cli</div></pre></td></tr></table></figure>\n<p>7.修改Elasticsearch配置文件</p>\n<p>编辑elasticsearch-5.1.1/config/elasticsearch.yml,加入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.cors.enabled: true</div><div class=\"line\">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure>\n<p>8.修改Gruntfile.js<br>打开elasticsearch-head-master/Gruntfile.js，找到下面connect属性，新增hostname: ‘0.0.0.0’,同时里面的port参数是对应的端口号，访问的时候就是这个端口号了，按需配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">connect: &#123;</div><div class=\"line\">        server: &#123;</div><div class=\"line\">            options: &#123;</div><div class=\"line\">                hostname: &apos;0.0.0.0&apos;,</div><div class=\"line\">                port: 9100,</div><div class=\"line\">                base: &apos;.&apos;,</div><div class=\"line\">                keepalive: true</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>9.启动elasticsearch-head<br>在elasticsearch-head-master/目录下，运行启动命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grunt server</div></pre></td></tr></table></figure>\n<p>这个操作可能会出现异常，提示插件找不到，所以要找到elasticsearch-head-master/目录下的package.json里面最后的”devDependencies”参数，安装需要的插件包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install 插件名@版本号</div></pre></td></tr></table></figure>\n<p>安装完再启动就好了。</p>\n<p>10.后台启动elasticsearch-head</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup grunt server &amp;exit</div></pre></td></tr></table></figure>\n<p>如果想关闭head插件，使用Linux查找进程命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux|grep head</div></pre></td></tr></table></figure>\n<p>结束进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill 进程号</div></pre></td></tr></table></figure>\n<p>至此，head插件已成功安装。<br><img src=\"/img/head.bmp\" alt=\"head\">  </p>\n<h2 id=\"elasticsearch-sql\"><a href=\"#elasticsearch-sql\" class=\"headerlink\" title=\"elasticsearch-sql\"></a>elasticsearch-sql</h2><p> github链接 <strong><a href=\"https://github.com/NLPchina/elasticsearch-sql\">elasticsearch-sql</a></strong><br>由于上面已经安装好整个环境了，就不需要再安装了，如果是反过来装的话，也要先装npm才行。</p>\n<blockquote>\n<p>1.下载es-sql-site压缩包[<a href=\"https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。\">https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。</a><br>2.切换到解压目录，并安装express插件，同时部署node服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd site-server</div><div class=\"line\">npm install express --save</div><div class=\"line\">node node-server.js</div></pre></td></tr></table></figure></p>\n<p>至此sql插件已成功安装,同样如果需要后台运行，需要使用nohup命令执行。<br>另外sql端口号的配置在es-sql-site\\site-server目录下的site_configuration.json文件中配置。<br><img src=\"/img/sql.bmp\" alt=\"sql\">  </p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>   插件安装可能比较繁琐，特别是npm的安装，需要耐心。另外配置链接的地址可以写死在js里面<br><img src=\"/img/link1.bmp\" alt=\"link1\">  </p>\n<blockquote>\n<p>这个的链接配置在head-master目录下elasticsearch-head-master_site\\app.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">line 4327 &quot;http://localhost:9200&quot; -&gt;&quot;http://172.16.54.74:19200&quot;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>配置成启动的es的ip和端口即可</p>\n<p><img src=\"/img/link2.bmp\" alt=\"link2\">  </p>\n<blockquote>\n<p>这个的链接配置在head-master目录下es-sql-site_site\\controller.js</p>\n</blockquote>\n<pre><code>line 387    url = &quot;http://localhost:9200&quot;-&gt;&quot;http://172.16.54.74:19200&quot;\nline 390    url = location.protocol+&apos;//&apos; + location.hostname + (location.port ? &apos;:&apos;+location.port : &apos;&apos;)-&gt;&quot;http://172.16.54.74:19200&quot;\n</code></pre><p>都改成启动的es的ip和端口即可，这样子就不需要每次打开插件都填写对应的ip和port了。</p>\n"},{"title":"elasticsearch-sql-5.1.2笔记","date":"2017-03-27T08:43:41.000Z","_content":" ## elasticsearch-sql-5.1.2\n**[elasticsearch-sql](https://github.com/NLPchina/elasticsearch-sql)**\n> ElasticSearch-sql 是es的插件之一，通过类sql查询es。最近更新了最新的5.1.2版本，出现某些异常情况。使用groupby的时候查询的时候只有10条，出现这个问题，尝试了在issue找答案，找到了发送请求的时候要设置size的大小，而sql插件源码包里面写死了200和10，至于怎么找出来的，我也是在别人的博客里面看到的，**[blog](http://blog.csdn.net/wangyang_software/article/details/51791573)**。因此，通过修改源码重新打包即可解决我的问题（源码包就跟打好的jar包放一起，名字也写上了source，多贴心），修改两个位置,如下\nline 76:这个位置是最后一次查询条数，改成Integer.MAX_VALUE。\n```\n      if(select.getRowCount()>0) {\n                        ((TermsAggregationBuilder) lastAgg).size(Integer.MAX_VALUE);\n                    }\n```\nline 109:这个位置是重点，每次的子查询都要设置size，改成Integer.MAX_VALUE。\n```\n    AggregationBuilder subAgg = getGroupAgg(field, select);\n                      //ES5.0 termsaggregation with size = 0 not supported anymore\n                    if (subAgg instanceof TermsAggregationBuilder && !(field instanceof MethodField)) {\n                        ((TermsAggregationBuilder) subAgg).size(Integer.MAX_VALUE);\n                    }\n\n```\n里面注释也有说到，5.0以上已经不支持size为0的设置，所以要设置值，不设置的话默认是10。这个问题在线上已经出现了，先准备升级修复这个问题。另外，如果数据超出了Integer.MAX_VALUE，则需要加上更多的过滤条件，似乎超过了查询就会出问题了，这个问题并没有深究。\n\n\n\n### 总结\n> 找这个问题的过程虽然艰辛，学习的过程让我很快乐，同时我也在es讨论网站也发出相关问题，跟相关的es使用者一起讨论，得到他们的回答，我也是想当开心的。Anyaway ，发现看源码真的让自己学习了很多。**[discuss.elastic.co]( https://discuss.elastic.co/top/all)**\n\n   ","source":"_posts/elasticsearch-sql-5.1.2笔记.md","raw":"---\ntitle: elasticsearch-sql-5.1.2笔记\ndate: 2017-03-27 16:43:41\ntags: \n- elasticsearch-sql\n- group_by\ncategories: \n- elasticsearch\n- 分布式\n---\n ## elasticsearch-sql-5.1.2\n**[elasticsearch-sql](https://github.com/NLPchina/elasticsearch-sql)**\n> ElasticSearch-sql 是es的插件之一，通过类sql查询es。最近更新了最新的5.1.2版本，出现某些异常情况。使用groupby的时候查询的时候只有10条，出现这个问题，尝试了在issue找答案，找到了发送请求的时候要设置size的大小，而sql插件源码包里面写死了200和10，至于怎么找出来的，我也是在别人的博客里面看到的，**[blog](http://blog.csdn.net/wangyang_software/article/details/51791573)**。因此，通过修改源码重新打包即可解决我的问题（源码包就跟打好的jar包放一起，名字也写上了source，多贴心），修改两个位置,如下\nline 76:这个位置是最后一次查询条数，改成Integer.MAX_VALUE。\n```\n      if(select.getRowCount()>0) {\n                        ((TermsAggregationBuilder) lastAgg).size(Integer.MAX_VALUE);\n                    }\n```\nline 109:这个位置是重点，每次的子查询都要设置size，改成Integer.MAX_VALUE。\n```\n    AggregationBuilder subAgg = getGroupAgg(field, select);\n                      //ES5.0 termsaggregation with size = 0 not supported anymore\n                    if (subAgg instanceof TermsAggregationBuilder && !(field instanceof MethodField)) {\n                        ((TermsAggregationBuilder) subAgg).size(Integer.MAX_VALUE);\n                    }\n\n```\n里面注释也有说到，5.0以上已经不支持size为0的设置，所以要设置值，不设置的话默认是10。这个问题在线上已经出现了，先准备升级修复这个问题。另外，如果数据超出了Integer.MAX_VALUE，则需要加上更多的过滤条件，似乎超过了查询就会出问题了，这个问题并没有深究。\n\n\n\n### 总结\n> 找这个问题的过程虽然艰辛，学习的过程让我很快乐，同时我也在es讨论网站也发出相关问题，跟相关的es使用者一起讨论，得到他们的回答，我也是想当开心的。Anyaway ，发现看源码真的让自己学习了很多。**[discuss.elastic.co]( https://discuss.elastic.co/top/all)**\n\n   ","slug":"elasticsearch-sql-5.1.2笔记","published":1,"updated":"2017-03-27T09:13:37.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3k000npcfpyopao3uw","content":"<h2 id=\"elasticsearch-sql-5-1-2\"><a href=\"#elasticsearch-sql-5-1-2\" class=\"headerlink\" title=\"elasticsearch-sql-5.1.2\"></a>elasticsearch-sql-5.1.2</h2><p><strong><a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"external\">elasticsearch-sql</a></strong></p>\n<blockquote>\n<p>ElasticSearch-sql 是es的插件之一，通过类sql查询es。最近更新了最新的5.1.2版本，出现某些异常情况。使用groupby的时候查询的时候只有10条，出现这个问题，尝试了在issue找答案，找到了发送请求的时候要设置size的大小，而sql插件源码包里面写死了200和10，至于怎么找出来的，我也是在别人的博客里面看到的，<strong><a href=\"http://blog.csdn.net/wangyang_software/article/details/51791573\" target=\"_blank\" rel=\"external\">blog</a></strong>。因此，通过修改源码重新打包即可解决我的问题（源码包就跟打好的jar包放一起，名字也写上了source，多贴心），修改两个位置,如下<br>line 76:这个位置是最后一次查询条数，改成Integer.MAX_VALUE。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(select.getRowCount()&gt;0) &#123;</div><div class=\"line\">                  ((TermsAggregationBuilder) lastAgg).size(Integer.MAX_VALUE);</div><div class=\"line\">              &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>line 109:这个位置是重点，每次的子查询都要设置size，改成Integer.MAX_VALUE。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">AggregationBuilder subAgg = getGroupAgg(field, select);</div><div class=\"line\">                  //ES5.0 termsaggregation with size = 0 not supported anymore</div><div class=\"line\">                if (subAgg instanceof TermsAggregationBuilder &amp;&amp; !(field instanceof MethodField)) &#123;</div><div class=\"line\">                    ((TermsAggregationBuilder) subAgg).size(Integer.MAX_VALUE);</div><div class=\"line\">                &#125;</div></pre></td></tr></table></figure></p>\n<p>里面注释也有说到，5.0以上已经不支持size为0的设置，所以要设置值，不设置的话默认是10。这个问题在线上已经出现了，先准备升级修复这个问题。另外，如果数据超出了Integer.MAX_VALUE，则需要加上更多的过滤条件，似乎超过了查询就会出问题了，这个问题并没有深究。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>找这个问题的过程虽然艰辛，学习的过程让我很快乐，同时我也在es讨论网站也发出相关问题，跟相关的es使用者一起讨论，得到他们的回答，我也是想当开心的。Anyaway ，发现看源码真的让自己学习了很多。<strong><a href=\"https://discuss.elastic.co/top/all\" target=\"_blank\" rel=\"external\">discuss.elastic.co</a></strong></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"elasticsearch-sql-5-1-2\"><a href=\"#elasticsearch-sql-5-1-2\" class=\"headerlink\" title=\"elasticsearch-sql-5.1.2\"></a>elasticsearch-sql-5.1.2</h2><p><strong><a href=\"https://github.com/NLPchina/elasticsearch-sql\">elasticsearch-sql</a></strong></p>\n<blockquote>\n<p>ElasticSearch-sql 是es的插件之一，通过类sql查询es。最近更新了最新的5.1.2版本，出现某些异常情况。使用groupby的时候查询的时候只有10条，出现这个问题，尝试了在issue找答案，找到了发送请求的时候要设置size的大小，而sql插件源码包里面写死了200和10，至于怎么找出来的，我也是在别人的博客里面看到的，<strong><a href=\"http://blog.csdn.net/wangyang_software/article/details/51791573\">blog</a></strong>。因此，通过修改源码重新打包即可解决我的问题（源码包就跟打好的jar包放一起，名字也写上了source，多贴心），修改两个位置,如下<br>line 76:这个位置是最后一次查询条数，改成Integer.MAX_VALUE。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(select.getRowCount()&gt;0) &#123;</div><div class=\"line\">                  ((TermsAggregationBuilder) lastAgg).size(Integer.MAX_VALUE);</div><div class=\"line\">              &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>line 109:这个位置是重点，每次的子查询都要设置size，改成Integer.MAX_VALUE。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">AggregationBuilder subAgg = getGroupAgg(field, select);</div><div class=\"line\">                  //ES5.0 termsaggregation with size = 0 not supported anymore</div><div class=\"line\">                if (subAgg instanceof TermsAggregationBuilder &amp;&amp; !(field instanceof MethodField)) &#123;</div><div class=\"line\">                    ((TermsAggregationBuilder) subAgg).size(Integer.MAX_VALUE);</div><div class=\"line\">                &#125;</div></pre></td></tr></table></figure></p>\n<p>里面注释也有说到，5.0以上已经不支持size为0的设置，所以要设置值，不设置的话默认是10。这个问题在线上已经出现了，先准备升级修复这个问题。另外，如果数据超出了Integer.MAX_VALUE，则需要加上更多的过滤条件，似乎超过了查询就会出问题了，这个问题并没有深究。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>找这个问题的过程虽然艰辛，学习的过程让我很快乐，同时我也在es讨论网站也发出相关问题，跟相关的es使用者一起讨论，得到他们的回答，我也是想当开心的。Anyaway ，发现看源码真的让自己学习了很多。<strong><a href=\"https://discuss.elastic.co/top/all\">discuss.elastic.co</a></strong></p>\n</blockquote>\n"},{"title":"git工程批量更新和自动提交","date":"2016-09-22T07:53:41.000Z","_content":" ##  git工程批量更新\n用gitbash客户端都有一种不爽，更新多个工程需要很多的fetch，rebase，stash等命令，所以无聊就看了下shell脚本，看能不能批量fetch，rebase，搞了下，还是可以的，不过我这个是直接pull，直接合并到当前工程。\n``` bash\n#/bin/bash\necho '**********选择更新的git项目**********'\necho '0.all'\necho '1.jiaxin_lib_core'\necho '2.jiaxin_lib_dubbox'\necho '3.jiaxin_web_devcenter'\necho '4.jiaxin_web_agent'\necho '5.jiaxin_web_conf'\necho '6.jiaxin_gw_statistics'\necho '7.jiaxin_gw_config'\necho '8.jiaxin_gw_container'\necho '9.jiaxin_gw_order'\nread project\n               #在控制台输入1 2 3，它们之间用空格隔开。\nif test $project -eq 0  ;then\necho '------------------------jiaxin_lib_core-----------------------'\ncd jiaxin_lib_core && git pull && cd ..\necho '------------------------jiaxin_lib_dubbox-----------------------'\ncd jiaxin_lib_dubbox && git pull && cd ..\necho '------------------------jiaxin_web_devcenter-----------------------'\ncd jiaxin_web_devcenter && git pull && cd ..\necho '------------------------jiaxin_web_agent-----------------------'\ncd jiaxin_web_agent && git pull && cd ..\necho '------------------------jiaxin_web_conf-----------------------'\ncd jiaxin_web_conf && git pull && cd ..\necho '------------------------jiaxin_gw_statistics-----------------------'\ncd jiaxin_gw_statistics && git pull && cd ..\necho '------------------------jiaxin_gw_config-----------------------'\ncd jiaxin_gw_config && git pull && cd ..\necho '------------------------jiaxin_gw_container-----------------------'\ncd jiaxin_gw_container && git checkout *.jar && git pull && cd ..\necho '------------------------jiaxin_gw_order-----------------------'\ncd jiaxin_gw_order && git pull && cd ..\nfi\n\nif test $project -eq 1 ;then   \necho '-----------------------jiaxin_lib_core-START-----------------------' \n\ncd jiaxin_lib_core && git pull && cd ..\necho '------------------------jiaxin_lib_core-END-----------------------';\nfi\nif test $project -eq 2  ;then\necho '------------------------jiaxin_lib_dubbox-START----------------------'\ncd jiaxin_lib_dubbox && git pull && cd ..\necho '-----------------------jiaxin_lib_dubbox-END-----------------------';\nfi\nif test $project -eq 3  ;then\necho '------------------------jiaxin_web_devcenter-START----------------------'\ncd jiaxin_web_devcenter && git pull && cd ..\necho '-----------------------jiaxin_web_devcenter-END-----------------------';\nfi\nif test $project -eq 4  ;then\necho '------------------------jiaxin_web_agent-START----------------------'\ncd jiaxin_web_agent && git pull && cd ..\necho '-----------------------jiaxin_web_agent-END-----------------------';\nfi\nif test $project -eq 5  ;then\necho '------------------------jiaxin_web_conf-START----------------------'\ncd jiaxin_web_conf && git pull && cd ..\necho '-----------------------jiaxin_web_conf-END-----------------------';\nfi\nif test $project -eq 6  ;then\necho '------------------------jiaxin_gw_statistics-START----------------------'\ncd jiaxin_gw_statistics && git pull && cd ..\necho '-----------------------jiaxin_gw_statistics-END-----------------------';\nfi\nif test $project -eq 7  ;then\necho '------------------------jiaxin_gw_config-START----------------------'\ncd jiaxin_gw_config && git pull && cd ..\necho '-----------------------jiaxin_gw_config-END-----------------------';\nfi\nif test $project -eq 8  ;then\necho '------------------------jiaxin_gw_container-START----------------------'\ncd jiaxin_gw_container && git checkout *.jar && git pull && cd ..\necho '-----------------------jiaxin_gw_container-END-----------------------';\nfi\nif test $project -eq 9  ;then\necho '------------------------jiaxin_gw_order-START----------------------'\ncd jiaxin_gw_order && git pull && cd ..\necho '-----------------------jiaxin_gw_order-END-----------------------';\nfi\n\n```\n\n##  git工程push\n\n``` bash\n#/bin/bash\necho '**********选择push的git项目**********'\necho '1.jiaxin_lib_core'\necho '2.jiaxin_lib_dubbox'\necho '3.jiaxin_web_devcenter'\necho '4.jiaxin_web_agent'\necho '5.jiaxin_web_conf'\necho '6.jiaxin_gw_statistics'\necho '7.jiaxin_gw_config'\necho '8.jiaxin_gw_order'\n\nread project\necho '请输入提交参数commit：'\nread commit\n               #在控制台输入1 2 3，它们之间用空格隔开。\nif test $project -eq 1 ;then   \necho '-----------------------jiaxin_lib_core-START-----------------------' \ncd jiaxin_lib_core && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '------------------------jiaxin_lib_core-END-----------------------';\nfi\nif test $project -eq 2  ;then\necho '------------------------jiaxin_lib_dubbox-START----------------------'\ncd jiaxin_lib_dubbox && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_lib_dubbox-END-----------------------';\nfi\nif test $project -eq 3  ;then\necho '------------------------jiaxin_web_devcenter-START----------------------'\ncd jiaxin_web_devcenter && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_devcenter-END-----------------------';\nfi\nif test $project -eq 4  ;then\necho '------------------------jiaxin_web_agent-START----------------------'\ncd jiaxin_web_agent && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_agent-END-----------------------';\nfi\nif test $project -eq 5  ;then\necho '------------------------jiaxin_web_conf-START----------------------'\ncd jiaxin_web_conf && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_conf-END-----------------------';\nfi\nif test $project -eq 6  ;then\necho '------------------------jiaxin_gw_statistics-START----------------------'\ncd jiaxin_gw_statistics && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_statistics-END-----------------------';\nfi\nif test $project -eq 7  ;then\necho '------------------------jiaxin_gw_config-START----------------------'\ncd jiaxin_gw_config && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_config-END-----------------------';\nfi\nif test $project -eq 8  ;then\necho '------------------------jiaxin_gw_order-START----------------------'\ncd jiaxin_gw_order && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_order-END-----------------------';\nfi  \n```   \n\n##  执行脚本  \n使用git客户端切换到git的根目录，执行脚本命令即可。\n```bash\n./update.sh\n```  \n或\n```bash\n./push.sh\n```  \n\n##  注意事项\n- 脚本放到git根目录，其实不放也可以的。你喜欢，[我的脚本位置](/img/git.png)\n- 根据个人需要修改相应git命令，以免造成代码混乱，容易产生冲突\n- 还有push的时候，也是需要按照个人需要修改的，因为git add的时候是全部的，最好区分一下\n- **相关代码已上传到github**          **[链接](https://github.com/wenthywang/pullAndpush)**","source":"_posts/git工程批量更新和自动提交.md","raw":"---\ntitle: git工程批量更新和自动提交\ndate: 2016-09-22 15:53:41\ntags: \n- Git\n- Shell\ncategories: \n- GIT\n---\n ##  git工程批量更新\n用gitbash客户端都有一种不爽，更新多个工程需要很多的fetch，rebase，stash等命令，所以无聊就看了下shell脚本，看能不能批量fetch，rebase，搞了下，还是可以的，不过我这个是直接pull，直接合并到当前工程。\n``` bash\n#/bin/bash\necho '**********选择更新的git项目**********'\necho '0.all'\necho '1.jiaxin_lib_core'\necho '2.jiaxin_lib_dubbox'\necho '3.jiaxin_web_devcenter'\necho '4.jiaxin_web_agent'\necho '5.jiaxin_web_conf'\necho '6.jiaxin_gw_statistics'\necho '7.jiaxin_gw_config'\necho '8.jiaxin_gw_container'\necho '9.jiaxin_gw_order'\nread project\n               #在控制台输入1 2 3，它们之间用空格隔开。\nif test $project -eq 0  ;then\necho '------------------------jiaxin_lib_core-----------------------'\ncd jiaxin_lib_core && git pull && cd ..\necho '------------------------jiaxin_lib_dubbox-----------------------'\ncd jiaxin_lib_dubbox && git pull && cd ..\necho '------------------------jiaxin_web_devcenter-----------------------'\ncd jiaxin_web_devcenter && git pull && cd ..\necho '------------------------jiaxin_web_agent-----------------------'\ncd jiaxin_web_agent && git pull && cd ..\necho '------------------------jiaxin_web_conf-----------------------'\ncd jiaxin_web_conf && git pull && cd ..\necho '------------------------jiaxin_gw_statistics-----------------------'\ncd jiaxin_gw_statistics && git pull && cd ..\necho '------------------------jiaxin_gw_config-----------------------'\ncd jiaxin_gw_config && git pull && cd ..\necho '------------------------jiaxin_gw_container-----------------------'\ncd jiaxin_gw_container && git checkout *.jar && git pull && cd ..\necho '------------------------jiaxin_gw_order-----------------------'\ncd jiaxin_gw_order && git pull && cd ..\nfi\n\nif test $project -eq 1 ;then   \necho '-----------------------jiaxin_lib_core-START-----------------------' \n\ncd jiaxin_lib_core && git pull && cd ..\necho '------------------------jiaxin_lib_core-END-----------------------';\nfi\nif test $project -eq 2  ;then\necho '------------------------jiaxin_lib_dubbox-START----------------------'\ncd jiaxin_lib_dubbox && git pull && cd ..\necho '-----------------------jiaxin_lib_dubbox-END-----------------------';\nfi\nif test $project -eq 3  ;then\necho '------------------------jiaxin_web_devcenter-START----------------------'\ncd jiaxin_web_devcenter && git pull && cd ..\necho '-----------------------jiaxin_web_devcenter-END-----------------------';\nfi\nif test $project -eq 4  ;then\necho '------------------------jiaxin_web_agent-START----------------------'\ncd jiaxin_web_agent && git pull && cd ..\necho '-----------------------jiaxin_web_agent-END-----------------------';\nfi\nif test $project -eq 5  ;then\necho '------------------------jiaxin_web_conf-START----------------------'\ncd jiaxin_web_conf && git pull && cd ..\necho '-----------------------jiaxin_web_conf-END-----------------------';\nfi\nif test $project -eq 6  ;then\necho '------------------------jiaxin_gw_statistics-START----------------------'\ncd jiaxin_gw_statistics && git pull && cd ..\necho '-----------------------jiaxin_gw_statistics-END-----------------------';\nfi\nif test $project -eq 7  ;then\necho '------------------------jiaxin_gw_config-START----------------------'\ncd jiaxin_gw_config && git pull && cd ..\necho '-----------------------jiaxin_gw_config-END-----------------------';\nfi\nif test $project -eq 8  ;then\necho '------------------------jiaxin_gw_container-START----------------------'\ncd jiaxin_gw_container && git checkout *.jar && git pull && cd ..\necho '-----------------------jiaxin_gw_container-END-----------------------';\nfi\nif test $project -eq 9  ;then\necho '------------------------jiaxin_gw_order-START----------------------'\ncd jiaxin_gw_order && git pull && cd ..\necho '-----------------------jiaxin_gw_order-END-----------------------';\nfi\n\n```\n\n##  git工程push\n\n``` bash\n#/bin/bash\necho '**********选择push的git项目**********'\necho '1.jiaxin_lib_core'\necho '2.jiaxin_lib_dubbox'\necho '3.jiaxin_web_devcenter'\necho '4.jiaxin_web_agent'\necho '5.jiaxin_web_conf'\necho '6.jiaxin_gw_statistics'\necho '7.jiaxin_gw_config'\necho '8.jiaxin_gw_order'\n\nread project\necho '请输入提交参数commit：'\nread commit\n               #在控制台输入1 2 3，它们之间用空格隔开。\nif test $project -eq 1 ;then   \necho '-----------------------jiaxin_lib_core-START-----------------------' \ncd jiaxin_lib_core && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '------------------------jiaxin_lib_core-END-----------------------';\nfi\nif test $project -eq 2  ;then\necho '------------------------jiaxin_lib_dubbox-START----------------------'\ncd jiaxin_lib_dubbox && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_lib_dubbox-END-----------------------';\nfi\nif test $project -eq 3  ;then\necho '------------------------jiaxin_web_devcenter-START----------------------'\ncd jiaxin_web_devcenter && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_devcenter-END-----------------------';\nfi\nif test $project -eq 4  ;then\necho '------------------------jiaxin_web_agent-START----------------------'\ncd jiaxin_web_agent && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_agent-END-----------------------';\nfi\nif test $project -eq 5  ;then\necho '------------------------jiaxin_web_conf-START----------------------'\ncd jiaxin_web_conf && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_conf-END-----------------------';\nfi\nif test $project -eq 6  ;then\necho '------------------------jiaxin_gw_statistics-START----------------------'\ncd jiaxin_gw_statistics && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_statistics-END-----------------------';\nfi\nif test $project -eq 7  ;then\necho '------------------------jiaxin_gw_config-START----------------------'\ncd jiaxin_gw_config && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_config-END-----------------------';\nfi\nif test $project -eq 8  ;then\necho '------------------------jiaxin_gw_order-START----------------------'\ncd jiaxin_gw_order && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_order-END-----------------------';\nfi  \n```   \n\n##  执行脚本  \n使用git客户端切换到git的根目录，执行脚本命令即可。\n```bash\n./update.sh\n```  \n或\n```bash\n./push.sh\n```  \n\n##  注意事项\n- 脚本放到git根目录，其实不放也可以的。你喜欢，[我的脚本位置](/img/git.png)\n- 根据个人需要修改相应git命令，以免造成代码混乱，容易产生冲突\n- 还有push的时候，也是需要按照个人需要修改的，因为git add的时候是全部的，最好区分一下\n- **相关代码已上传到github**          **[链接](https://github.com/wenthywang/pullAndpush)**","slug":"git工程批量更新和自动提交","published":1,"updated":"2016-09-22T09:44:33.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3l000opcfpb2ryg77k","content":"<h2 id=\"git工程批量更新\"><a href=\"#git工程批量更新\" class=\"headerlink\" title=\"git工程批量更新\"></a>git工程批量更新</h2><p>用gitbash客户端都有一种不爽，更新多个工程需要很多的fetch，rebase，stash等命令，所以无聊就看了下shell脚本，看能不能批量fetch，rebase，搞了下，还是可以的，不过我这个是直接pull，直接合并到当前工程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#/bin/bash</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'**********选择更新的git项目**********'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'0.all'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'1.jiaxin_lib_core'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'2.jiaxin_lib_dubbox'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'3.jiaxin_web_devcenter'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'4.jiaxin_web_agent'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'5.jiaxin_web_conf'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'6.jiaxin_gw_statistics'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'7.jiaxin_gw_config'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'8.jiaxin_gw_container'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'9.jiaxin_gw_order'</span></div><div class=\"line\"><span class=\"built_in\">read</span> project</div><div class=\"line\">               <span class=\"comment\">#在控制台输入1 2 3，它们之间用空格隔开。</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 0  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_container-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 1 ;<span class=\"keyword\">then</span>   </div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_core-START-----------------------'</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 2  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 3  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 4  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_agent-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 5  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_conf-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 6  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 7  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_config-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 8  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_container-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_container-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 9  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_order-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"git工程push\"><a href=\"#git工程push\" class=\"headerlink\" title=\"git工程push\"></a>git工程push</h2><pre><code class=\"bash\"><span class=\"comment\">#/bin/bash</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'**********选择push的git项目**********'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'1.jiaxin_lib_core'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'2.jiaxin_lib_dubbox'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'3.jiaxin_web_devcenter'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'4.jiaxin_web_agent'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'5.jiaxin_web_conf'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'6.jiaxin_gw_statistics'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'7.jiaxin_gw_config'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'8.jiaxin_gw_order'</span>\n\n<span class=\"built_in\">read</span> project\n<span class=\"built_in\">echo</span> <span class=\"string\">'请输入提交参数commit：'</span>\n<span class=\"built_in\">read</span> commit\n               <span class=\"comment\">#在控制台输入1 2 3，它们之间用空格隔开。</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 1 ;<span class=\"keyword\">then</span>   \n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_core-START-----------------------'</span> \n<span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 2  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 3  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 4  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_agent-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 5  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_conf-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 6  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 7  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_config-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 8  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_order-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n</code></pre>\n<h2 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h2><p>使用git客户端切换到git的根目录，执行脚本命令即可。</p>\n<pre><code class=\"bash\">./update.sh\n</code></pre>\n<p>或</p>\n<pre><code class=\"bash\">./push.sh\n</code></pre>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>脚本放到git根目录，其实不放也可以的。你喜欢，<a href=\"/img/git.png\">我的脚本位置</a></li>\n<li>根据个人需要修改相应git命令，以免造成代码混乱，容易产生冲突</li>\n<li>还有push的时候，也是需要按照个人需要修改的，因为git add的时候是全部的，最好区分一下</li>\n<li><strong>相关代码已上传到github</strong>          <strong><a href=\"https://github.com/wenthywang/pullAndpush\" target=\"_blank\" rel=\"external\">链接</a></strong></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"git工程批量更新\"><a href=\"#git工程批量更新\" class=\"headerlink\" title=\"git工程批量更新\"></a>git工程批量更新</h2><p>用gitbash客户端都有一种不爽，更新多个工程需要很多的fetch，rebase，stash等命令，所以无聊就看了下shell脚本，看能不能批量fetch，rebase，搞了下，还是可以的，不过我这个是直接pull，直接合并到当前工程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#/bin/bash</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'**********选择更新的git项目**********'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'0.all'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'1.jiaxin_lib_core'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'2.jiaxin_lib_dubbox'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'3.jiaxin_web_devcenter'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'4.jiaxin_web_agent'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'5.jiaxin_web_conf'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'6.jiaxin_gw_statistics'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'7.jiaxin_gw_config'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'8.jiaxin_gw_container'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'9.jiaxin_gw_order'</span></div><div class=\"line\"><span class=\"built_in\">read</span> project</div><div class=\"line\">               <span class=\"comment\">#在控制台输入1 2 3，它们之间用空格隔开。</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 0  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_container-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 1 ;<span class=\"keyword\">then</span>   </div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_core-START-----------------------'</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 2  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 3  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 4  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_agent-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 5  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_conf-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 6  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 7  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_config-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 8  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_container-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_container-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 9  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_order-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"git工程push\"><a href=\"#git工程push\" class=\"headerlink\" title=\"git工程push\"></a>git工程push</h2><pre><code class=\"bash\"><span class=\"comment\">#/bin/bash</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'**********选择push的git项目**********'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'1.jiaxin_lib_core'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'2.jiaxin_lib_dubbox'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'3.jiaxin_web_devcenter'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'4.jiaxin_web_agent'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'5.jiaxin_web_conf'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'6.jiaxin_gw_statistics'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'7.jiaxin_gw_config'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'8.jiaxin_gw_order'</span>\n\n<span class=\"built_in\">read</span> project\n<span class=\"built_in\">echo</span> <span class=\"string\">'请输入提交参数commit：'</span>\n<span class=\"built_in\">read</span> commit\n               <span class=\"comment\">#在控制台输入1 2 3，它们之间用空格隔开。</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 1 ;<span class=\"keyword\">then</span>   \n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_core-START-----------------------'</span> \n<span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 2  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 3  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 4  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_agent-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 5  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_conf-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 6  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 7  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_config-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 8  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_order-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n</code></pre>\n<h2 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h2><p>使用git客户端切换到git的根目录，执行脚本命令即可。</p>\n<pre><code class=\"bash\">./update.sh\n</code></pre>\n<p>或</p>\n<pre><code class=\"bash\">./push.sh\n</code></pre>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>脚本放到git根目录，其实不放也可以的。你喜欢，<a href=\"/img/git.png\">我的脚本位置</a></li>\n<li>根据个人需要修改相应git命令，以免造成代码混乱，容易产生冲突</li>\n<li>还有push的时候，也是需要按照个人需要修改的，因为git add的时候是全部的，最好区分一下</li>\n<li><strong>相关代码已上传到github</strong>          <strong><a href=\"https://github.com/wenthywang/pullAndpush\">链接</a></strong></li>\n</ul>\n"},{"title":"elasticsearch 笔记","date":"2016-11-17T17:07:41.000Z","_content":" ## 初学elasticsearch\nelasticsearch，简称ES。**[百度百科](http://baike.baidu.com/link?url=dbviqnoOFYZYYSxYswZubLVUk-7WFiuR9tLb-DOC0sv0pHRHEkfsSw0--EdarpYBLdaqrAPw9YPHYl0mQA6TxoIMUIj7i3NDVMtGCKsjxYG)**\n> ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。\n我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一> 个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。\n\n\n### elasticsearch 安装\n- 安装elasticsearch简单，容易。我使用的es是2.4.1版本的，[elasticsearch下载](https://www.elastic.co/downloads/elasticsearch)。另外Java也是必须的，最好是1.7以上的版本，我用的是1.7的java版本的。\n- 下载好之后，打开根目录下的bin目录下的elasticsearch.bat，如下：\n![打开bat](/img/es1.png)![打开bat](/img/es2.png)  \n其实就是本地开了服务，跟web工程差不多。\n\n- 打开之后，就可以本地玩耍了。es默认使用9200，9300端口的，详细配置可以参考官方文档，也可以自己参详参详。在浏览器上输入``` localhost：9200 ``` 可见配置信息，以及开启信息，如下图：\n![打开bat](/img/es3.png)\n\n### elasticsearch插件安装\n- es有两个插件，一个是head的插件，可以看到es的集群状态。一个是sql插件，可以用类似sql的语句查询数据。具体的安装可以百度或者google查找哦。\n\n### 强大的Elasticsearch-sql\n- Elasticsearch-sql是一个强大的插件，界面上可以用sql查询，代码上可以用sql执行sql语句，相对于es的原生态，我还是比较喜欢这种sql开发的，因为一开始我是使用原生态的查询聚合查询，写得也DT的。后来加了sql插件，开发效率都提高了不少，但是使用起来也是有一定的限制。\n- group by 后面的字段不能为空\n- 字段类型需要groupby的需要设置not_analyzed 保证这个字段不分析，当出现一些特殊字符的时候，不加的话es会默认使用分析，分词功能，就达不到要的效果，当时也是纠结了好久才发现的。\n- 创建es链接麻烦，每次查询需要创建链接，没有连接池，虽然后面用了druid连接，似乎会出问题。\n- es put连接创建一次就好了，后来就使用了类加载，一次连接即可，减少多次连接造成的消耗。\n\n### 总结\n    使用还是很方便的，特别是用sql。不过对于业务复杂的似乎不怎么样，另外同时使用redis做缓存是最好不过了。\n    查询效率是很高，后期维护也是需要挺高的成本的。总体来说实时性还是挺强的，苦逼的我现在还在加班...\n    之前写了一半，今天就写完它吧，也是写得很急，有什么要交流的可以留言。或者加微信详聊哦。","source":"_posts/elasticsearch笔记.md","raw":"---\ntitle: elasticsearch 笔记\ndate: 2016-11-18 01:07:41\ntags: \n- elasticsearch\n- 分布式\ncategories: \n- elasticsearch\n- 分布式\n---\n ## 初学elasticsearch\nelasticsearch，简称ES。**[百度百科](http://baike.baidu.com/link?url=dbviqnoOFYZYYSxYswZubLVUk-7WFiuR9tLb-DOC0sv0pHRHEkfsSw0--EdarpYBLdaqrAPw9YPHYl0mQA6TxoIMUIj7i3NDVMtGCKsjxYG)**\n> ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。\n我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一> 个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。\n\n\n### elasticsearch 安装\n- 安装elasticsearch简单，容易。我使用的es是2.4.1版本的，[elasticsearch下载](https://www.elastic.co/downloads/elasticsearch)。另外Java也是必须的，最好是1.7以上的版本，我用的是1.7的java版本的。\n- 下载好之后，打开根目录下的bin目录下的elasticsearch.bat，如下：\n![打开bat](/img/es1.png)![打开bat](/img/es2.png)  \n其实就是本地开了服务，跟web工程差不多。\n\n- 打开之后，就可以本地玩耍了。es默认使用9200，9300端口的，详细配置可以参考官方文档，也可以自己参详参详。在浏览器上输入``` localhost：9200 ``` 可见配置信息，以及开启信息，如下图：\n![打开bat](/img/es3.png)\n\n### elasticsearch插件安装\n- es有两个插件，一个是head的插件，可以看到es的集群状态。一个是sql插件，可以用类似sql的语句查询数据。具体的安装可以百度或者google查找哦。\n\n### 强大的Elasticsearch-sql\n- Elasticsearch-sql是一个强大的插件，界面上可以用sql查询，代码上可以用sql执行sql语句，相对于es的原生态，我还是比较喜欢这种sql开发的，因为一开始我是使用原生态的查询聚合查询，写得也DT的。后来加了sql插件，开发效率都提高了不少，但是使用起来也是有一定的限制。\n- group by 后面的字段不能为空\n- 字段类型需要groupby的需要设置not_analyzed 保证这个字段不分析，当出现一些特殊字符的时候，不加的话es会默认使用分析，分词功能，就达不到要的效果，当时也是纠结了好久才发现的。\n- 创建es链接麻烦，每次查询需要创建链接，没有连接池，虽然后面用了druid连接，似乎会出问题。\n- es put连接创建一次就好了，后来就使用了类加载，一次连接即可，减少多次连接造成的消耗。\n\n### 总结\n    使用还是很方便的，特别是用sql。不过对于业务复杂的似乎不怎么样，另外同时使用redis做缓存是最好不过了。\n    查询效率是很高，后期维护也是需要挺高的成本的。总体来说实时性还是挺强的，苦逼的我现在还在加班...\n    之前写了一半，今天就写完它吧，也是写得很急，有什么要交流的可以留言。或者加微信详聊哦。","slug":"elasticsearch笔记","published":1,"updated":"2016-11-17T17:09:17.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3o000spcfpvgge2i75","content":"<h2 id=\"初学elasticsearch\"><a href=\"#初学elasticsearch\" class=\"headerlink\" title=\"初学elasticsearch\"></a>初学elasticsearch</h2><p>elasticsearch，简称ES。<strong><a href=\"http://baike.baidu.com/link?url=dbviqnoOFYZYYSxYswZubLVUk-7WFiuR9tLb-DOC0sv0pHRHEkfsSw0--EdarpYBLdaqrAPw9YPHYl0mQA6TxoIMUIj7i3NDVMtGCKsjxYG\" target=\"_blank\" rel=\"external\">百度百科</a></strong></p>\n<blockquote>\n<p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。<br>我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一&gt; 个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。</p>\n</blockquote>\n<h3 id=\"elasticsearch-安装\"><a href=\"#elasticsearch-安装\" class=\"headerlink\" title=\"elasticsearch 安装\"></a>elasticsearch 安装</h3><ul>\n<li>安装elasticsearch简单，容易。我使用的es是2.4.1版本的，<a href=\"https://www.elastic.co/downloads/elasticsearch\" target=\"_blank\" rel=\"external\">elasticsearch下载</a>。另外Java也是必须的，最好是1.7以上的版本，我用的是1.7的java版本的。</li>\n<li><p>下载好之后，打开根目录下的bin目录下的elasticsearch.bat，如下：<br><img src=\"/img/es1.png\" alt=\"打开bat\"><img src=\"/img/es2.png\" alt=\"打开bat\"><br>其实就是本地开了服务，跟web工程差不多。</p>\n</li>\n<li><p>打开之后，就可以本地玩耍了。es默认使用9200，9300端口的，详细配置可以参考官方文档，也可以自己参详参详。在浏览器上输入<code>localhost：9200</code> 可见配置信息，以及开启信息，如下图：<br><img src=\"/img/es3.png\" alt=\"打开bat\"></p>\n</li>\n</ul>\n<h3 id=\"elasticsearch插件安装\"><a href=\"#elasticsearch插件安装\" class=\"headerlink\" title=\"elasticsearch插件安装\"></a>elasticsearch插件安装</h3><ul>\n<li>es有两个插件，一个是head的插件，可以看到es的集群状态。一个是sql插件，可以用类似sql的语句查询数据。具体的安装可以百度或者google查找哦。</li>\n</ul>\n<h3 id=\"强大的Elasticsearch-sql\"><a href=\"#强大的Elasticsearch-sql\" class=\"headerlink\" title=\"强大的Elasticsearch-sql\"></a>强大的Elasticsearch-sql</h3><ul>\n<li>Elasticsearch-sql是一个强大的插件，界面上可以用sql查询，代码上可以用sql执行sql语句，相对于es的原生态，我还是比较喜欢这种sql开发的，因为一开始我是使用原生态的查询聚合查询，写得也DT的。后来加了sql插件，开发效率都提高了不少，但是使用起来也是有一定的限制。</li>\n<li>group by 后面的字段不能为空</li>\n<li>字段类型需要groupby的需要设置not_analyzed 保证这个字段不分析，当出现一些特殊字符的时候，不加的话es会默认使用分析，分词功能，就达不到要的效果，当时也是纠结了好久才发现的。</li>\n<li>创建es链接麻烦，每次查询需要创建链接，没有连接池，虽然后面用了druid连接，似乎会出问题。</li>\n<li>es put连接创建一次就好了，后来就使用了类加载，一次连接即可，减少多次连接造成的消耗。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><pre><code>使用还是很方便的，特别是用sql。不过对于业务复杂的似乎不怎么样，另外同时使用redis做缓存是最好不过了。\n查询效率是很高，后期维护也是需要挺高的成本的。总体来说实时性还是挺强的，苦逼的我现在还在加班...\n之前写了一半，今天就写完它吧，也是写得很急，有什么要交流的可以留言。或者加微信详聊哦。\n</code></pre>","excerpt":"","more":"<h2 id=\"初学elasticsearch\"><a href=\"#初学elasticsearch\" class=\"headerlink\" title=\"初学elasticsearch\"></a>初学elasticsearch</h2><p>elasticsearch，简称ES。<strong><a href=\"http://baike.baidu.com/link?url=dbviqnoOFYZYYSxYswZubLVUk-7WFiuR9tLb-DOC0sv0pHRHEkfsSw0--EdarpYBLdaqrAPw9YPHYl0mQA6TxoIMUIj7i3NDVMtGCKsjxYG\">百度百科</a></strong></p>\n<blockquote>\n<p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。<br>我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一&gt; 个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。</p>\n</blockquote>\n<h3 id=\"elasticsearch-安装\"><a href=\"#elasticsearch-安装\" class=\"headerlink\" title=\"elasticsearch 安装\"></a>elasticsearch 安装</h3><ul>\n<li>安装elasticsearch简单，容易。我使用的es是2.4.1版本的，<a href=\"https://www.elastic.co/downloads/elasticsearch\">elasticsearch下载</a>。另外Java也是必须的，最好是1.7以上的版本，我用的是1.7的java版本的。</li>\n<li><p>下载好之后，打开根目录下的bin目录下的elasticsearch.bat，如下：<br><img src=\"/img/es1.png\" alt=\"打开bat\"><img src=\"/img/es2.png\" alt=\"打开bat\"><br>其实就是本地开了服务，跟web工程差不多。</p>\n</li>\n<li><p>打开之后，就可以本地玩耍了。es默认使用9200，9300端口的，详细配置可以参考官方文档，也可以自己参详参详。在浏览器上输入<code>localhost：9200</code> 可见配置信息，以及开启信息，如下图：<br><img src=\"/img/es3.png\" alt=\"打开bat\"></p>\n</li>\n</ul>\n<h3 id=\"elasticsearch插件安装\"><a href=\"#elasticsearch插件安装\" class=\"headerlink\" title=\"elasticsearch插件安装\"></a>elasticsearch插件安装</h3><ul>\n<li>es有两个插件，一个是head的插件，可以看到es的集群状态。一个是sql插件，可以用类似sql的语句查询数据。具体的安装可以百度或者google查找哦。</li>\n</ul>\n<h3 id=\"强大的Elasticsearch-sql\"><a href=\"#强大的Elasticsearch-sql\" class=\"headerlink\" title=\"强大的Elasticsearch-sql\"></a>强大的Elasticsearch-sql</h3><ul>\n<li>Elasticsearch-sql是一个强大的插件，界面上可以用sql查询，代码上可以用sql执行sql语句，相对于es的原生态，我还是比较喜欢这种sql开发的，因为一开始我是使用原生态的查询聚合查询，写得也DT的。后来加了sql插件，开发效率都提高了不少，但是使用起来也是有一定的限制。</li>\n<li>group by 后面的字段不能为空</li>\n<li>字段类型需要groupby的需要设置not_analyzed 保证这个字段不分析，当出现一些特殊字符的时候，不加的话es会默认使用分析，分词功能，就达不到要的效果，当时也是纠结了好久才发现的。</li>\n<li>创建es链接麻烦，每次查询需要创建链接，没有连接池，虽然后面用了druid连接，似乎会出问题。</li>\n<li>es put连接创建一次就好了，后来就使用了类加载，一次连接即可，减少多次连接造成的消耗。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><pre><code>使用还是很方便的，特别是用sql。不过对于业务复杂的似乎不怎么样，另外同时使用redis做缓存是最好不过了。\n查询效率是很高，后期维护也是需要挺高的成本的。总体来说实时性还是挺强的，苦逼的我现在还在加班...\n之前写了一半，今天就写完它吧，也是写得很急，有什么要交流的可以留言。或者加微信详聊哦。\n</code></pre>"},{"title":"spring aop 初体验","date":"2017-06-28T02:53:41.000Z","_content":"\n ## AOP\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n ## AOP核心概念\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（introduction）\n\n在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\nSpring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了\n\n2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB\n\nAOP的实现也不是难事，配置下文件（可用注解），可分3步。\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。\n\n\neg:aop.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd\">\n            \n</beans>\n```\n\n## 基于Spring的AOP简单实现\n需要额外下载以下两个jar\n\n1、aopalliance.jar\n\n2、aspectjweaver.jar\n\nxml实现方式，注解方式就不多说了。\n- 声明接口\n```\npublic interface HelloWorld\n{\n    void printHelloWorld();\n    void doPrint();\n}\n```\n- 添加接口实现\n```\npublic class HelloWorldImpl implements HelloWorld\n{\n    public void printHelloWorld()\n    {\n        System.out.println(\"Enter HelloWorldImpl.printHelloWorld()\");\n    }\n    \n    public void doPrint()\n    {\n        System.out.println(\"Enter HelloWorldImpl.doPrint()\");\n        return ;\n    }\n}\n```\n- 横切关注点，这里是打印时间：\n```\npublic class TimeHandler\n{\n    public void printTime()\n    {\n        System.out.println(\"CurrentTime = \" + System.currentTimeMillis());\n    }\n}\n```\n\n-aop.xml配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd\">\n        \n        <bean id=\"helloWorldImpl\" class=\"com.xrq.aop.HelloWorldImpl\" />\n     \n        <bean id=\"timeHandler\" class=\"com.xrq.aop.TimeHandler\" />\n        \n        <aop:config>\n            <aop:aspect id=\"time\" ref=\"timeHandler\">\n                <aop:pointcut id=\"addAllMethod\" expression=\"execution(* com.xrq.aop.HelloWorld.*(..))\" />\n                <aop:before method=\"printTime\" pointcut-ref=\"addAllMethod\" />\n                <aop:after method=\"printTime\" pointcut-ref=\"addAllMethod\" />\n            </aop:aspect>\n        </aop:config>\n</beans>\n```\n\n- main 方法\n```\npublic static void main(String[] args)\n{\n    ApplicationContext ctx = \n            new ClassPathXmlApplicationContext(\"aop.xml\");\n        \n    HelloWorld hw1 = (HelloWorld)ctx.getBean(\"helloWorldImpl\");\n   \n    hw1.printHelloWorld();\n    System.out.println();\n    hw1.doPrint();\n \n}\n```\n- 结果\n```\nCurrentTime = 1446129611993\nEnter HelloWorldImpl.printHelloWorld()\nCurrentTime = 1446129611993\n\nCurrentTime = 1446129611994\nEnter HelloWorldImpl.doPrint()\nCurrentTime = 1446129611994\n```\n\n- 总结\n   很不好意思地从度娘那拷过来的，暂时对aop的理解还没有这么深刻，但是使用过之后已经有了进一步的了解，然后再通过这篇博文发现对aop更加了解。以后对于一些能用aop方式解决的问题，还是用aop。\n   总得来讲，现在公司的所有模块都几乎没有用aop，这是有很大的优化空间啊，因为看到一堆重复的代码，真叫人费解。","source":"_posts/springAOP.md","raw":"---\ntitle: spring aop 初体验\ndate: 2017-06-28 10:53:41\ntags: \n- spring\n- aop\ncategories: \n- spring\n---\n\n ## AOP\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n ## AOP核心概念\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（introduction）\n\n在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\nSpring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了\n\n2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB\n\nAOP的实现也不是难事，配置下文件（可用注解），可分3步。\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。\n\n\neg:aop.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd\">\n            \n</beans>\n```\n\n## 基于Spring的AOP简单实现\n需要额外下载以下两个jar\n\n1、aopalliance.jar\n\n2、aspectjweaver.jar\n\nxml实现方式，注解方式就不多说了。\n- 声明接口\n```\npublic interface HelloWorld\n{\n    void printHelloWorld();\n    void doPrint();\n}\n```\n- 添加接口实现\n```\npublic class HelloWorldImpl implements HelloWorld\n{\n    public void printHelloWorld()\n    {\n        System.out.println(\"Enter HelloWorldImpl.printHelloWorld()\");\n    }\n    \n    public void doPrint()\n    {\n        System.out.println(\"Enter HelloWorldImpl.doPrint()\");\n        return ;\n    }\n}\n```\n- 横切关注点，这里是打印时间：\n```\npublic class TimeHandler\n{\n    public void printTime()\n    {\n        System.out.println(\"CurrentTime = \" + System.currentTimeMillis());\n    }\n}\n```\n\n-aop.xml配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd\">\n        \n        <bean id=\"helloWorldImpl\" class=\"com.xrq.aop.HelloWorldImpl\" />\n     \n        <bean id=\"timeHandler\" class=\"com.xrq.aop.TimeHandler\" />\n        \n        <aop:config>\n            <aop:aspect id=\"time\" ref=\"timeHandler\">\n                <aop:pointcut id=\"addAllMethod\" expression=\"execution(* com.xrq.aop.HelloWorld.*(..))\" />\n                <aop:before method=\"printTime\" pointcut-ref=\"addAllMethod\" />\n                <aop:after method=\"printTime\" pointcut-ref=\"addAllMethod\" />\n            </aop:aspect>\n        </aop:config>\n</beans>\n```\n\n- main 方法\n```\npublic static void main(String[] args)\n{\n    ApplicationContext ctx = \n            new ClassPathXmlApplicationContext(\"aop.xml\");\n        \n    HelloWorld hw1 = (HelloWorld)ctx.getBean(\"helloWorldImpl\");\n   \n    hw1.printHelloWorld();\n    System.out.println();\n    hw1.doPrint();\n \n}\n```\n- 结果\n```\nCurrentTime = 1446129611993\nEnter HelloWorldImpl.printHelloWorld()\nCurrentTime = 1446129611993\n\nCurrentTime = 1446129611994\nEnter HelloWorldImpl.doPrint()\nCurrentTime = 1446129611994\n```\n\n- 总结\n   很不好意思地从度娘那拷过来的，暂时对aop的理解还没有这么深刻，但是使用过之后已经有了进一步的了解，然后再通过这篇博文发现对aop更加了解。以后对于一些能用aop方式解决的问题，还是用aop。\n   总得来讲，现在公司的所有模块都几乎没有用aop，这是有很大的优化空间啊，因为看到一堆重复的代码，真叫人费解。","slug":"springAOP","published":1,"updated":"2017-07-06T12:50:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3s000tpcfpdey6gb2i","content":"<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（introduction）</p>\n<p>在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了</p>\n<p>2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB</p>\n<p>AOP的实现也不是难事，配置下文件（可用注解），可分3步。</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。</p>\n<p>eg:aop.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop</div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class=\"line\">            </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"基于Spring的AOP简单实现\"><a href=\"#基于Spring的AOP简单实现\" class=\"headerlink\" title=\"基于Spring的AOP简单实现\"></a>基于Spring的AOP简单实现</h2><p>需要额外下载以下两个jar</p>\n<p>1、aopalliance.jar</p>\n<p>2、aspectjweaver.jar</p>\n<p>xml实现方式，注解方式就不多说了。</p>\n<ul>\n<li><p>声明接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface HelloWorld</div><div class=\"line\">&#123;</div><div class=\"line\">    void printHelloWorld();</div><div class=\"line\">    void doPrint();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加接口实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class HelloWorldImpl implements HelloWorld</div><div class=\"line\">&#123;</div><div class=\"line\">    public void printHelloWorld()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;Enter HelloWorldImpl.printHelloWorld()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public void doPrint()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;Enter HelloWorldImpl.doPrint()&quot;);</div><div class=\"line\">        return ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>横切关注点，这里是打印时间：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TimeHandler</div><div class=\"line\">&#123;</div><div class=\"line\">    public void printTime()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;CurrentTime = &quot; + System.currentTimeMillis());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-aop.xml配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop</div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;bean id=&quot;helloWorldImpl&quot; class=&quot;com.xrq.aop.HelloWorldImpl&quot; /&gt;</div><div class=\"line\">     </div><div class=\"line\">        &lt;bean id=&quot;timeHandler&quot; class=&quot;com.xrq.aop.TimeHandler&quot; /&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;aop:config&gt;</div><div class=\"line\">            &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot;&gt;</div><div class=\"line\">                &lt;aop:pointcut id=&quot;addAllMethod&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.*(..))&quot; /&gt;</div><div class=\"line\">                &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class=\"line\">                &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class=\"line\">            &lt;/aop:aspect&gt;</div><div class=\"line\">        &lt;/aop:config&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>main 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String[] args)</div><div class=\"line\">&#123;</div><div class=\"line\">    ApplicationContext ctx = </div><div class=\"line\">            new ClassPathXmlApplicationContext(&quot;aop.xml&quot;);</div><div class=\"line\">        </div><div class=\"line\">    HelloWorld hw1 = (HelloWorld)ctx.getBean(&quot;helloWorldImpl&quot;);</div><div class=\"line\">   </div><div class=\"line\">    hw1.printHelloWorld();</div><div class=\"line\">    System.out.println();</div><div class=\"line\">    hw1.doPrint();</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">CurrentTime = 1446129611993</div><div class=\"line\">Enter HelloWorldImpl.printHelloWorld()</div><div class=\"line\">CurrentTime = 1446129611993</div><div class=\"line\"></div><div class=\"line\">CurrentTime = 1446129611994</div><div class=\"line\">Enter HelloWorldImpl.doPrint()</div><div class=\"line\">CurrentTime = 1446129611994</div></pre></td></tr></table></figure>\n</li>\n<li><p>总结<br> 很不好意思地从度娘那拷过来的，暂时对aop的理解还没有这么深刻，但是使用过之后已经有了进一步的了解，然后再通过这篇博文发现对aop更加了解。以后对于一些能用aop方式解决的问题，还是用aop。<br> 总得来讲，现在公司的所有模块都几乎没有用aop，这是有很大的优化空间啊，因为看到一堆重复的代码，真叫人费解。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（introduction）</p>\n<p>在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了</p>\n<p>2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB</p>\n<p>AOP的实现也不是难事，配置下文件（可用注解），可分3步。</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。</p>\n<p>eg:aop.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop</div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class=\"line\">            </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"基于Spring的AOP简单实现\"><a href=\"#基于Spring的AOP简单实现\" class=\"headerlink\" title=\"基于Spring的AOP简单实现\"></a>基于Spring的AOP简单实现</h2><p>需要额外下载以下两个jar</p>\n<p>1、aopalliance.jar</p>\n<p>2、aspectjweaver.jar</p>\n<p>xml实现方式，注解方式就不多说了。</p>\n<ul>\n<li><p>声明接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface HelloWorld</div><div class=\"line\">&#123;</div><div class=\"line\">    void printHelloWorld();</div><div class=\"line\">    void doPrint();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加接口实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class HelloWorldImpl implements HelloWorld</div><div class=\"line\">&#123;</div><div class=\"line\">    public void printHelloWorld()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;Enter HelloWorldImpl.printHelloWorld()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public void doPrint()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;Enter HelloWorldImpl.doPrint()&quot;);</div><div class=\"line\">        return ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>横切关注点，这里是打印时间：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TimeHandler</div><div class=\"line\">&#123;</div><div class=\"line\">    public void printTime()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;CurrentTime = &quot; + System.currentTimeMillis());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-aop.xml配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop</div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;bean id=&quot;helloWorldImpl&quot; class=&quot;com.xrq.aop.HelloWorldImpl&quot; /&gt;</div><div class=\"line\">     </div><div class=\"line\">        &lt;bean id=&quot;timeHandler&quot; class=&quot;com.xrq.aop.TimeHandler&quot; /&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;aop:config&gt;</div><div class=\"line\">            &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot;&gt;</div><div class=\"line\">                &lt;aop:pointcut id=&quot;addAllMethod&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.*(..))&quot; /&gt;</div><div class=\"line\">                &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class=\"line\">                &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class=\"line\">            &lt;/aop:aspect&gt;</div><div class=\"line\">        &lt;/aop:config&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>main 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String[] args)</div><div class=\"line\">&#123;</div><div class=\"line\">    ApplicationContext ctx = </div><div class=\"line\">            new ClassPathXmlApplicationContext(&quot;aop.xml&quot;);</div><div class=\"line\">        </div><div class=\"line\">    HelloWorld hw1 = (HelloWorld)ctx.getBean(&quot;helloWorldImpl&quot;);</div><div class=\"line\">   </div><div class=\"line\">    hw1.printHelloWorld();</div><div class=\"line\">    System.out.println();</div><div class=\"line\">    hw1.doPrint();</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">CurrentTime = 1446129611993</div><div class=\"line\">Enter HelloWorldImpl.printHelloWorld()</div><div class=\"line\">CurrentTime = 1446129611993</div><div class=\"line\"></div><div class=\"line\">CurrentTime = 1446129611994</div><div class=\"line\">Enter HelloWorldImpl.doPrint()</div><div class=\"line\">CurrentTime = 1446129611994</div></pre></td></tr></table></figure>\n</li>\n<li><p>总结<br> 很不好意思地从度娘那拷过来的，暂时对aop的理解还没有这么深刻，但是使用过之后已经有了进一步的了解，然后再通过这篇博文发现对aop更加了解。以后对于一些能用aop方式解决的问题，还是用aop。<br> 总得来讲，现在公司的所有模块都几乎没有用aop，这是有很大的优化空间啊，因为看到一堆重复的代码，真叫人费解。</p>\n</li>\n</ul>\n"},{"title":"maven mirror修改 国内镜像","date":"2016-11-02T12:18:41.000Z","_content":" ## 修改setting.xml\n setting.xml是工程所用的maven的setting.xml,可存在maven安装目录的conf下，或者在.m2下面。\n修改 .m2 文件夹中的setting.xml 中的 <mirrors>元素。添加<mirror>子元素如下：\n```\n<mirrors>  \n    <id>alimaven</id>  \n    <name>aliyun maven</name>  \n    <url>http://maven.aliyun.com/nexus/content/groups/public/</url>  \n    <mirrorOf>central</mirrorOf>          \n  </mirror>  \n</mirrors>\n```\n阿里云的镜像，亲测很快。以后都用它了。","source":"_posts/maven mirror修改 国内镜像.md","raw":"---\ntitle: maven mirror修改 国内镜像\ndate: 2016-11-02 20:18:41\ntags: \n- maven\n- eclipse\ncategories: \n- 笔记\n---\n ## 修改setting.xml\n setting.xml是工程所用的maven的setting.xml,可存在maven安装目录的conf下，或者在.m2下面。\n修改 .m2 文件夹中的setting.xml 中的 <mirrors>元素。添加<mirror>子元素如下：\n```\n<mirrors>  \n    <id>alimaven</id>  \n    <name>aliyun maven</name>  \n    <url>http://maven.aliyun.com/nexus/content/groups/public/</url>  \n    <mirrorOf>central</mirrorOf>          \n  </mirror>  \n</mirrors>\n```\n阿里云的镜像，亲测很快。以后都用它了。","slug":"maven mirror修改 国内镜像","published":1,"updated":"2016-11-02T12:07:14.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3u000vpcfpp1nccn3t","content":"<h2 id=\"修改setting-xml\"><a href=\"#修改setting-xml\" class=\"headerlink\" title=\"修改setting.xml\"></a>修改setting.xml</h2><p> setting.xml是工程所用的maven的setting.xml,可存在maven安装目录的conf下，或者在.m2下面。<br>修改 .m2 文件夹中的setting.xml 中的 <mirrors>元素。添加<mirror>子元素如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;mirrors&gt;  </div><div class=\"line\">    &lt;id&gt;alimaven&lt;/id&gt;  </div><div class=\"line\">    &lt;name&gt;aliyun maven&lt;/name&gt;  </div><div class=\"line\">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  </div><div class=\"line\">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;          </div><div class=\"line\">  &lt;/mirror&gt;  </div><div class=\"line\">&lt;/mirrors&gt;</div></pre></td></tr></table></figure></mirror></mirrors></p>\n<p>阿里云的镜像，亲测很快。以后都用它了。</p>\n","excerpt":"","more":"<h2 id=\"修改setting-xml\"><a href=\"#修改setting-xml\" class=\"headerlink\" title=\"修改setting.xml\"></a>修改setting.xml</h2><p> setting.xml是工程所用的maven的setting.xml,可存在maven安装目录的conf下，或者在.m2下面。<br>修改 .m2 文件夹中的setting.xml 中的 <mirrors>元素。添加<mirror>子元素如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;mirrors&gt;  </div><div class=\"line\">    &lt;id&gt;alimaven&lt;/id&gt;  </div><div class=\"line\">    &lt;name&gt;aliyun maven&lt;/name&gt;  </div><div class=\"line\">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  </div><div class=\"line\">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;          </div><div class=\"line\">  &lt;/mirror&gt;  </div><div class=\"line\">&lt;/mirrors&gt;</div></pre></td></tr></table></figure></p>\n<p>阿里云的镜像，亲测很快。以后都用它了。</p>\n"},{"title":"next部署git页面资源加载404","date":"2016-11-18T07:44:41.000Z","_content":" ## 资源404\n - 引用一下其他博主的话，这位博主不要生气哦，资源共享嘛\n ** 最近github page更新了，GitHub Pages 过滤掉了 source/vendors 目录的访问，所以next主题下的source下的vendors目录不能够被访问到，所以就出现了本地hexo s能够正常访问，但是deploy到github就是一片空白，按f12，可以看到大量来自source/vendors的css和js提示404 \n **\n\n![404](/img/404.png)  \n\n\n- 这两天推送git的时候发现，推送hexo成功，但是在github上面打开就报了一堆404找不到资源的情况。所有的配置都已经配置好的，跟以前没有什么区别，然后自己再反复找下是不是hexo的问题，然后就重新装了hexo。发现问题还是存在，于是就度娘了一下，原来最近真的有这样情况，然后next的博主也在git上面解决了这个bug，详情请看[资源加载失败](https://github.com/iissnan/hexo-theme-next/issues/1214 \"issues\")，原来是有个jekyll的东西改了，导致不能加载这些资源。\n\n- 看到比较快的解决方法，亲测成功，因为我把博主的master的git删掉了，我在想当初我怎么这么手贱啊。同时我也改了挺多博主的东西，免得冲突了。听说博主更新了很多东西，最近实在是太忙了，没有去研究博主的新东西。我还是很喜欢next 这个主题的。更好的方法应该是直接更新博主的next master了。\n\n### 解决方法\n- 参考: issue: #1220\n- 步骤:\n```\n.deploy_git 目录, 添加 .nojekyll 空文件\nsource目录, 添加.nojekyll 空文件\n修改 Hexo 上层_config.yml配置文件, 添加\ninclude:\n  - .nojekyll\n重新部署推送: hexo d -g\n```\n\n## 同时出现的问题\n- 添加以上内容的时候，还发现win10直接添加.xx的文件是不行。后来想到绝招，使用git bash 添加文件，真是无所不能。git base的命令跟linux的命令几乎一样，所以一下就建好了。新建文件命令\n```\ntouch .nojekyll\n```\n- 这个bug 就解决到这了。嘻嘻","source":"_posts/next部署git页面资源加载404.md","raw":"---\ntitle: next部署git页面资源加载404\ndate: 2016-11-18 15:44:41\ntags: \n- hexo\ncategories: \n- 笔记\n- bug\n---\n ## 资源404\n - 引用一下其他博主的话，这位博主不要生气哦，资源共享嘛\n ** 最近github page更新了，GitHub Pages 过滤掉了 source/vendors 目录的访问，所以next主题下的source下的vendors目录不能够被访问到，所以就出现了本地hexo s能够正常访问，但是deploy到github就是一片空白，按f12，可以看到大量来自source/vendors的css和js提示404 \n **\n\n![404](/img/404.png)  \n\n\n- 这两天推送git的时候发现，推送hexo成功，但是在github上面打开就报了一堆404找不到资源的情况。所有的配置都已经配置好的，跟以前没有什么区别，然后自己再反复找下是不是hexo的问题，然后就重新装了hexo。发现问题还是存在，于是就度娘了一下，原来最近真的有这样情况，然后next的博主也在git上面解决了这个bug，详情请看[资源加载失败](https://github.com/iissnan/hexo-theme-next/issues/1214 \"issues\")，原来是有个jekyll的东西改了，导致不能加载这些资源。\n\n- 看到比较快的解决方法，亲测成功，因为我把博主的master的git删掉了，我在想当初我怎么这么手贱啊。同时我也改了挺多博主的东西，免得冲突了。听说博主更新了很多东西，最近实在是太忙了，没有去研究博主的新东西。我还是很喜欢next 这个主题的。更好的方法应该是直接更新博主的next master了。\n\n### 解决方法\n- 参考: issue: #1220\n- 步骤:\n```\n.deploy_git 目录, 添加 .nojekyll 空文件\nsource目录, 添加.nojekyll 空文件\n修改 Hexo 上层_config.yml配置文件, 添加\ninclude:\n  - .nojekyll\n重新部署推送: hexo d -g\n```\n\n## 同时出现的问题\n- 添加以上内容的时候，还发现win10直接添加.xx的文件是不行。后来想到绝招，使用git bash 添加文件，真是无所不能。git base的命令跟linux的命令几乎一样，所以一下就建好了。新建文件命令\n```\ntouch .nojekyll\n```\n- 这个bug 就解决到这了。嘻嘻","slug":"next部署git页面资源加载404","published":1,"updated":"2016-11-18T08:14:58.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3u000xpcfpr297g7rc","content":"<h2 id=\"资源404\"><a href=\"#资源404\" class=\"headerlink\" title=\"资源404\"></a>资源404</h2><ul>\n<li>引用一下其他博主的话，这位博主不要生气哦，资源共享嘛<br><strong> 最近github page更新了，GitHub Pages 过滤掉了 source/vendors 目录的访问，所以next主题下的source下的vendors目录不能够被访问到，所以就出现了本地hexo s能够正常访问，但是deploy到github就是一片空白，按f12，可以看到大量来自source/vendors的css和js提示404 \n</strong></li>\n</ul>\n<p><img src=\"/img/404.png\" alt=\"404\">  </p>\n<ul>\n<li><p>这两天推送git的时候发现，推送hexo成功，但是在github上面打开就报了一堆404找不到资源的情况。所有的配置都已经配置好的，跟以前没有什么区别，然后自己再反复找下是不是hexo的问题，然后就重新装了hexo。发现问题还是存在，于是就度娘了一下，原来最近真的有这样情况，然后next的博主也在git上面解决了这个bug，详情请看<a href=\"https://github.com/iissnan/hexo-theme-next/issues/1214\" title=\"issues\" target=\"_blank\" rel=\"external\">资源加载失败</a>，原来是有个jekyll的东西改了，导致不能加载这些资源。</p>\n</li>\n<li><p>看到比较快的解决方法，亲测成功，因为我把博主的master的git删掉了，我在想当初我怎么这么手贱啊。同时我也改了挺多博主的东西，免得冲突了。听说博主更新了很多东西，最近实在是太忙了，没有去研究博主的新东西。我还是很喜欢next 这个主题的。更好的方法应该是直接更新博主的next master了。</p>\n</li>\n</ul>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li>参考: issue: #1220</li>\n<li>步骤:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.deploy_git 目录, 添加 .nojekyll 空文件</div><div class=\"line\">source目录, 添加.nojekyll 空文件</div><div class=\"line\">修改 Hexo 上层_config.yml配置文件, 添加</div><div class=\"line\">include:</div><div class=\"line\">  - .nojekyll</div><div class=\"line\">重新部署推送: hexo d -g</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"同时出现的问题\"><a href=\"#同时出现的问题\" class=\"headerlink\" title=\"同时出现的问题\"></a>同时出现的问题</h2><ul>\n<li><p>添加以上内容的时候，还发现win10直接添加.xx的文件是不行。后来想到绝招，使用git bash 添加文件，真是无所不能。git base的命令跟linux的命令几乎一样，所以一下就建好了。新建文件命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch .nojekyll</div></pre></td></tr></table></figure>\n</li>\n<li><p>这个bug 就解决到这了。嘻嘻</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"资源404\"><a href=\"#资源404\" class=\"headerlink\" title=\"资源404\"></a>资源404</h2><ul>\n<li>引用一下其他博主的话，这位博主不要生气哦，资源共享嘛<br><strong> 最近github page更新了，GitHub Pages 过滤掉了 source/vendors 目录的访问，所以next主题下的source下的vendors目录不能够被访问到，所以就出现了本地hexo s能够正常访问，但是deploy到github就是一片空白，按f12，可以看到大量来自source/vendors的css和js提示404 \n</strong></li>\n</ul>\n<p><img src=\"/img/404.png\" alt=\"404\">  </p>\n<ul>\n<li><p>这两天推送git的时候发现，推送hexo成功，但是在github上面打开就报了一堆404找不到资源的情况。所有的配置都已经配置好的，跟以前没有什么区别，然后自己再反复找下是不是hexo的问题，然后就重新装了hexo。发现问题还是存在，于是就度娘了一下，原来最近真的有这样情况，然后next的博主也在git上面解决了这个bug，详情请看<a href=\"https://github.com/iissnan/hexo-theme-next/issues/1214\" title=\"issues\">资源加载失败</a>，原来是有个jekyll的东西改了，导致不能加载这些资源。</p>\n</li>\n<li><p>看到比较快的解决方法，亲测成功，因为我把博主的master的git删掉了，我在想当初我怎么这么手贱啊。同时我也改了挺多博主的东西，免得冲突了。听说博主更新了很多东西，最近实在是太忙了，没有去研究博主的新东西。我还是很喜欢next 这个主题的。更好的方法应该是直接更新博主的next master了。</p>\n</li>\n</ul>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li>参考: issue: #1220</li>\n<li>步骤:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.deploy_git 目录, 添加 .nojekyll 空文件</div><div class=\"line\">source目录, 添加.nojekyll 空文件</div><div class=\"line\">修改 Hexo 上层_config.yml配置文件, 添加</div><div class=\"line\">include:</div><div class=\"line\">  - .nojekyll</div><div class=\"line\">重新部署推送: hexo d -g</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"同时出现的问题\"><a href=\"#同时出现的问题\" class=\"headerlink\" title=\"同时出现的问题\"></a>同时出现的问题</h2><ul>\n<li><p>添加以上内容的时候，还发现win10直接添加.xx的文件是不行。后来想到绝招，使用git bash 添加文件，真是无所不能。git base的命令跟linux的命令几乎一样，所以一下就建好了。新建文件命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch .nojekyll</div></pre></td></tr></table></figure>\n</li>\n<li><p>这个bug 就解决到这了。嘻嘻</p>\n</li>\n</ul>\n"},{"title":"在线预览office小结","date":"2017-10-27T02:11:41.000Z","_content":"\n ## 各处搜寻最佳方案\n   项目中需要在线预览office文档的功能，因此在网络上搜寻大量资料。最终得到以下结论\n  -  使用开源openoffice 需要搭建openoffice服务 解析office文档转成pdf 然后通过控制器响应pdf的格式输出文档        再显示到页面\n      缺点是 ：效果不好 不推荐使用（简单的office文档或许还行）  \n\n  - 使用第三方在线预览API 这个需要付费 推荐qq邮箱使用的永中第三方\n    官网地址：http://dcs.yozosoft.com/  \n    注册账号可使用免费试用次数 效果还是很满意的 并且似乎支持所有格式的文档 txt...\n\n\n  -  使用微软提供url来解析office文档 \n  预览地址：https://products.office.com/zh-CN/office-online/view-office-documents-online  \n  这种方式是最省钱 省时间 缺点是有大小限制 以及文档类型（只支持office文档word，excel，ppt）官网有写  还有 解析效果不能自定义 但是效果还是蛮不错的\n \n  - 总的来说，如果不缺钱就选用第二种，可联系第三方是否可自定义什么的，如果没钱，可选用第三种（前提是部署应用的服务器可外网访问），第一种是备选状态。\n  以上仅个人理解。","source":"_posts/在线预览office小结.md","raw":"---\ntitle: 在线预览office小结\ndate: 2017-10-27 10:11:41\ntags: \n- 在线预览\n- office\ncategories: \n- Java\n---\n\n ## 各处搜寻最佳方案\n   项目中需要在线预览office文档的功能，因此在网络上搜寻大量资料。最终得到以下结论\n  -  使用开源openoffice 需要搭建openoffice服务 解析office文档转成pdf 然后通过控制器响应pdf的格式输出文档        再显示到页面\n      缺点是 ：效果不好 不推荐使用（简单的office文档或许还行）  \n\n  - 使用第三方在线预览API 这个需要付费 推荐qq邮箱使用的永中第三方\n    官网地址：http://dcs.yozosoft.com/  \n    注册账号可使用免费试用次数 效果还是很满意的 并且似乎支持所有格式的文档 txt...\n\n\n  -  使用微软提供url来解析office文档 \n  预览地址：https://products.office.com/zh-CN/office-online/view-office-documents-online  \n  这种方式是最省钱 省时间 缺点是有大小限制 以及文档类型（只支持office文档word，excel，ppt）官网有写  还有 解析效果不能自定义 但是效果还是蛮不错的\n \n  - 总的来说，如果不缺钱就选用第二种，可联系第三方是否可自定义什么的，如果没钱，可选用第三种（前提是部署应用的服务器可外网访问），第一种是备选状态。\n  以上仅个人理解。","slug":"在线预览office小结","published":1,"updated":"2017-11-23T08:52:56.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3w000zpcfpepq83jfl","content":"<h2 id=\"各处搜寻最佳方案\"><a href=\"#各处搜寻最佳方案\" class=\"headerlink\" title=\"各处搜寻最佳方案\"></a>各处搜寻最佳方案</h2><p>   项目中需要在线预览office文档的功能，因此在网络上搜寻大量资料。最终得到以下结论</p>\n<ul>\n<li><p>使用开源openoffice 需要搭建openoffice服务 解析office文档转成pdf 然后通过控制器响应pdf的格式输出文档        再显示到页面<br> 缺点是 ：效果不好 不推荐使用（简单的office文档或许还行）  </p>\n</li>\n<li><p>使用第三方在线预览API 这个需要付费 推荐qq邮箱使用的永中第三方<br>官网地址：<a href=\"http://dcs.yozosoft.com/\" target=\"_blank\" rel=\"external\">http://dcs.yozosoft.com/</a><br>注册账号可使用免费试用次数 效果还是很满意的 并且似乎支持所有格式的文档 txt…</p>\n</li>\n</ul>\n<ul>\n<li><p>使用微软提供url来解析office文档<br>预览地址：<a href=\"https://products.office.com/zh-CN/office-online/view-office-documents-online\" target=\"_blank\" rel=\"external\">https://products.office.com/zh-CN/office-online/view-office-documents-online</a><br>这种方式是最省钱 省时间 缺点是有大小限制 以及文档类型（只支持office文档word，excel，ppt）官网有写  还有 解析效果不能自定义 但是效果还是蛮不错的</p>\n</li>\n<li><p>总的来说，如果不缺钱就选用第二种，可联系第三方是否可自定义什么的，如果没钱，可选用第三种（前提是部署应用的服务器可外网访问），第一种是备选状态。<br>以上仅个人理解。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"各处搜寻最佳方案\"><a href=\"#各处搜寻最佳方案\" class=\"headerlink\" title=\"各处搜寻最佳方案\"></a>各处搜寻最佳方案</h2><p>   项目中需要在线预览office文档的功能，因此在网络上搜寻大量资料。最终得到以下结论</p>\n<ul>\n<li><p>使用开源openoffice 需要搭建openoffice服务 解析office文档转成pdf 然后通过控制器响应pdf的格式输出文档        再显示到页面<br> 缺点是 ：效果不好 不推荐使用（简单的office文档或许还行）  </p>\n</li>\n<li><p>使用第三方在线预览API 这个需要付费 推荐qq邮箱使用的永中第三方<br>官网地址：<a href=\"http://dcs.yozosoft.com/\">http://dcs.yozosoft.com/</a><br>注册账号可使用免费试用次数 效果还是很满意的 并且似乎支持所有格式的文档 txt…</p>\n</li>\n</ul>\n<ul>\n<li><p>使用微软提供url来解析office文档<br>预览地址：<a href=\"https://products.office.com/zh-CN/office-online/view-office-documents-online\">https://products.office.com/zh-CN/office-online/view-office-documents-online</a><br>这种方式是最省钱 省时间 缺点是有大小限制 以及文档类型（只支持office文档word，excel，ppt）官网有写  还有 解析效果不能自定义 但是效果还是蛮不错的</p>\n</li>\n<li><p>总的来说，如果不缺钱就选用第二种，可联系第三方是否可自定义什么的，如果没钱，可选用第三种（前提是部署应用的服务器可外网访问），第一种是备选状态。<br>以上仅个人理解。</p>\n</li>\n</ul>\n"},{"title":"公瑾科技给我的...","date":"2015-12-23T14:55:44.000Z","_content":" 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自\n\n[Jenkins](http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/).\n\n## 持续集成概述\n\n### 什么是持续集成\n随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。\n\n持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。\n\n持续集成的核心价值在于：  \n``` bash\n  持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。\n  持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。\n  持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。\n```\n\n\n\n### 持续集成的原则\n业界普遍认同的持续集成的原则包括：\n``` bash\n需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。\n开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。\n需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。\n必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。\n```\n\n\n\n### 持续集成系统的组成\n由此可见，一个完整的构建系统必须包括：\n``` bash\n一个自动构建过程，包括自动编译、分发、部署和测试等。\n一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。\n一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。\n```\n\n\n### 总结\n上面的介绍估计了解得差不多了。 \n\n另外还会有ivy，下面内容是它的简介。\n\n\tApache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 \n\n    公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。\n\n傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。\n\n说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。\n\n今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。\n","source":"_posts/公瑾科技给我的.md","raw":"---\ntitle: 公瑾科技给我的...\ndate: 2015-12-23 22:55:44\ntags: \n- 持续集成\n- API\n- Jenkins\ncategories: \n- Java\n- 实习\n---\n 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自\n\n[Jenkins](http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/).\n\n## 持续集成概述\n\n### 什么是持续集成\n随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。\n\n持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。\n\n持续集成的核心价值在于：  \n``` bash\n  持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。\n  持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。\n  持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。\n```\n\n\n\n### 持续集成的原则\n业界普遍认同的持续集成的原则包括：\n``` bash\n需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。\n开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。\n需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。\n必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。\n```\n\n\n\n### 持续集成系统的组成\n由此可见，一个完整的构建系统必须包括：\n``` bash\n一个自动构建过程，包括自动编译、分发、部署和测试等。\n一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。\n一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。\n```\n\n\n### 总结\n上面的介绍估计了解得差不多了。 \n\n另外还会有ivy，下面内容是它的简介。\n\n\tApache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 \n\n    公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。\n\n傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。\n\n说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。\n\n今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。\n","slug":"公瑾科技给我的","published":1,"updated":"2016-09-08T02:15:33.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3x0012pcfplggk74gt","content":"<p> 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自</p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/\" target=\"_blank\" rel=\"external\">Jenkins</a>.</p>\n<h2 id=\"持续集成概述\"><a href=\"#持续集成概述\" class=\"headerlink\" title=\"持续集成概述\"></a>持续集成概述</h2><h3 id=\"什么是持续集成\"><a href=\"#什么是持续集成\" class=\"headerlink\" title=\"什么是持续集成\"></a>什么是持续集成</h3><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p>\n<p>持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p>\n<p>持续集成的核心价值在于：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。</div><div class=\"line\">持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。</div><div class=\"line\">持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</div></pre></td></tr></table></figure></p>\n<h3 id=\"持续集成的原则\"><a href=\"#持续集成的原则\" class=\"headerlink\" title=\"持续集成的原则\"></a>持续集成的原则</h3><p>业界普遍认同的持续集成的原则包括：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。</div><div class=\"line\">开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。</div><div class=\"line\">需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。</div><div class=\"line\">必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。</div></pre></td></tr></table></figure></p>\n<h3 id=\"持续集成系统的组成\"><a href=\"#持续集成系统的组成\" class=\"headerlink\" title=\"持续集成系统的组成\"></a>持续集成系统的组成</h3><p>由此可见，一个完整的构建系统必须包括：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">一个自动构建过程，包括自动编译、分发、部署和测试等。</div><div class=\"line\">一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。</div><div class=\"line\">一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。</div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面的介绍估计了解得差不多了。 </p>\n<p>另外还会有ivy，下面内容是它的简介。</p>\n<pre><code>Apache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 \n\n公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。\n</code></pre><p>傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。</p>\n<p>说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。</p>\n<p>今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。</p>\n","excerpt":"","more":"<p> 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自</p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/\">Jenkins</a>.</p>\n<h2 id=\"持续集成概述\"><a href=\"#持续集成概述\" class=\"headerlink\" title=\"持续集成概述\"></a>持续集成概述</h2><h3 id=\"什么是持续集成\"><a href=\"#什么是持续集成\" class=\"headerlink\" title=\"什么是持续集成\"></a>什么是持续集成</h3><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p>\n<p>持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p>\n<p>持续集成的核心价值在于：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。</div><div class=\"line\">持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。</div><div class=\"line\">持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</div></pre></td></tr></table></figure></p>\n<h3 id=\"持续集成的原则\"><a href=\"#持续集成的原则\" class=\"headerlink\" title=\"持续集成的原则\"></a>持续集成的原则</h3><p>业界普遍认同的持续集成的原则包括：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。</div><div class=\"line\">开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。</div><div class=\"line\">需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。</div><div class=\"line\">必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。</div></pre></td></tr></table></figure></p>\n<h3 id=\"持续集成系统的组成\"><a href=\"#持续集成系统的组成\" class=\"headerlink\" title=\"持续集成系统的组成\"></a>持续集成系统的组成</h3><p>由此可见，一个完整的构建系统必须包括：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">一个自动构建过程，包括自动编译、分发、部署和测试等。</div><div class=\"line\">一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。</div><div class=\"line\">一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。</div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面的介绍估计了解得差不多了。 </p>\n<p>另外还会有ivy，下面内容是它的简介。</p>\n<pre><code>Apache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 \n\n公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。\n</code></pre><p>傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。</p>\n<p>说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。</p>\n<p>今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。</p>\n"},{"title":"百度文字识别API接入","date":"2017-07-04T09:30:41.000Z","_content":"\n ## First\n  一个偶然的链接进去了百度的管理控制台，一扫而过的各种功能真是厉害了。然后看到文字识别，之前帮别人开发一个模拟登陆获取数据（有点像爬虫），有个很关键的点就是验证码了。想了想百度可以文字识别，验证码就不过也如此。\n  - 注册百度账号\n  - 在文字识别添加一个应用\n  - 复制APPid和APPsecret\n  - 填写获取token的地址\n  - 发送请求\n``` \n      String url = \"https://aip.baidubce.com/oauth/2.0/token\";\n              JSONObject obj=new JSONObject();\n              obj.put(\"grant_type\", \"client_credentials\");\n              obj.put(\"client_id\", \"XXX\");\n              obj.put(\"client_secret\", \"YYY\");\n              String content=HttpUtil.post(url, \"json\", obj.toJSONString(), null);\n```\n请求回来的数据是json字符串，解析一下就能获取token了。\n\n## Second\n  获取了token之后就要真正让百度帮我识别验证码了。这时候需要用到百度的sdk，这个包也是在百度的文档中提供，下载之后导入工程即可。\n  按照文档说，图片需要进行base64编码，还好sdk提供了工具类。\n\n  ```\n         String url=\"https://aip.baidubce.com/rest/2.0/ocr/v1/webimage?access_token=\"+access_token;\n              AipRequest r=new AipRequest();\n              String base64Img= Base64Util.encode( FileCopyUtils.copyToByteArray(file));\n              r.setUri(url);\n              r.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n              HashMap<String,Object>params=new HashMap<String,Object>();\n              params.put(\"image\", base64Img);\n              r.setBody(params);\n              AipResponse resp= AipHttpClient.post(r);\n              System.out.println(resp.getBodyStr());\n``` \n响应后的数据就是有识别的结果了，返回来的数据也是json串，需要进行解析。\n\n## Finally\n 看了下token的过期时间，是一个月，所以我就把token转成json文件保存在本机，就不需要每次都要请求获取token了，另外在获取token的时候需要判断是否已经过期了。刚尝试了接触过的两种验证码，较为复杂的，有干扰线的，需要去除掉，然后进行图像处理，再调用百度的API才能识别出来，另外一种是没有干扰线的，这个直接调用就出现结果，准确率估计能达到90%，这个还是很不错的，个人觉得如果有这种需求的话可以使用百度的API，虽然有些次数限制，并发限制，总体来说还是可以的，不过也可以付费放开所有限制。","source":"_posts/百度文字识别API接入.md","raw":"---\ntitle: 百度文字识别API接入\ndate: 2017-07-04 17:30:41\ntags: \n- 百度API\n- \ncategories: \n- 验证码识别\n---\n\n ## First\n  一个偶然的链接进去了百度的管理控制台，一扫而过的各种功能真是厉害了。然后看到文字识别，之前帮别人开发一个模拟登陆获取数据（有点像爬虫），有个很关键的点就是验证码了。想了想百度可以文字识别，验证码就不过也如此。\n  - 注册百度账号\n  - 在文字识别添加一个应用\n  - 复制APPid和APPsecret\n  - 填写获取token的地址\n  - 发送请求\n``` \n      String url = \"https://aip.baidubce.com/oauth/2.0/token\";\n              JSONObject obj=new JSONObject();\n              obj.put(\"grant_type\", \"client_credentials\");\n              obj.put(\"client_id\", \"XXX\");\n              obj.put(\"client_secret\", \"YYY\");\n              String content=HttpUtil.post(url, \"json\", obj.toJSONString(), null);\n```\n请求回来的数据是json字符串，解析一下就能获取token了。\n\n## Second\n  获取了token之后就要真正让百度帮我识别验证码了。这时候需要用到百度的sdk，这个包也是在百度的文档中提供，下载之后导入工程即可。\n  按照文档说，图片需要进行base64编码，还好sdk提供了工具类。\n\n  ```\n         String url=\"https://aip.baidubce.com/rest/2.0/ocr/v1/webimage?access_token=\"+access_token;\n              AipRequest r=new AipRequest();\n              String base64Img= Base64Util.encode( FileCopyUtils.copyToByteArray(file));\n              r.setUri(url);\n              r.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n              HashMap<String,Object>params=new HashMap<String,Object>();\n              params.put(\"image\", base64Img);\n              r.setBody(params);\n              AipResponse resp= AipHttpClient.post(r);\n              System.out.println(resp.getBodyStr());\n``` \n响应后的数据就是有识别的结果了，返回来的数据也是json串，需要进行解析。\n\n## Finally\n 看了下token的过期时间，是一个月，所以我就把token转成json文件保存在本机，就不需要每次都要请求获取token了，另外在获取token的时候需要判断是否已经过期了。刚尝试了接触过的两种验证码，较为复杂的，有干扰线的，需要去除掉，然后进行图像处理，再调用百度的API才能识别出来，另外一种是没有干扰线的，这个直接调用就出现结果，准确率估计能达到90%，这个还是很不错的，个人觉得如果有这种需求的话可以使用百度的API，虽然有些次数限制，并发限制，总体来说还是可以的，不过也可以付费放开所有限制。","slug":"百度文字识别API接入","published":1,"updated":"2017-07-04T09:53:00.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc3z0014pcfpgoauwx3n","content":"<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p>  一个偶然的链接进去了百度的管理控制台，一扫而过的各种功能真是厉害了。然后看到文字识别，之前帮别人开发一个模拟登陆获取数据（有点像爬虫），有个很关键的点就是验证码了。想了想百度可以文字识别，验证码就不过也如此。</p>\n<ul>\n<li>注册百度账号</li>\n<li>在文字识别添加一个应用</li>\n<li>复制APPid和APPsecret</li>\n<li>填写获取token的地址</li>\n<li>发送请求<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String url = &quot;https://aip.baidubce.com/oauth/2.0/token&quot;;</div><div class=\"line\">        JSONObject obj=new JSONObject();</div><div class=\"line\">        obj.put(&quot;grant_type&quot;, &quot;client_credentials&quot;);</div><div class=\"line\">        obj.put(&quot;client_id&quot;, &quot;XXX&quot;);</div><div class=\"line\">        obj.put(&quot;client_secret&quot;, &quot;YYY&quot;);</div><div class=\"line\">        String content=HttpUtil.post(url, &quot;json&quot;, obj.toJSONString(), null);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>请求回来的数据是json字符串，解析一下就能获取token了。</p>\n<h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><p>  获取了token之后就要真正让百度帮我识别验证码了。这时候需要用到百度的sdk，这个包也是在百度的文档中提供，下载之后导入工程即可。<br>  按照文档说，图片需要进行base64编码，还好sdk提供了工具类。</p>\n<pre><code>String url=&quot;https://aip.baidubce.com/rest/2.0/ocr/v1/webimage?access_token=&quot;+access_token;\n     AipRequest r=new AipRequest();\n     String base64Img= Base64Util.encode( FileCopyUtils.copyToByteArray(file));\n     r.setUri(url);\n     r.addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);\n     HashMap&lt;String,Object&gt;params=new HashMap&lt;String,Object&gt;();\n     params.put(&quot;image&quot;, base64Img);\n     r.setBody(params);\n     AipResponse resp= AipHttpClient.post(r);\n     System.out.println(resp.getBodyStr());\n</code></pre><p>响应后的数据就是有识别的结果了，返回来的数据也是json串，需要进行解析。</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h2><p> 看了下token的过期时间，是一个月，所以我就把token转成json文件保存在本机，就不需要每次都要请求获取token了，另外在获取token的时候需要判断是否已经过期了。刚尝试了接触过的两种验证码，较为复杂的，有干扰线的，需要去除掉，然后进行图像处理，再调用百度的API才能识别出来，另外一种是没有干扰线的，这个直接调用就出现结果，准确率估计能达到90%，这个还是很不错的，个人觉得如果有这种需求的话可以使用百度的API，虽然有些次数限制，并发限制，总体来说还是可以的，不过也可以付费放开所有限制。</p>\n","excerpt":"","more":"<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p>  一个偶然的链接进去了百度的管理控制台，一扫而过的各种功能真是厉害了。然后看到文字识别，之前帮别人开发一个模拟登陆获取数据（有点像爬虫），有个很关键的点就是验证码了。想了想百度可以文字识别，验证码就不过也如此。</p>\n<ul>\n<li>注册百度账号</li>\n<li>在文字识别添加一个应用</li>\n<li>复制APPid和APPsecret</li>\n<li>填写获取token的地址</li>\n<li>发送请求<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String url = &quot;https://aip.baidubce.com/oauth/2.0/token&quot;;</div><div class=\"line\">        JSONObject obj=new JSONObject();</div><div class=\"line\">        obj.put(&quot;grant_type&quot;, &quot;client_credentials&quot;);</div><div class=\"line\">        obj.put(&quot;client_id&quot;, &quot;XXX&quot;);</div><div class=\"line\">        obj.put(&quot;client_secret&quot;, &quot;YYY&quot;);</div><div class=\"line\">        String content=HttpUtil.post(url, &quot;json&quot;, obj.toJSONString(), null);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>请求回来的数据是json字符串，解析一下就能获取token了。</p>\n<h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><p>  获取了token之后就要真正让百度帮我识别验证码了。这时候需要用到百度的sdk，这个包也是在百度的文档中提供，下载之后导入工程即可。<br>  按照文档说，图片需要进行base64编码，还好sdk提供了工具类。</p>\n<pre><code>String url=&quot;https://aip.baidubce.com/rest/2.0/ocr/v1/webimage?access_token=&quot;+access_token;\n     AipRequest r=new AipRequest();\n     String base64Img= Base64Util.encode( FileCopyUtils.copyToByteArray(file));\n     r.setUri(url);\n     r.addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);\n     HashMap&lt;String,Object&gt;params=new HashMap&lt;String,Object&gt;();\n     params.put(&quot;image&quot;, base64Img);\n     r.setBody(params);\n     AipResponse resp= AipHttpClient.post(r);\n     System.out.println(resp.getBodyStr());\n</code></pre><p>响应后的数据就是有识别的结果了，返回来的数据也是json串，需要进行解析。</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h2><p> 看了下token的过期时间，是一个月，所以我就把token转成json文件保存在本机，就不需要每次都要请求获取token了，另外在获取token的时候需要判断是否已经过期了。刚尝试了接触过的两种验证码，较为复杂的，有干扰线的，需要去除掉，然后进行图像处理，再调用百度的API才能识别出来，另外一种是没有干扰线的，这个直接调用就出现结果，准确率估计能达到90%，这个还是很不错的，个人觉得如果有这种需求的话可以使用百度的API，虽然有些次数限制，并发限制，总体来说还是可以的，不过也可以付费放开所有限制。</p>\n"},{"title":"项目中POI导出出现HTML特殊符号的实体--已解决","date":"2016-07-28T14:37:07.000Z","_content":"## 问题：\n \t导出excel 时出现 类似这样的&gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。\n\n## 废话不说,贴码：\n``` bash\n  /**\n*转换html特殊符号。\n* @param content 需要转换的html特殊符号\n* @param defaultName 默认返回值\n* @return 转化后实际的符号\n*/\npublic static String transferHtml(String content, String defaultName) {\nif(content==null) return defaultName; \nString html = content;\nhtml = StringUtils.replace(html, \"&quot;\", \"\\\"\");\nhtml = StringUtils.replace(html, \"&lt;\", \"<\");\nhtml = StringUtils.replace(html, \"&gt;\", \">\");\nhtml = StringUtils.replace(html, \"&gt;\", \">\");\nhtml = StringUtils.replace(html, \"&sim;\", \"~\");\nhtml = StringUtils.replace(html, \"&and;\", \"^\");\nhtml = StringUtils.replace(html, \"&hellip;\", \"...\");\nreturn html;\n}\n```\n\n\n\n### 总结\n\tStringUtils用的是apach的工具类。\n另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。\n\n具体就参考 [**String自带replaceAll和StringUtils工具类replace区别**](http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html)    这博主分析得挺不错的。\n\n另外我也度了一下html特殊符号的对照表，具体参考 [**HTML 特殊符号编码对照表**](http://tool.chinaz.com/tools/htmlchar.aspx)\n\n\t总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。\n","source":"_posts/项目中POI导出出现HTML特殊符号的实体(已解决).md","raw":"---\ntitle:  项目中POI导出出现HTML特殊符号的实体--已解决\ndate: 2016-07-28 22:37:07\ntags: \n- Java\n- POI\n- 特殊符号\ncategories: \n- Java\n- 问题\n---\n## 问题：\n \t导出excel 时出现 类似这样的&gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。\n\n## 废话不说,贴码：\n``` bash\n  /**\n*转换html特殊符号。\n* @param content 需要转换的html特殊符号\n* @param defaultName 默认返回值\n* @return 转化后实际的符号\n*/\npublic static String transferHtml(String content, String defaultName) {\nif(content==null) return defaultName; \nString html = content;\nhtml = StringUtils.replace(html, \"&quot;\", \"\\\"\");\nhtml = StringUtils.replace(html, \"&lt;\", \"<\");\nhtml = StringUtils.replace(html, \"&gt;\", \">\");\nhtml = StringUtils.replace(html, \"&gt;\", \">\");\nhtml = StringUtils.replace(html, \"&sim;\", \"~\");\nhtml = StringUtils.replace(html, \"&and;\", \"^\");\nhtml = StringUtils.replace(html, \"&hellip;\", \"...\");\nreturn html;\n}\n```\n\n\n\n### 总结\n\tStringUtils用的是apach的工具类。\n另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。\n\n具体就参考 [**String自带replaceAll和StringUtils工具类replace区别**](http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html)    这博主分析得挺不错的。\n\n另外我也度了一下html特殊符号的对照表，具体参考 [**HTML 特殊符号编码对照表**](http://tool.chinaz.com/tools/htmlchar.aspx)\n\n\t总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。\n","slug":"项目中POI导出出现HTML特殊符号的实体(已解决)","published":1,"updated":"2016-09-08T02:17:56.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjacanc410019pcfp8xm29vvm","content":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><pre><code>导出excel 时出现 类似这样的&amp;gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。\n</code></pre><h2 id=\"废话不说-贴码：\"><a href=\"#废话不说-贴码：\" class=\"headerlink\" title=\"废话不说,贴码：\"></a>废话不说,贴码：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  /**</div><div class=\"line\">*转换html特殊符号。</div><div class=\"line\">* @param content 需要转换的html特殊符号</div><div class=\"line\">* @param defaultName 默认返回值</div><div class=\"line\">* @<span class=\"built_in\">return</span> 转化后实际的符号</div><div class=\"line\">*/</div><div class=\"line\">public static String transferHtml(String content, String defaultName) &#123;</div><div class=\"line\"><span class=\"keyword\">if</span>(content==null) <span class=\"built_in\">return</span> defaultName; </div><div class=\"line\">String html = content;</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;quot;\"</span>, <span class=\"string\">\"\\\"\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;lt;\"</span>, <span class=\"string\">\"&lt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;gt;\"</span>, <span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;gt;\"</span>, <span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;sim;\"</span>, <span class=\"string\">\"~\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;and;\"</span>, <span class=\"string\">\"^\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;hellip;\"</span>, <span class=\"string\">\"...\"</span>);</div><div class=\"line\"><span class=\"built_in\">return</span> html;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><pre><code>StringUtils用的是apach的工具类。\n</code></pre><p>另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。</p>\n<p>具体就参考 <a href=\"http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html\" target=\"_blank\" rel=\"external\"><strong>String自带replaceAll和StringUtils工具类replace区别</strong></a>    这博主分析得挺不错的。</p>\n<p>另外我也度了一下html特殊符号的对照表，具体参考 <a href=\"http://tool.chinaz.com/tools/htmlchar.aspx\" target=\"_blank\" rel=\"external\"><strong>HTML 特殊符号编码对照表</strong></a></p>\n<pre><code>总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。\n</code></pre>","excerpt":"","more":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><pre><code>导出excel 时出现 类似这样的&amp;gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。\n</code></pre><h2 id=\"废话不说-贴码：\"><a href=\"#废话不说-贴码：\" class=\"headerlink\" title=\"废话不说,贴码：\"></a>废话不说,贴码：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  /**</div><div class=\"line\">*转换html特殊符号。</div><div class=\"line\">* @param content 需要转换的html特殊符号</div><div class=\"line\">* @param defaultName 默认返回值</div><div class=\"line\">* @<span class=\"built_in\">return</span> 转化后实际的符号</div><div class=\"line\">*/</div><div class=\"line\">public static String transferHtml(String content, String defaultName) &#123;</div><div class=\"line\"><span class=\"keyword\">if</span>(content==null) <span class=\"built_in\">return</span> defaultName; </div><div class=\"line\">String html = content;</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;quot;\"</span>, <span class=\"string\">\"\\\"\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;lt;\"</span>, <span class=\"string\">\"&lt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;gt;\"</span>, <span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;gt;\"</span>, <span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;sim;\"</span>, <span class=\"string\">\"~\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;and;\"</span>, <span class=\"string\">\"^\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;hellip;\"</span>, <span class=\"string\">\"...\"</span>);</div><div class=\"line\"><span class=\"built_in\">return</span> html;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><pre><code>StringUtils用的是apach的工具类。\n</code></pre><p>另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。</p>\n<p>具体就参考 <a href=\"http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html\"><strong>String自带replaceAll和StringUtils工具类replace区别</strong></a>    这博主分析得挺不错的。</p>\n<p>另外我也度了一下html特殊符号的对照表，具体参考 <a href=\"http://tool.chinaz.com/tools/htmlchar.aspx\"><strong>HTML 特殊符号编码对照表</strong></a></p>\n<pre><code>总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。\n</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjacanc3b000dpcfpu784vmwy","category_id":"cjacanc2z0004pcfp9srdetao","_id":"cjacanc3k000mpcfpvmomhn20"},{"post_id":"cjacanc320006pcfp9jsh8ras","category_id":"cjacanc2z0004pcfp9srdetao","_id":"cjacanc3m000ppcfp645vb44l"},{"post_id":"cjacanc3u000vpcfpp1nccn3t","category_id":"cjacanc2z0004pcfp9srdetao","_id":"cjacanc3x0011pcfpwzgwpysx"},{"post_id":"cjacanc3w000zpcfpepq83jfl","category_id":"cjacanc39000apcfp6hqt1vsh","_id":"cjacanc400018pcfpv2kxqdnl"},{"post_id":"cjacanc350008pcfpjls8a39e","category_id":"cjacanc3i000kpcfpd2ccoowd","_id":"cjacanc4c001qpcfpmeted7px"},{"post_id":"cjacanc350008pcfpjls8a39e","category_id":"cjacanc49001lpcfpuobg7236","_id":"cjacanc4c001tpcfp42frd78m"},{"post_id":"cjacanc3l000opcfpb2ryg77k","category_id":"cjacanc4a001npcfp30gjkywc","_id":"cjacanc4d001wpcfp3k5utv91"},{"post_id":"cjacanc3s000tpcfpdey6gb2i","category_id":"cjacanc4d001xpcfp58g5mqna","_id":"cjacanc4f0022pcfpwzcaqhcu"},{"post_id":"cjacanc2q0000pcfpi83scaat","category_id":"cjacanc2z0004pcfp9srdetao","_id":"cjacanc4h0027pcfpby4qi68f"},{"post_id":"cjacanc2q0000pcfpi83scaat","category_id":"cjacanc3m000qpcfpsjdc67uz","_id":"cjacanc4h002apcfpnosn0zez"},{"post_id":"cjacanc2q0000pcfpi83scaat","category_id":"cjacanc4e001zpcfp8ll37rbs","_id":"cjacanc4i002cpcfph4kyzvfz"},{"post_id":"cjacanc3u000xpcfpr297g7rc","category_id":"cjacanc2z0004pcfp9srdetao","_id":"cjacanc4k002gpcfpzhs25a65"},{"post_id":"cjacanc3u000xpcfpr297g7rc","category_id":"cjacanc4h0028pcfpu7edtrqh","_id":"cjacanc4m002ipcfp09xauge9"},{"post_id":"cjacanc3x0012pcfplggk74gt","category_id":"cjacanc39000apcfp6hqt1vsh","_id":"cjacanc4m002lpcfpj0fuvas4"},{"post_id":"cjacanc3x0012pcfplggk74gt","category_id":"cjacanc400015pcfp807hclu8","_id":"cjacanc4m002opcfpqdzb3moh"},{"post_id":"cjacanc3a000cpcfpkknv6p7j","category_id":"cjacanc39000apcfp6hqt1vsh","_id":"cjacanc4n002qpcfpmbo775hj"},{"post_id":"cjacanc3a000cpcfpkknv6p7j","category_id":"cjacanc3v000ypcfpqx3unyj8","_id":"cjacanc4n002spcfpfc5p0htj"},{"post_id":"cjacanc3a000cpcfpkknv6p7j","category_id":"cjacanc4k002hpcfpefc5izs1","_id":"cjacanc4o002upcfpmxgx95tk"},{"post_id":"cjacanc3z0014pcfpgoauwx3n","category_id":"cjacanc4m002mpcfph7tc7tsg","_id":"cjacanc4o002xpcfp24mqhuvr"},{"post_id":"cjacanc410019pcfp8xm29vvm","category_id":"cjacanc39000apcfp6hqt1vsh","_id":"cjacanc4p0030pcfpcj30rhgp"},{"post_id":"cjacanc410019pcfp8xm29vvm","category_id":"cjacanc4n002rpcfpflhelck0","_id":"cjacanc4q0032pcfpqc7rzjxb"},{"post_id":"cjacanc2v0002pcfpgp5d9ogg","category_id":"cjacanc39000apcfp6hqt1vsh","_id":"cjacanc4r0035pcfpmtbznkhs"},{"post_id":"cjacanc2v0002pcfpgp5d9ogg","category_id":"cjacanc400015pcfp807hclu8","_id":"cjacanc4s0038pcfpaqo1jgaf"},{"post_id":"cjacanc2v0002pcfpgp5d9ogg","category_id":"cjacanc4o002wpcfpgswcr26i","_id":"cjacanc4t003apcfpe2smosx7"},{"post_id":"cjacanc3f000gpcfp5fy4htdc","category_id":"cjacanc44001cpcfp066hok0t","_id":"cjacanc4t003cpcfppjfr9x8n"},{"post_id":"cjacanc3f000gpcfp5fy4htdc","category_id":"cjacanc4p0031pcfp9ftk4kza","_id":"cjacanc4v003epcfp87tr20am"},{"post_id":"cjacanc3h000ipcfpnyvwktx1","category_id":"cjacanc44001cpcfp066hok0t","_id":"cjacanc4v003hpcfp8llxwa4p"},{"post_id":"cjacanc3h000ipcfpnyvwktx1","category_id":"cjacanc4r0036pcfp5sq1ggx4","_id":"cjacanc4v003kpcfpvv9360l8"},{"post_id":"cjacanc3k000npcfpyopao3uw","category_id":"cjacanc44001cpcfp066hok0t","_id":"cjacanc4w003mpcfp94uf8hjj"},{"post_id":"cjacanc3k000npcfpyopao3uw","category_id":"cjacanc4p0031pcfp9ftk4kza","_id":"cjacanc4w003opcfpw9ld47yi"},{"post_id":"cjacanc3o000spcfpvgge2i75","category_id":"cjacanc44001cpcfp066hok0t","_id":"cjacanc4x003qpcfp3k0i1kpa"},{"post_id":"cjacanc3o000spcfpvgge2i75","category_id":"cjacanc4p0031pcfp9ftk4kza","_id":"cjacanc4x003spcfpnuo5gsa7"},{"post_id":"cjacanc380009pcfp6wrl3wnw","category_id":"cjacanc39000apcfp6hqt1vsh","_id":"cjacanc4y003upcfputhwi76f"},{"post_id":"cjacanc380009pcfp6wrl3wnw","category_id":"cjacanc3v000ypcfpqx3unyj8","_id":"cjacanc4y003vpcfpf3fcw6yt"},{"post_id":"cjacanc380009pcfp6wrl3wnw","category_id":"cjacanc4k002hpcfpefc5izs1","_id":"cjacanc4y003xpcfpb0fgh0rl"}],"PostTag":[{"post_id":"cjacanc2q0000pcfpi83scaat","tag_id":"cjacanc320005pcfpwwgpp98a","_id":"cjacanc3g000hpcfptw5zd8nu"},{"post_id":"cjacanc2q0000pcfpi83scaat","tag_id":"cjacanc39000bpcfpy4x9og9m","_id":"cjacanc3i000jpcfp30wau6bo"},{"post_id":"cjacanc2v0002pcfpgp5d9ogg","tag_id":"cjacanc3c000fpcfpdc515ugn","_id":"cjacanc3z0013pcfpc85guqp1"},{"post_id":"cjacanc2v0002pcfpgp5d9ogg","tag_id":"cjacanc3j000lpcfpp70osxmc","_id":"cjacanc400016pcfpw0b275bx"},{"post_id":"cjacanc2v0002pcfpgp5d9ogg","tag_id":"cjacanc3o000rpcfpr5pgffyj","_id":"cjacanc43001apcfp9sd283xq"},{"post_id":"cjacanc2v0002pcfpgp5d9ogg","tag_id":"cjacanc3u000wpcfphke4wv1g","_id":"cjacanc43001bpcfpahh9hkvt"},{"post_id":"cjacanc320006pcfp9jsh8ras","tag_id":"cjacanc3w0010pcfp6da3swga","_id":"cjacanc46001epcfp66fw7m4c"},{"post_id":"cjacanc350008pcfpjls8a39e","tag_id":"cjacanc400017pcfpnr1wumxp","_id":"cjacanc48001hpcfpdsmgu91f"},{"post_id":"cjacanc350008pcfpjls8a39e","tag_id":"cjacanc46001dpcfpnr2lt1zm","_id":"cjacanc48001jpcfpat9zr6je"},{"post_id":"cjacanc380009pcfp6wrl3wnw","tag_id":"cjacanc3c000fpcfpdc515ugn","_id":"cjacanc4c001ppcfpmdythglc"},{"post_id":"cjacanc380009pcfp6wrl3wnw","tag_id":"cjacanc49001kpcfpqomgvx3x","_id":"cjacanc4c001spcfpleah07wg"},{"post_id":"cjacanc380009pcfp6wrl3wnw","tag_id":"cjacanc4a001mpcfpiu4qugll","_id":"cjacanc4d001vpcfpou642re0"},{"post_id":"cjacanc3a000cpcfpkknv6p7j","tag_id":"cjacanc3c000fpcfpdc515ugn","_id":"cjacanc4f0021pcfp414q1rip"},{"post_id":"cjacanc3a000cpcfpkknv6p7j","tag_id":"cjacanc49001kpcfpqomgvx3x","_id":"cjacanc4f0023pcfpnenw982n"},{"post_id":"cjacanc3a000cpcfpkknv6p7j","tag_id":"cjacanc4a001mpcfpiu4qugll","_id":"cjacanc4h0026pcfpl4ed86kz"},{"post_id":"cjacanc3b000dpcfpu784vmwy","tag_id":"cjacanc4f0020pcfpko9bcmm1","_id":"cjacanc4i002bpcfpzjxgkpmc"},{"post_id":"cjacanc3b000dpcfpu784vmwy","tag_id":"cjacanc4h0025pcfpe03tzd6y","_id":"cjacanc4i002epcfp85t0x0h3"},{"post_id":"cjacanc3f000gpcfp5fy4htdc","tag_id":"cjacanc4h0029pcfp4ji4xwai","_id":"cjacanc4m002kpcfp7ky75tzu"},{"post_id":"cjacanc3f000gpcfp5fy4htdc","tag_id":"cjacanc4j002fpcfpg9vz7d5c","_id":"cjacanc4m002npcfptqkmh03g"},{"post_id":"cjacanc3h000ipcfpnyvwktx1","tag_id":"cjacanc4m002jpcfpfo8s0nev","_id":"cjacanc4o002vpcfpk7m5srey"},{"post_id":"cjacanc3h000ipcfpnyvwktx1","tag_id":"cjacanc4m002ppcfp8n1x0svv","_id":"cjacanc4p002ypcfpw9dfrwif"},{"post_id":"cjacanc3k000npcfpyopao3uw","tag_id":"cjacanc4n002tpcfpwwd7srqq","_id":"cjacanc4r0034pcfpvfjrdpf2"},{"post_id":"cjacanc3k000npcfpyopao3uw","tag_id":"cjacanc4p002zpcfptk5o0c92","_id":"cjacanc4s0037pcfpwbquczsk"},{"post_id":"cjacanc3l000opcfpb2ryg77k","tag_id":"cjacanc4r0033pcfpz6a82g0t","_id":"cjacanc4v003fpcfpf1jox25j"},{"post_id":"cjacanc3l000opcfpb2ryg77k","tag_id":"cjacanc4s0039pcfprq53mkma","_id":"cjacanc4v003ipcfpn60a5dfr"},{"post_id":"cjacanc3o000spcfpvgge2i75","tag_id":"cjacanc4v003dpcfpzug3mzh4","_id":"cjacanc4x003ppcfp7dbv218b"},{"post_id":"cjacanc3o000spcfpvgge2i75","tag_id":"cjacanc4j002fpcfpg9vz7d5c","_id":"cjacanc4x003rpcfptouvm0zo"},{"post_id":"cjacanc3s000tpcfpdey6gb2i","tag_id":"cjacanc4w003npcfpuxneiktr","_id":"cjacanc4y003ypcfpt3ja458n"},{"post_id":"cjacanc3s000tpcfpdey6gb2i","tag_id":"cjacanc4x003tpcfph6mfeumj","_id":"cjacanc4z003zpcfph5vzcf31"},{"post_id":"cjacanc3u000vpcfpp1nccn3t","tag_id":"cjacanc4y003wpcfpi1ft7bk5","_id":"cjacanc4z0042pcfpyypdm9hb"},{"post_id":"cjacanc3u000vpcfpp1nccn3t","tag_id":"cjacanc4z0040pcfpsso08xh0","_id":"cjacanc4z0043pcfptfthzzha"},{"post_id":"cjacanc3u000xpcfpr297g7rc","tag_id":"cjacanc4z0041pcfpk9udbrmt","_id":"cjacanc500045pcfpq2wp5xjb"},{"post_id":"cjacanc3w000zpcfpepq83jfl","tag_id":"cjacanc4z0044pcfp1f7wlklm","_id":"cjacanc510048pcfp3cy142ne"},{"post_id":"cjacanc3w000zpcfpepq83jfl","tag_id":"cjacanc510046pcfp2o50q3sl","_id":"cjacanc510049pcfp0te2ne65"},{"post_id":"cjacanc3x0012pcfplggk74gt","tag_id":"cjacanc510047pcfpl063unj2","_id":"cjacanc54004cpcfphzgvj819"},{"post_id":"cjacanc3x0012pcfplggk74gt","tag_id":"cjacanc3o000rpcfpr5pgffyj","_id":"cjacanc54004dpcfphv77poj0"},{"post_id":"cjacanc3x0012pcfplggk74gt","tag_id":"cjacanc51004apcfp5uwb571x","_id":"cjacanc54004fpcfpyqn8gua7"},{"post_id":"cjacanc3z0014pcfpgoauwx3n","tag_id":"cjacanc53004bpcfpd1x5xo01","_id":"cjacanc54004gpcfporgnncz5"},{"post_id":"cjacanc410019pcfp8xm29vvm","tag_id":"cjacanc3c000fpcfpdc515ugn","_id":"cjacanc54004ipcfpkv3ouz2r"},{"post_id":"cjacanc410019pcfp8xm29vvm","tag_id":"cjacanc54004epcfpyi2ajbtx","_id":"cjacanc54004jpcfpv0te7j5f"},{"post_id":"cjacanc410019pcfp8xm29vvm","tag_id":"cjacanc54004hpcfpsf79ixyt","_id":"cjacanc54004kpcfpgb31nght"}],"Tag":[{"name":"Future","_id":"cjacanc320005pcfpwwgpp98a"},{"name":"excel导出","_id":"cjacanc39000bpcfpy4x9og9m"},{"name":"Java","_id":"cjacanc3c000fpcfpdc515ugn"},{"name":"Rest","_id":"cjacanc3j000lpcfpp70osxmc"},{"name":"API","_id":"cjacanc3o000rpcfpr5pgffyj"},{"name":"MD5","_id":"cjacanc3u000wpcfphke4wv1g"},{"name":"Hexo","_id":"cjacanc3w0010pcfp6da3swga"},{"name":"Mybatis","_id":"cjacanc400017pcfpnr1wumxp"},{"name":"存储过程","_id":"cjacanc46001dpcfpnr2lt1zm"},{"name":"SpringMVC","_id":"cjacanc49001kpcfpqomgvx3x"},{"name":"静态资源","_id":"cjacanc4a001mpcfpiu4qugll"},{"name":"csv","_id":"cjacanc4f0020pcfpko9bcmm1"},{"name":"myslq","_id":"cjacanc4h0025pcfpe03tzd6y"},{"name":"elasticsearch-插件","_id":"cjacanc4h0029pcfp4ji4xwai"},{"name":"分布式","_id":"cjacanc4j002fpcfpg9vz7d5c"},{"name":"elasticsearch插件","_id":"cjacanc4m002jpcfpfo8s0nev"},{"name":"linux","_id":"cjacanc4m002ppcfp8n1x0svv"},{"name":"elasticsearch-sql","_id":"cjacanc4n002tpcfpwwd7srqq"},{"name":"group_by","_id":"cjacanc4p002zpcfptk5o0c92"},{"name":"Git","_id":"cjacanc4r0033pcfpz6a82g0t"},{"name":"Shell","_id":"cjacanc4s0039pcfprq53mkma"},{"name":"elasticsearch","_id":"cjacanc4v003dpcfpzug3mzh4"},{"name":"spring","_id":"cjacanc4w003npcfpuxneiktr"},{"name":"aop","_id":"cjacanc4x003tpcfph6mfeumj"},{"name":"maven","_id":"cjacanc4y003wpcfpi1ft7bk5"},{"name":"eclipse","_id":"cjacanc4z0040pcfpsso08xh0"},{"name":"hexo","_id":"cjacanc4z0041pcfpk9udbrmt"},{"name":"在线预览","_id":"cjacanc4z0044pcfp1f7wlklm"},{"name":"office","_id":"cjacanc510046pcfp2o50q3sl"},{"name":"持续集成","_id":"cjacanc510047pcfpl063unj2"},{"name":"Jenkins","_id":"cjacanc51004apcfp5uwb571x"},{"name":"百度API","_id":"cjacanc53004bpcfpd1x5xo01"},{"name":"POI","_id":"cjacanc54004epcfpyi2ajbtx"},{"name":"特殊符号","_id":"cjacanc54004hpcfpsf79ixyt"}]}}