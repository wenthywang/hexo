{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/.nojekyll","path":".nojekyll","modified":1,"renderable":0},{"_id":"source/avatar.png","path":"avatar.png","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/img/404.png","path":"img/404.png","modified":1,"renderable":0},{"_id":"source/img/error.png","path":"img/error.png","modified":1,"renderable":0},{"_id":"source/img/error1.png","path":"img/error1.png","modified":1,"renderable":0},{"_id":"source/img/es1.png","path":"img/es1.png","modified":1,"renderable":0},{"_id":"source/img/es2.png","path":"img/es2.png","modified":1,"renderable":0},{"_id":"source/img/es3.png","path":"img/es3.png","modified":1,"renderable":0},{"_id":"source/img/git1.png","path":"img/git1.png","modified":1,"renderable":0},{"_id":"source/img/git.png","path":"img/git.png","modified":1,"renderable":0},{"_id":"source/img/java.png","path":"img/java.png","modified":1,"renderable":0},{"_id":"source/img/link1.png","path":"img/link1.png","modified":1,"renderable":0},{"_id":"source/img/link2.png","path":"img/link2.png","modified":1,"renderable":0},{"_id":"source/img/mysql_1.png","path":"img/mysql_1.png","modified":1,"renderable":0},{"_id":"source/img/mysql_2.png","path":"img/mysql_2.png","modified":1,"renderable":0},{"_id":"source/img/mysql_4.png","path":"img/mysql_4.png","modified":1,"renderable":0},{"_id":"source/img/mysql_3.png","path":"img/mysql_3.png","modified":1,"renderable":0},{"_id":"source/img/mysql_6.png","path":"img/mysql_6.png","modified":1,"renderable":0},{"_id":"source/img/mysql_5.png","path":"img/mysql_5.png","modified":1,"renderable":0},{"_id":"source/img/redis-1.png","path":"img/redis-1.png","modified":1,"renderable":0},{"_id":"source/img/redis-3.png","path":"img/redis-3.png","modified":1,"renderable":0},{"_id":"source/img/redis-2.png","path":"img/redis-2.png","modified":1,"renderable":0},{"_id":"source/img/redis-5.png","path":"img/redis-5.png","modified":1,"renderable":0},{"_id":"source/img/sql.png","path":"img/sql.png","modified":1,"renderable":0},{"_id":"source/img/redis-4.png","path":"img/redis-4.png","modified":1,"renderable":0},{"_id":"source/wechat.jpg","path":"wechat.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat.png","path":"images/wechat.png","modified":1,"renderable":1},{"_id":"source/img/head.png","path":"img/head.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"source/img/img2.jpg","path":"img/img2.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Valine/Valine.min.js","path":"lib/Valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Valine/av-min.js","path":"lib/Valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/img/img1.jpg","path":"img/img1.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479454706895},{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1523261923438},{"_id":"source/avatar.png","hash":"9a105edc1424b41277805cd0c0b1a61c481cb4b8","modified":1523331153193},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1523260175344},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1523260175343},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1523260175348},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1523260175353},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1523260175355},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1523260175356},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1523260175356},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1523260175357},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1523260175358},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1523260175357},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1523260175359},{"_id":"themes/next/_config.yml","hash":"8b31269c9cd3197780cee34e5ab0b4dfcb613eec","modified":1523413960795},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1523260175359},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1523260175362},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1523260175361},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1523260175411},{"_id":"source/favicon.ico","hash":"359e4a45bc9acb73dbeebe3500ed205250c597de","modified":1523344202964},{"_id":"source/_posts/2015_last.md","hash":"286bebcf372b368e270785f9058d5d2c6475fa96","modified":1473300975462},{"_id":"source/_posts/Baidu_API.md","hash":"b1c73a7609c663248f25c632fccd52d8426c4804","modified":1499161980129},{"_id":"source/_posts/Centos7安装JDK1.8.md","hash":"6a2ce58fefdf3ebb8c3ff71b022d628c80e2ac4a","modified":1523158249741},{"_id":"source/_posts/Centos7安装MySQL5.7.md","hash":"1f1c2e67cb45219c688cdfc42e281a33168d8aa1","modified":1523155107610},{"_id":"source/_posts/Centos7安装Redis.md","hash":"d36d9bf116ad1a768165a8f1d9c2ed3edd7e0710","modified":1523245379090},{"_id":"source/_posts/Future_Use.md","hash":"eb3a2dd46d4479a6cf1ff2b2574177d4ca9a7c0b","modified":1479691728618},{"_id":"source/_posts/Hexo_blog.md","hash":"96de8e367062dc3cebeea3455f192500c9347294","modified":1474180899068},{"_id":"source/_posts/Mybatis_error.md","hash":"1720627000c0a5c62255f1927db8384f5e6413df","modified":1474345423760},{"_id":"source/_posts/POI_error.md","hash":"0e92796cedf1f5d94bf53cc40b809083005ab84d","modified":1473301076308},{"_id":"source/_posts/SpringMVC_error.md","hash":"86fd80a99585df45581d8224d1d0c677e8496127","modified":1473301053812},{"_id":"source/_posts/SpringMVC_erro1.md","hash":"549089e95ff2918a6bf3ed02adecd233dbdef815","modified":1473301028985},{"_id":"source/_posts/elasticsearch_1.md","hash":"7a6aa00aa9c9b5afea25bce2aa072e1789747c78","modified":1479402557358},{"_id":"source/_posts/common-csv.md","hash":"8cad21a280294b1d1827f4ced8edbb365cfcac67","modified":1480683554561},{"_id":"source/_posts/elasticsearch_2.md","hash":"96c5b363c26798b5645c1f84b5b125f22d55f0e9","modified":1483086687524},{"_id":"source/_posts/elasticsearch_4.md","hash":"b299dab83cbd9596447c9739aded63a900818061","modified":1520393920665},{"_id":"source/_posts/elasticsearch_3.md","hash":"5f2e619de433aaef954dfc5a29cf625062279b17","modified":1490606017960},{"_id":"source/_posts/hexo_deploy.md","hash":"4a700b18880d9bd450bfd32d9b725c42aed77aac","modified":1523245932554},{"_id":"source/_posts/git_push.md","hash":"679b6131d4d3e34e9c8717ab3b3569318c3e9836","modified":1474537473664},{"_id":"source/_posts/kungeek.md","hash":"6aa0af62a6cec0a4c924261d695f3be61abb9a37","modified":1473300933477},{"_id":"source/_posts/maven_mirror.md","hash":"97f7372c96ff573f4b3b76620a8f672fce97bcde","modified":1478088434564},{"_id":"source/_posts/next.md","hash":"e3678d6bc9a6e2e81ce7187d48b4b35a6a62b2d4","modified":1479456898713},{"_id":"source/_posts/springAOP.md","hash":"75f0db0ac6d6ac11b2d2abbbb56c9287c8905f0f","modified":1499345419217},{"_id":"source/_posts/view_office.md","hash":"ed5d855096a85e74c66bc925c42fbcb2ccd2b1bc","modified":1523416506791},{"_id":"source/about/index.md","hash":"52253ae3be4080d1412ab8f59bbf46cec49b83fd","modified":1473303314934},{"_id":"source/categories/index.md","hash":"e32284ed03a27df68649c30841c8221d039a2bbf","modified":1473302553181},{"_id":"source/img/404.png","hash":"91042facefa5445e43748d48a99d838b79469466","modified":1479456536610},{"_id":"source/img/error.png","hash":"9c4fd9b6fc682d5edccc9ff57a1b4573233901eb","modified":1523177035686},{"_id":"source/img/error1.png","hash":"8b293f8d9b8e1a896051ba9195dfc830824f67ab","modified":1523177092956},{"_id":"source/img/es1.png","hash":"884105fa57c29671f574152c0978c6d94f5f841a","modified":1477917273693},{"_id":"source/img/es2.png","hash":"67a65ebc0c00f40dad60db8feab1c9c19d1651ac","modified":1477917609877},{"_id":"source/img/es3.png","hash":"eec8dc5d0d5e9ff0c3f2e93feb9bfde88b71cdc3","modified":1477917634935},{"_id":"source/img/git1.png","hash":"19aa3ebd71072328a2711113bd930b34dfd259c9","modified":1473588096271},{"_id":"source/img/git.png","hash":"1cb9994cd932775ba63902eb6e3dfdf0d1b1ebe7","modified":1474536287851},{"_id":"source/img/java.png","hash":"fcf4627674785fe5b5b77fb57f4cba3485b41460","modified":1523158089524},{"_id":"source/img/link1.png","hash":"1b50b8300dc01200158a5cc681d1217e3632a096","modified":1520393444226},{"_id":"source/img/link2.png","hash":"fd1aa37f8053fbb2c190d19ec7df3f8fdc9f683d","modified":1520393499545},{"_id":"source/img/mysql_1.png","hash":"161af4c155b01952878f00a869c9cccac80c8954","modified":1522116591075},{"_id":"source/img/mysql_2.png","hash":"df07b1f888a239f73ec094fabf3ae273e49af3f2","modified":1522116869307},{"_id":"source/img/mysql_4.png","hash":"4634fbc6fa9b99b65ded9b57b4829d912144ac81","modified":1522117137633},{"_id":"source/img/mysql_3.png","hash":"a08cd50c0848c464b3cf06e4a46a147273f0d372","modified":1522117026398},{"_id":"source/img/mysql_6.png","hash":"2bff7b13f1c535ed8e32cd0b8799cffb0af63813","modified":1522118447097},{"_id":"source/img/mysql_5.png","hash":"324351ec78d61abbcdf6a3917e916bd451bff2d6","modified":1522117465986},{"_id":"source/img/redis-1.png","hash":"df6bf06dde825db04f49f19236c46d5e97358d21","modified":1523177133236},{"_id":"source/img/redis-3.png","hash":"66a8a5062de88e35e289a6ae9dd82591e84d82f4","modified":1523177922575},{"_id":"source/img/redis-2.png","hash":"8e1e22c11d083563daad5dfedcd45f02b75d6dc0","modified":1523177206655},{"_id":"source/img/redis-5.png","hash":"196a5836b95613f40e98aee8cb92d9fba3645e5c","modified":1523244734809},{"_id":"source/img/sql.png","hash":"90a4aceb0e362adf0a34e76bc7020c311c1a66a8","modified":1520393534933},{"_id":"source/img/redis-4.png","hash":"e90ba370f25554240855aec222432eea4beab6bd","modified":1523182471261},{"_id":"source/tags/index.md","hash":"e477e0b7f1a72099fe0ed5f2a8c58b70b694c0a4","modified":1473302643307},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1523260175312},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1523260175319},{"_id":"themes/next/.git/index","hash":"d6f22cbf38f45c19e94eab7bb96d3ef0dcfd33ab","modified":1523260175556},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1523259282850},{"_id":"themes/next/.git/packed-refs","hash":"2594e2dfee3c8fa3d1c6c8551abbc863c07687f1","modified":1523260175306},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1523260175350},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1523260175351},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1523260175353},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1523260175352},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1523260175373},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1523260175409},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1523260175409},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1523260175410},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1523260175410},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1523260175411},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1523260175410},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1523260175411},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1523260175362},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1523260175363},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1523260175364},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1523260175365},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1523260175363},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1523260175365},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1523260175366},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1523260175367},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1523260175367},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1523260175369},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1523260175368},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1523260175370},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1523260175369},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1523260175370},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1523260175371},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1523260175371},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1523260175412},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1523260175413},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1523260175554},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1523260175554},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1523260175555},{"_id":"source/wechat.jpg","hash":"27b1c31dd5f7829cf8c4c06adf00536bb71cca2d","modified":1523263724385},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523260175468},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1523259282850},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1523259282851},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1523259282853},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1523259282851},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1523259282854},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1523259282853},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1523259282852},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1523259282854},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1523259282856},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1523259282855},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1523259282855},{"_id":"themes/next/.git/logs/HEAD","hash":"7ce801e4bdeef56b9c24a2d663598a9cb624cdd2","modified":1523260175315},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1523259282857},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1523260175372},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1523260175373},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1523260175374},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1523260175375},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1523260175376},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1523260175376},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1523260175375},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1523260175377},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1523260175377},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1523260175378},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1523260175378},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1523260175380},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1523260175381},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1523260175382},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1523260175382},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1523260175387},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1523348017515},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1523260175391},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1523260175403},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1523260175403},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1523260175402},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1523260175402},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1523260175404},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1523260175404},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1523260175405},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1523260175467},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1523260175468},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1523260175469},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1523260175470},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1523260175471},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523260175469},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1523260175470},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1523260175472},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1523260175471},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1523260175472},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1523260175473},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523260175474},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1523260175473},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1523260175473},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1523260175474},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523260175474},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1523260175475},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1523260175475},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523260175475},{"_id":"themes/next/source/images/wechat.png","hash":"8ce45a2ea25e331f4e2fb8febc9c2b20973acece","modified":1473308356739},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1523260175414},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1523260175415},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1523260175414},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1523260175414},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1523260175415},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1523260175415},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1523260175416},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1523260175417},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1523260175417},{"_id":"source/img/head.png","hash":"5965261175164ce9d6623ee2bc5765e210197930","modified":1520393401256},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523260175389},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523260175390},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523260175451},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523260175452},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523260175453},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523260175466},{"_id":"themes/next/source/images/alipay.jpg","hash":"d359f26f3064323eab5c6ed1cc33c9b508184c45","modified":1473308339568},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523260175467},{"_id":"themes/next/.git/refs/heads/master","hash":"8d68aab3ed0ae7f4d76d6a1708ac38ba9c2e121d","modified":1523260175314},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1523260175379},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1523260175380},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1523260175383},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1523260175383},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1523260175384},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1523260175384},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1523260175385},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1523260175385},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1523260175386},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1523260175388},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1523260175389},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1523260175390},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1523260175392},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1523260175393},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1523260175393},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1523260175394},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1523260175394},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1523260175395},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1523260175396},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1523260175395},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1523260175397},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1523260175396},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1523260175396},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1523260175397},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1523260175397},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1523260175398},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"eb483e8a172ea6ea0e301a6459d9b748cc0ad743","modified":1523266339705},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1523260175398},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1523260175399},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1523260175400},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1523260175400},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1523260175401},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1523260175401},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"3eedbbd8690590d1510684101ed824da29875a46","modified":1523339526836},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1523260175407},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1523260175407},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1523260175408},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1523260175408},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1523260175450},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1523260175451},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1523260175452},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1523260175453},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1523260175465},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1523260175465},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1523260175466},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1523260175467},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1523260175477},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1523260175476},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1523260175477},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1523260175478},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1523260175477},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1523260175479},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1523260175478},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1523260175479},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1523260175481},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1523260175481},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1523260175482},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523260175491},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523260175496},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1523260175497},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1523260175498},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1523260175498},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1523260175512},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1523260175512},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1523260175513},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1523260175514},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1523260175513},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1523260175507},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1523260175509},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1523260175509},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1523260175508},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1523260175535},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1523260175535},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1523260175536},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1523260175531},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1523260175532},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1523260175532},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1523260175533},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1523260175532},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1523260175529},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1523260175534},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523260175537},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523260175538},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523260175537},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523260175539},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523260175540},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523260175540},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523260175539},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523260175540},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523260175541},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523260175541},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523260175541},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523260175542},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1523260175543},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523260175542},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1523260175543},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1523260175544},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1523260175544},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1523260175550},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1523260175550},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1523260175553},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1523260175552},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1523260175553},{"_id":"source/img/img2.jpg","hash":"87ab2512f6172c74b0f201b19a17f2fe5757f55a","modified":1467880997490},{"_id":"themes/next/source/lib/Valine/Valine.min.js","hash":"e23b1d09fdc5e879b8d8fb9075d1bf47cadbec03","modified":1523339287420},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1523260175530},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"7ce801e4bdeef56b9c24a2d663598a9cb624cdd2","modified":1523260175315},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1523260175311},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1523260175406},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1523260175406},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1523260175454},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1523260175460},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1523260175461},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1523260175460},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1523260175461},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1523260175461},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1523260175463},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1523260175463},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1523260175463},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1523260175464},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1523260175464},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1523260175464},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1523260175418},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1523260175419},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1523260175419},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1523260175419},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1523260175420},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1523260175427},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1523260175438},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1523260175455},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1523260175456},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1523260175456},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1523260175458},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1523260175458},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1523260175457},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1523260175457},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1523260175448},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1523260175448},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1523260175447},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1523260175449},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1523260175449},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1523260175447},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1523260175449},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1523260175480},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1523260175491},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1523260175488},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1523260175490},{"_id":"themes/next/source/lib/Valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1523339483058},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523260175500},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523260175500},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523260175501},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523260175499},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523260175501},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523260175502},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1523260175506},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1523260175507},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1523260175506},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1523260175515},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1523260175516},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1523260175515},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523260175511},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1523260175510},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1523260175549},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1523260175549},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1523260175489},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523260175528},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523260175527},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1523260175552},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"7ce801e4bdeef56b9c24a2d663598a9cb624cdd2","modified":1523260175311},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1523260175462},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1523260175421},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1523260175423},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1523260175424},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1523260175424},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1523260175422},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1523260175421},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1523260175422},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1523260175422},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1523260175423},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1523260175425},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1523260175425},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1523260175426},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1523260175425},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1523260175426},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1523260175439},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1523260175440},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1523260175439},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1523260175440},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1523260175441},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1523260175440},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1523260175442},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1523260175442},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1523260175441},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1523260175428},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1523260175428},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1523260175427},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1523260175428},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1523260175429},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1523260175429},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1523260175430},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1523260175430},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1523260175430},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1523260175431},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1523260175431},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1523260175431},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1523260175432},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1523260175432},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1523260175433},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1523260175433},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1523260175434},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1523260175435},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1523260175435},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1523260175436},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1523260175435},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1523260175436},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1523260175437},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1523260175438},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1523260175437},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1523260175443},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1523260175443},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1523260175443},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1523260175444},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1523260175445},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1523260175444},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1523260175445},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1523260175445},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1523260175446},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1523260175446},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1523260175459},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1523260175459},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523260175485},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523260175485},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523260175486},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523260175487},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1523260175487},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1523260175503},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523260175503},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1523260175504},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1523260175505},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1523260175505},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1523260175504},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523260175520},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523260175518},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523260175526},{"_id":"themes/next/.git/objects/pack/pack-edeb1bf2099bc45e640e1969556e2c485b011f1c.idx","hash":"610509798d395d1396dc79f9e23efcba33f3d60f","modified":1523260175035},{"_id":"source/img/img1.jpg","hash":"18f8e9d5a126b70ead0e2e5c3a88bea6614464a2","modified":1467881032131},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1523260175495},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1523260175548},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1523260175524},{"_id":"themes/next/.git/objects/pack/pack-edeb1bf2099bc45e640e1969556e2c485b011f1c.pack","hash":"02ccb2ce54f81db89536aa4c50d22dd5cab525fe","modified":1523260175101},{"_id":"public/public/public/search.xml","hash":"5244cfb8448482f8bac6e1f1b9f1afadafc9f93a","modified":1523417607062},{"_id":"public/tags/index.html","hash":"44b354079540a0b39f94c2e24fb7b2554625b257","modified":1523417607278},{"_id":"public/about/index.html","hash":"4aaaa2ef90d5cfdf435af8b3f74f6ad049fd665c","modified":1523417607278},{"_id":"public/categories/index.html","hash":"6e3a6e20c892bf9b1c080860b90d4d6576c5376e","modified":1523417607278},{"_id":"public/404.html","hash":"13735546326fdc9d147e75124edcc21f3133bc07","modified":1523417607278},{"_id":"public/2018/04/08/Centos7安装Redis/index.html","hash":"17fd45c90b0887d68d7ae65e71996e3f07c65951","modified":1523417607278},{"_id":"public/2018/04/08/Centos7安装JDK1.8/index.html","hash":"9414b35de0a9f94e9bf13e1ecfdc62d9dcbfb5ea","modified":1523417607278},{"_id":"public/2018/03/27/Centos7安装MySQL5.7/index.html","hash":"9f1574a7a8eb7f4a7ccf1265632babb9a6951117","modified":1523417607278},{"_id":"public/2018/03/07/hexo_deploy/index.html","hash":"245325bfa40561c31fbf4c7effeeb48b366565f0","modified":1523417607279},{"_id":"public/2017/10/27/view_office/index.html","hash":"f8e7165ce793e61b63beb00912ef9cc1453ab797","modified":1523417607279},{"_id":"public/2017/07/04/Baidu_API/index.html","hash":"732babb72393dd122f0079f4a189066c7120df8c","modified":1523417607279},{"_id":"public/2017/06/28/springAOP/index.html","hash":"b6ef5e4d0323d4f94c4869564e4010ab68a43ed1","modified":1523417607279},{"_id":"public/2017/03/27/elasticsearch_3/index.html","hash":"eef13f6aa19013f5ac272df0244e15a65b63c261","modified":1523417607279},{"_id":"public/2016/12/30/elasticsearch_2/index.html","hash":"47917249efb1b553f5319a49377a79829ced5f31","modified":1523417607279},{"_id":"public/2016/12/02/common-csv/index.html","hash":"7d5c6082411e6c829d51a9ab450a727973aa65cd","modified":1523417607279},{"_id":"public/2016/11/19/Future_Use/index.html","hash":"213525aef51173ff5dfabbc576bcaa7ec4fe8b5c","modified":1523417607279},{"_id":"public/2016/11/18/next/index.html","hash":"920ec66460c708b9eccef5afab394b2197df84ef","modified":1523417607279},{"_id":"public/2017/05/04/elasticsearch_4/index.html","hash":"bab3a7dfa73f67e0f22ff42882c0469b002df2ef","modified":1523417607279},{"_id":"public/2016/11/18/elasticsearch_1/index.html","hash":"0dbe94881468ae929861ad3016d654f3995aa8c2","modified":1523417607279},{"_id":"public/2016/11/02/maven_mirror/index.html","hash":"e3172789303f27819cdf2a675723d17e576a4bae","modified":1523417607279},{"_id":"public/2016/09/22/git_push/index.html","hash":"e0892df21d7568e872e4bdbdb573d410c2748494","modified":1523417607279},{"_id":"public/2016/09/20/Mybatis_error/index.html","hash":"e2f235514c125f1a25914f36c0ee299f203ef83d","modified":1523417607280},{"_id":"public/2016/09/11/Hexo_blog/index.html","hash":"bed7f1283743fd598ecce4c001269b44c0d03a87","modified":1523417607280},{"_id":"public/2016/07/28/POI_error/index.html","hash":"7156a2c9677b0afd988dd866b42f0f5b65695a1d","modified":1523417607280},{"_id":"public/2016/02/19/SpringMVC_error/index.html","hash":"62876d7dad4f51c547d8e59a872f5be76a34d9a1","modified":1523417607280},{"_id":"public/2016/01/11/SpringMVC_erro1/index.html","hash":"2ecc80c8786fc057441aefb2c0eddc13b5e3a96a","modified":1523417607280},{"_id":"public/2015/12/31/2015_last/index.html","hash":"713538dc44d479a2db89fd1ec0c84d53d343e67c","modified":1523417607280},{"_id":"public/2015/12/23/kungeek/index.html","hash":"0097fd75654d5eaa594876a7f9be155b76a24d00","modified":1523417607280},{"_id":"public/archives/index.html","hash":"c39e496028825685d6dcc14404122ce312e091a1","modified":1523417607280},{"_id":"public/archives/page/2/index.html","hash":"f40fd29042ff1fdf3eb854ddb0f82400bc9799c5","modified":1523417607280},{"_id":"public/archives/page/3/index.html","hash":"2baaece0c93c388c3a0de40d887c7d7a384cefa9","modified":1523417607280},{"_id":"public/archives/page/4/index.html","hash":"5070904c9cec04c2bdc8139b599518575259db01","modified":1523417607280},{"_id":"public/archives/page/5/index.html","hash":"6f7b01e48015d10131b9bee7c001ac7e9df689ca","modified":1523417607280},{"_id":"public/archives/2015/index.html","hash":"8ecca5c319d257c417d8f698099dac51eb8d2bb9","modified":1523417607280},{"_id":"public/archives/2015/12/index.html","hash":"a9e0f49b3cb08e0b30f32306c875d8f502020bc9","modified":1523417607280},{"_id":"public/archives/2016/index.html","hash":"e81403bb6eb0658435f690e215b4835e8ad8dda0","modified":1523417607280},{"_id":"public/archives/2016/page/3/index.html","hash":"5a689573c9b2ccc9604e012bac9c1ed1e8f83e77","modified":1523417607281},{"_id":"public/archives/2016/page/2/index.html","hash":"960c3b5aad8400a049fed2a6d3814ffedc95f5c7","modified":1523417607281},{"_id":"public/archives/2016/02/index.html","hash":"e261de1c23dc717fc19a1a048e1bbc94ba0f087d","modified":1523417607281},{"_id":"public/archives/2016/09/index.html","hash":"1ae5c1b68d259842ffba5bdbb904deb3431669f9","modified":1523417607281},{"_id":"public/archives/2016/07/index.html","hash":"f3480238711bd5e87e04c7040a8e3ab007503edb","modified":1523417607281},{"_id":"public/archives/2016/01/index.html","hash":"39733a39fbbf43e8f3d12caab9f10b1dc9cbcc20","modified":1523417607281},{"_id":"public/archives/2016/11/index.html","hash":"4ee9f06c0c7d508fd7ed2bdd448c83749a58b2d4","modified":1523417607281},{"_id":"public/archives/2017/index.html","hash":"1656fcb514df919884b459d50afc1375736f1e27","modified":1523417607281},{"_id":"public/archives/2016/12/index.html","hash":"978b28f4cab988e266d4efdef934a9bbde9682ce","modified":1523417607281},{"_id":"public/archives/2017/03/index.html","hash":"3ca076a66e6308520a90fbf02106791a7e15183f","modified":1523417607281},{"_id":"public/archives/2017/05/index.html","hash":"9f3476f8b592c3d0ea232101de5e81fe00ac70b5","modified":1523417607281},{"_id":"public/archives/2017/06/index.html","hash":"8c1d89cf4d0d9c8bae6e42cd8cad598da5a3dc4c","modified":1523417607281},{"_id":"public/archives/2017/07/index.html","hash":"2d576fd63f4e287929d7ab5e1ee679f0d35890bc","modified":1523417607281},{"_id":"public/archives/2017/10/index.html","hash":"33ae98069ea0be81ba2a8f28dac452a0f212edda","modified":1523417607281},{"_id":"public/archives/2018/index.html","hash":"d090bfdcfb3b07805077b53ac05c13798a61c096","modified":1523417607281},{"_id":"public/archives/2018/03/index.html","hash":"3989e62ff45e76b1c7c166281998f06c72109a05","modified":1523417607281},{"_id":"public/archives/2018/04/index.html","hash":"6b5e6d91508da99bbd5968baab0a97f3efdaf594","modified":1523417607281},{"_id":"public/categories/Java/index.html","hash":"37676fe57d26cff22fbf79a107f9964ee5293a2f","modified":1523417607281},{"_id":"public/categories/Java/page/2/index.html","hash":"0adca917f8387be1e8700375b9cfbc61c04d9708","modified":1523417607282},{"_id":"public/categories/验证码识别/index.html","hash":"6ddb9f6221cdfee6b8a3a18a60934e4bd145f983","modified":1523417607282},{"_id":"public/categories/笔记/index.html","hash":"803333891c79ad61528898907de27727d469b7c9","modified":1523417607282},{"_id":"public/categories/笔记/page/2/index.html","hash":"ef077d7202bdb17895a442e99c12bdcd3284e6dd","modified":1523417607282},{"_id":"public/categories/Java/实习/index.html","hash":"93cb7b4e35ededccd39f9fa480ddcd2bd7a7ccc2","modified":1523417607282},{"_id":"public/categories/Mybatis/index.html","hash":"fa5c186a27a3d5d3d40a148a16b174fb27201b8d","modified":1523417607282},{"_id":"public/categories/Java/问题/index.html","hash":"5332d65107a017486dad885c8418f6b826505cee","modified":1523417607282},{"_id":"public/categories/Java/SpringMVC/index.html","hash":"6a27ad0791a12e4f1e653b5d854abc1d71df7110","modified":1523417607282},{"_id":"public/categories/elasticsearch/index.html","hash":"bca611513e5dee2b15da1dbda045747de221a792","modified":1523417607282},{"_id":"public/categories/Java/实习/REST/index.html","hash":"f580121389f47ece8be8f1b4c8064243ee1a0e82","modified":1523417607282},{"_id":"public/categories/笔记/Java/index.html","hash":"5f30847bce35bcb25709ba7661d34e81e184d18f","modified":1523417607282},{"_id":"public/categories/GIT/index.html","hash":"2cd251ea2302cb67b2f63ef4355bfa2521f2d765","modified":1523417607282},{"_id":"public/categories/Mybatis/问题/index.html","hash":"e9bd4c34059bbe5fef4161a6ab3cb4d9087d7bca","modified":1523417607282},{"_id":"public/categories/笔记/bug/index.html","hash":"a87ba18b788764054a47353586ff017c4419665a","modified":1523417607282},{"_id":"public/categories/spring/index.html","hash":"762dbe708056d4b0d4f8524e290ae98ac62430c1","modified":1523417607282},{"_id":"public/categories/Java/SpringMVC/问题/index.html","hash":"51fc2de587a36f283031f01e39dadd737931b437","modified":1523417607282},{"_id":"public/categories/elasticsearch/分布式/index.html","hash":"622ea403905dae408c7ec4e8f1b67672123ba45b","modified":1523417607282},{"_id":"public/categories/elasticsearch/linux/index.html","hash":"3fbdf7c44649608b0880566942762d3d76ac73bd","modified":1523417607282},{"_id":"public/categories/笔记/Java/多线程/index.html","hash":"3129d49220a3cd67fb3d521896adef1d9cbcf8ba","modified":1523417607282},{"_id":"public/page/2/index.html","hash":"5079058c626596b80afb63a620d15f236735560e","modified":1523417607282},{"_id":"public/page/3/index.html","hash":"99e86ebc8e1ba5d23a63ee0ff91b932b9b9027e7","modified":1523417607282},{"_id":"public/index.html","hash":"47ef7d265663da557c584446c6cfb96b582cc326","modified":1523417607283},{"_id":"public/page/4/index.html","hash":"b2fcebedd3f520d7a63978aa810219d0af852a7b","modified":1523417607283},{"_id":"public/page/5/index.html","hash":"4076a4dd138edf45460090435dde232a606e39ab","modified":1523417607283},{"_id":"public/tags/Java/index.html","hash":"00248d608e70ce1cd801d77d51a46fef0ea4f794","modified":1523417607283},{"_id":"public/tags/Rest/index.html","hash":"a5ddfb3c68c2354326f2b7bcc439d551a5d07bda","modified":1523417607283},{"_id":"public/tags/API/index.html","hash":"03223d038a44c658b609186805ee9dd923c0380f","modified":1523417607283},{"_id":"public/tags/MD5/index.html","hash":"6be711a752af1f862ddf148a6b3c22d3d7102a1d","modified":1523417607283},{"_id":"public/tags/百度API/index.html","hash":"52810be8780ed6574ade416efaea32fedd420a82","modified":1523417607283},{"_id":"public/tags/Linux/index.html","hash":"fb44ee27e536825866814c40b026f8018636b88e","modified":1523417607283},{"_id":"public/tags/MySQL/index.html","hash":"452c7b6bac8b96a9fd085afda0bae4fd7664b93b","modified":1523417607283},{"_id":"public/tags/JDK1-8/index.html","hash":"16eb1ebcd3e0031264712c76c55d212977b0e741","modified":1523417607283},{"_id":"public/tags/Future/index.html","hash":"a6d5fa2293a553fe6039fc60c61245d9074ebb75","modified":1523417607283},{"_id":"public/tags/excel导出/index.html","hash":"716649ba117923498618bfc7041c9886084d80e4","modified":1523417607283},{"_id":"public/tags/Hexo/index.html","hash":"e205cb8a4c23e084e5d69e696d8aedacba745cc4","modified":1523417607283},{"_id":"public/tags/Mybatis/index.html","hash":"24fd31e604e391e8605375c5c488796bfba6cd1b","modified":1523417607283},{"_id":"public/tags/存储过程/index.html","hash":"1f8e4c9a93421c091e08a4249ed14d653a44b793","modified":1523417607283},{"_id":"public/tags/POI/index.html","hash":"2de7acdc1939f0a9f3c9cefa08b17c3c95198574","modified":1523417607283},{"_id":"public/tags/特殊符号/index.html","hash":"a0874893b80ce13b2e756d6b6b0c391534859873","modified":1523417607284},{"_id":"public/tags/SpringMVC/index.html","hash":"6bee7bc3f15b2b6b9b1382c049ab8f51578aa759","modified":1523417607284},{"_id":"public/tags/静态资源/index.html","hash":"f2bd878ca3039c426732cdd9464d2d8a40323ceb","modified":1523417607284},{"_id":"public/tags/Redis/index.html","hash":"e68df96c9268199c8a2f27ae06e567b72c978d69","modified":1523417607284},{"_id":"public/tags/elasticsearch/index.html","hash":"3171b4c741c136adcf64534badce4de6bf9e8bc8","modified":1523417607284},{"_id":"public/tags/分布式/index.html","hash":"a9b6091456b100008c491f93034cc889e9fcd67d","modified":1523417607284},{"_id":"public/tags/csv/index.html","hash":"78439248f69f840c3e6db350ecedd2b878111113","modified":1523417607284},{"_id":"public/tags/myslq/index.html","hash":"b6b339c16748c413a16a4e62b3f521ae692ab5c3","modified":1523417607284},{"_id":"public/tags/elasticsearch-sql/index.html","hash":"8f9ec234d0a1921796787779c3935b2683a5f843","modified":1523417607284},{"_id":"public/tags/group-by/index.html","hash":"2453b9be4840fe68618ba1901a6a713c40b9bf2d","modified":1523417607284},{"_id":"public/tags/elasticsearch插件/index.html","hash":"418b1ea71d3c69133689411d4295b059d8537f80","modified":1523417607284},{"_id":"public/tags/linux/index.html","hash":"944edbf05ecdb2ebc77a51c976b008e5a3cb1011","modified":1523417607284},{"_id":"public/tags/elasticsearch-插件/index.html","hash":"f65416943d206ef99ef254fa82f40f9395900e0f","modified":1523417607284},{"_id":"public/tags/Git/index.html","hash":"2fed0a15c6511af45683ac88d6258d2efeae1a09","modified":1523417607285},{"_id":"public/tags/Shell/index.html","hash":"676c5e3a7e203d98e9028596aefaa80124569610","modified":1523417607285},{"_id":"public/tags/Jenkins/index.html","hash":"bcc4f623620ff72905fa4e353bc2a24db187692b","modified":1523417607285},{"_id":"public/tags/持续集成/index.html","hash":"585d6e90cd3fb77f77d5d3773ca84fa82b6357f2","modified":1523417607285},{"_id":"public/tags/hexo/index.html","hash":"2747a3942f261ff0a9b741d9d606555a93889376","modified":1523417607285},{"_id":"public/tags/maven/index.html","hash":"bd36fe841b21b51a17b68541540d83fe625bb099","modified":1523417607285},{"_id":"public/tags/eclipse/index.html","hash":"54bb9e922175da650f81ee157af195ab663c1ce0","modified":1523417607285},{"_id":"public/tags/在线预览/index.html","hash":"d2c0af7c9e32b6632808ab2cb71563fa420c78a9","modified":1523417607285},{"_id":"public/tags/office/index.html","hash":"1643cc9fb5404e481740ea96f74a3389ddb1d78c","modified":1523417607285},{"_id":"public/tags/spring/index.html","hash":"72f978ec66713b40e7103801fa4e875f3e56d2f0","modified":1523417607285},{"_id":"public/tags/aop/index.html","hash":"a3627a5eeeb2e67cb5b6285a2695b260b6c9f3cb","modified":1523417607285},{"_id":"public/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523417607383},{"_id":"public/img/404.png","hash":"91042facefa5445e43748d48a99d838b79469466","modified":1523417607390},{"_id":"public/avatar.png","hash":"9a105edc1424b41277805cd0c0b1a61c481cb4b8","modified":1523417607390},{"_id":"public/img/error1.png","hash":"8b293f8d9b8e1a896051ba9195dfc830824f67ab","modified":1523417607390},{"_id":"public/img/error.png","hash":"9c4fd9b6fc682d5edccc9ff57a1b4573233901eb","modified":1523417607406},{"_id":"public/img/es1.png","hash":"884105fa57c29671f574152c0978c6d94f5f841a","modified":1523417607406},{"_id":"public/img/es2.png","hash":"67a65ebc0c00f40dad60db8feab1c9c19d1651ac","modified":1523417607406},{"_id":"public/img/es3.png","hash":"eec8dc5d0d5e9ff0c3f2e93feb9bfde88b71cdc3","modified":1523417607406},{"_id":"public/img/git.png","hash":"1cb9994cd932775ba63902eb6e3dfdf0d1b1ebe7","modified":1523417607406},{"_id":"public/img/git1.png","hash":"19aa3ebd71072328a2711113bd930b34dfd259c9","modified":1523417607406},{"_id":"public/img/java.png","hash":"fcf4627674785fe5b5b77fb57f4cba3485b41460","modified":1523417607406},{"_id":"public/img/link1.png","hash":"1b50b8300dc01200158a5cc681d1217e3632a096","modified":1523417607407},{"_id":"public/img/mysql_1.png","hash":"161af4c155b01952878f00a869c9cccac80c8954","modified":1523417607407},{"_id":"public/img/mysql_2.png","hash":"df07b1f888a239f73ec094fabf3ae273e49af3f2","modified":1523417607407},{"_id":"public/img/mysql_4.png","hash":"4634fbc6fa9b99b65ded9b57b4829d912144ac81","modified":1523417607407},{"_id":"public/img/link2.png","hash":"fd1aa37f8053fbb2c190d19ec7df3f8fdc9f683d","modified":1523417607407},{"_id":"public/img/mysql_3.png","hash":"a08cd50c0848c464b3cf06e4a46a147273f0d372","modified":1523417607407},{"_id":"public/img/mysql_6.png","hash":"2bff7b13f1c535ed8e32cd0b8799cffb0af63813","modified":1523417607408},{"_id":"public/img/mysql_5.png","hash":"324351ec78d61abbcdf6a3917e916bd451bff2d6","modified":1523417607408},{"_id":"public/img/redis-1.png","hash":"df6bf06dde825db04f49f19236c46d5e97358d21","modified":1523417607408},{"_id":"public/img/redis-3.png","hash":"66a8a5062de88e35e289a6ae9dd82591e84d82f4","modified":1523417607408},{"_id":"public/img/redis-2.png","hash":"8e1e22c11d083563daad5dfedcd45f02b75d6dc0","modified":1523417607408},{"_id":"public/img/redis-5.png","hash":"196a5836b95613f40e98aee8cb92d9fba3645e5c","modified":1523417607408},{"_id":"public/img/sql.png","hash":"90a4aceb0e362adf0a34e76bc7020c311c1a66a8","modified":1523417607408},{"_id":"public/img/redis-4.png","hash":"e90ba370f25554240855aec222432eea4beab6bd","modified":1523417607408},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1523417607409},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1523417607409},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1523417607409},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523417607409},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1523417607409},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1523417607409},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1523417607409},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1523417607409},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1523417607409},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1523417607409},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1523417607409},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523417607409},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1523417607409},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1523417607409},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523417607409},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1523417607409},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1523417607409},{"_id":"public/images/wechat.png","hash":"8ce45a2ea25e331f4e2fb8febc9c2b20973acece","modified":1523417607409},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523417607409},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1523417607410},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1523417607410},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523417607410},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523417607410},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523417607410},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523417607410},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523417607410},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523417607410},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1523417607410},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523417607410},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523417607410},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523417607410},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1523417607410},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523417607410},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523417607410},{"_id":"public/favicon.ico","hash":"359e4a45bc9acb73dbeebe3500ed205250c597de","modified":1523417608206},{"_id":"public/images/alipay.jpg","hash":"d359f26f3064323eab5c6ed1cc33c9b508184c45","modified":1523417608206},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523417608267},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523417608267},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1523417608279},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1523417608279},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1523417608279},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1523417608279},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1523417608279},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1523417608279},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1523417608279},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1523417608279},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1523417608279},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1523417608279},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1523417608279},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523417608279},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523417608279},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1523417608279},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1523417608279},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1523417608279},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1523417608279},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1523417608280},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1523417608280},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1523417608280},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1523417608280},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1523417608280},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523417608280},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523417608280},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1523417608280},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1523417608280},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1523417608281},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1523417608281},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1523417608281},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523417608281},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1523417608281},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1523417608281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523417608281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523417608281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1523417608281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1523417608281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1523417608281},{"_id":"public/css/main.css","hash":"1d895cd48366b3e097ab43806e74141a162baeae","modified":1523417608281},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1523417608281},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1523417608281},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1523417608281},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1523417608281},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1523417608281},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1523417608281},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1523417608281},{"_id":"public/lib/Valine/Valine.min.js","hash":"e23b1d09fdc5e879b8d8fb9075d1bf47cadbec03","modified":1523417608281},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1523417608281},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1523417608282},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1523417608282},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1523417608282},{"_id":"public/lib/Valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1523417608282},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1523417608282},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1523417608282},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1523417608282},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1523417608282},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1523417608282},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1523417608282},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1523417608282},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1523417608282},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1523417608282},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523417608283},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523417608283},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523417608283},{"_id":"public/wechat.jpg","hash":"27b1c31dd5f7829cf8c4c06adf00536bb71cca2d","modified":1523417608297},{"_id":"public/img/head.png","hash":"5965261175164ce9d6623ee2bc5765e210197930","modified":1523417608297},{"_id":"public/img/img2.jpg","hash":"87ab2512f6172c74b0f201b19a17f2fe5757f55a","modified":1523417608329},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1523417608341},{"_id":"public/img/img1.jpg","hash":"18f8e9d5a126b70ead0e2e5c3a88bea6614464a2","modified":1523417608396}],"Category":[{"name":"Java","_id":"cjfuji66600051gfpcpynztyh"},{"name":"验证码识别","_id":"cjfuji66e000b1gfp14jv1kok"},{"name":"笔记","_id":"cjfuji66h000f1gfpexcevncq"},{"name":"实习","parent":"cjfuji66600051gfpcpynztyh","_id":"cjfuji66s000p1gfpi6bianev"},{"name":"Mybatis","_id":"cjfuji67300191gfpb0v1foes"},{"name":"问题","parent":"cjfuji66600051gfpcpynztyh","_id":"cjfuji677001g1gfp5s3j1838"},{"name":"SpringMVC","parent":"cjfuji66600051gfpcpynztyh","_id":"cjfuji67b001n1gfp9uod99s1"},{"name":"elasticsearch","_id":"cjfuji67g001y1gfpvvqgahkb"},{"name":"REST","parent":"cjfuji66s000p1gfpi6bianev","_id":"cjfuji67h00221gfpyuucldhm"},{"name":"Java","parent":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji67l002e1gfpom0jvn9y"},{"name":"GIT","_id":"cjfuji67n002j1gfp5vw3vcs8"},{"name":"问题","parent":"cjfuji67300191gfpb0v1foes","_id":"cjfuji67o002o1gfphdoay63z"},{"name":"bug","parent":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji67o002r1gfpbs3m5pcc"},{"name":"spring","_id":"cjfuji67q002x1gfpou2weevq"},{"name":"问题","parent":"cjfuji67b001n1gfp9uod99s1","_id":"cjfuji67r00321gfpydyurtva"},{"name":"分布式","parent":"cjfuji67g001y1gfpvvqgahkb","_id":"cjfuji67t003b1gfpyjl2romf"},{"name":"linux","parent":"cjfuji67g001y1gfpvvqgahkb","_id":"cjfuji67x003m1gfpa0efyckz"},{"name":"多线程","parent":"cjfuji67l002e1gfpom0jvn9y","_id":"cjfuji67z003r1gfph3iplynv"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-04-09T08:22:28.500Z","updated":"2018-04-09T08:18:43.438Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjfuji64r00001gfpkp3vknjc","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"关于我","categories":["关于我"],"comments":0,"_content":"# 王文辉\n\n> 一个对技术充满好奇的小伙子\n\n*涉世未深，有着洞察世界的眼*   \n\n\n** 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考**  \n\n** *but*.....我更想和别人分享和交流想法.....特别是你.....come on **\n\n\n![NexT Schemes](/img/img2.jpg)\n\n\n## 目前Status\n\n  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感   \n  感觉在学习 不是在工作 \n    {% blockquote %}  \n   Working is Study\n    {% endblockquote %}  \n >  **Working is Study**  \n >  **Study is working**\n\n\n## 过去\n\n学习过C++,C#,汇编语言，外挂制作，反编译等。  \n曾经对技术的热爱，你无法想象  。\n\n\n## 未来\n\n**better than present**\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ncategories: \n- 关于我\ncomments: false\n---\n# 王文辉\n\n> 一个对技术充满好奇的小伙子\n\n*涉世未深，有着洞察世界的眼*   \n\n\n** 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考**  \n\n** *but*.....我更想和别人分享和交流想法.....特别是你.....come on **\n\n\n![NexT Schemes](/img/img2.jpg)\n\n\n## 目前Status\n\n  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感   \n  感觉在学习 不是在工作 \n    {% blockquote %}  \n   Working is Study\n    {% endblockquote %}  \n >  **Working is Study**  \n >  **Study is working**\n\n\n## 过去\n\n学习过C++,C#,汇编语言，外挂制作，反编译等。  \n曾经对技术的热爱，你无法想象  。\n\n\n## 未来\n\n**better than present**\n\n\n","date":"2016-10-31T12:37:07.516Z","updated":"2016-09-08T02:55:14.934Z","path":"about/index.html","layout":"page","_id":"cjfuji66300021gfpas4ohafg","content":"<h1 id=\"王文辉\"><a href=\"#王文辉\" class=\"headerlink\" title=\"王文辉\"></a>王文辉</h1><blockquote>\n<p>一个对技术充满好奇的小伙子</p>\n</blockquote>\n<p><em>涉世未深，有着洞察世界的眼</em>   </p>\n<p><strong> 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考</strong>  </p>\n<p><strong> <em>but</em>…..我更想和别人分享和交流想法…..特别是你…..come on </strong></p>\n<p><img src=\"/img/img2.jpg\" alt=\"NexT Schemes\"></p>\n<h2 id=\"目前Status\"><a href=\"#目前Status\" class=\"headerlink\" title=\"目前Status\"></a>目前Status</h2><p>  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感<br>  感觉在学习 不是在工作<br>    <blockquote><p>Working is Study</p>\n</blockquote>  </p>\n<blockquote>\n<p> <strong>Working is Study</strong><br> <strong>Study is working</strong></p>\n</blockquote>\n<h2 id=\"过去\"><a href=\"#过去\" class=\"headerlink\" title=\"过去\"></a>过去</h2><p>学习过C++,C#,汇编语言，外挂制作，反编译等。<br>曾经对技术的热爱，你无法想象  。</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p><strong>better than present</strong></p>\n","excerpt":"","more":"<h1 id=\"王文辉\"><a href=\"#王文辉\" class=\"headerlink\" title=\"王文辉\"></a>王文辉</h1><blockquote>\n<p>一个对技术充满好奇的小伙子</p>\n</blockquote>\n<p><em>涉世未深，有着洞察世界的眼</em>   </p>\n<p><strong> 涉猎了很多程序相关的书籍，喜欢一个人做研究与思考</strong>  </p>\n<p><strong> <em>but</em>…..我更想和别人分享和交流想法…..特别是你…..come on </strong></p>\n<p><img src=\"/img/img2.jpg\" alt=\"NexT Schemes\"></p>\n<h2 id=\"目前Status\"><a href=\"#目前Status\" class=\"headerlink\" title=\"目前Status\"></a>目前Status</h2><p>  在一家初创公司  做Java开发  每一次完成公司的需求都会有很大的成就感<br>  感觉在学习 不是在工作<br>    <blockquote><p>Working is Study</p>\n</blockquote>  </p>\n<blockquote>\n<p> <strong>Working is Study</strong><br> <strong>Study is working</strong></p>\n</blockquote>\n<h2 id=\"过去\"><a href=\"#过去\" class=\"headerlink\" title=\"过去\"></a>过去</h2><p>学习过C++,C#,汇编语言，外挂制作，反编译等。<br>曾经对技术的热爱，你无法想象  。</p>\n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2><p><strong>better than present</strong></p>\n"},{"title":"tags","date":"2016-09-08T02:43:42.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-08 10:43:42\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-09-08T02:44:03.307Z","path":"tags/index.html","layout":"page","_id":"cjfuji66500041gfpq3uhoifi","content":"","excerpt":"","more":""},{"title":"分类","date":"2016-09-08T04:39:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-09-08 12:39:04\ntype: \"categories\"\ncomments: false\n---","updated":"2016-09-08T02:42:33.181Z","path":"categories/index.html","layout":"page","_id":"cjfuji66900081gfpabmi38y8","content":"","excerpt":"","more":""}],"Post":[{"title":"2015最后一日公瑾","date":"2015-12-31T15:09:59.000Z","_content":"今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。\n\n公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。\n\n用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。\n\n### 核心代码：\n\n``` bash\n/**\n* REST调用入口。\n* @param request\n* HttpServletRequest\n* @param method\n* String\n* @return RestResponse\n* @throws Exception\n* 异常\n*/\n@SuppressWarnings(\"unchecked\")\npublic Object rest(HttpServletRequest request, String method) throws Exception {\n// 获取接口API名称\nString api = \"\";\nMatcher matcher = uriPattern.matcher(request.getRequestURI());\nif (matcher.find()) {\napi = matcher.group(1);\n}\nif (StringUtils.isBlank(api)) {\nreturn ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, \"该服务不存在\", \"\");\n}\nString channel = request.getHeader(\"channel\");\n// 请求头信息\nMap<String, Object> header = new HashMap<String, Object>();\nheader.put(\"method\", method);\nheader.put(\"channel\", channel);\nif (log.isInfoEnabled()) {\nlog.info(\"访问接口API:\" + api);\n}\n// 判断是否合法渠道\nif (!ChannelConstant.validateChannel(channel)) {\nreturn ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + \"填写的渠道不存在，请确认渠道信息\", \"\");\n}\nSdkClient.setChannel(channel);\nObject result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);\nresultMap.put(appVo.getUrl() + appVo.getSort(), result);\n}\nObject result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(), result);\n} catch (FtspException ex) {\nlog.error(appVo2.getUrl() + \"自定义错误信息\", ex);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(),\nFtspJSONUtil.objectToJsonString(\nResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), \"\")));\n} catch (Exception e) {\nlog.error(appVo2.getUrl() + \"请求接口失败\", e);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(),\nFtspJSONUtil.objectToJsonString(\nResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, \"服务器繁忙！\", \"\")));\n}\n}\n}\n}\nreturn ResponseUtils.getSuccess(\"业务操作成功\", RestOperateCode.GET_DATA, resultMap);\n}\n//小接口\nreturn execution(request, api, channel, header);\n}\n```\n\n\n\n### REST\n\tREST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。\n\t目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。\n\n\n\n### 理解\n 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。\n 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：\n``` bash\n private static Pattern uriPattern = Pattern.compile(\"/api/([\\\\w\\\\/]+)\");\n    Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串\n     apis.put(\"sap/fpxx/cgfp\", (API) ContextInit.getContext().getBean(\"ftsp_api_sap_cgfpAPI\"));  @Component(value = \"ftsp_api_sap_djxx_jsfsAPI\")// spring的装配功能，对应的组件申明value，来作为beanID\n     List<NameValuePair> nvps = new ArrayList<NameValuePair>();//声明键值 来用来传参数 使用httppost的时候\n```\n### MD5\n以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。\n\n    引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源\t程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原\t理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 \n\n\nMD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。\n\n### 总结\n感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。","source":"_posts/2015_last.md","raw":"---\ntitle: 2015最后一日公瑾\ndate: 2015-12-31 23:09:59\ntags: \n- Java\n- Rest\n- API\n- MD5\ncategories: \n- Java\n- 实习\n- REST\n---\n今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。\n\n公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。\n\n用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。\n\n### 核心代码：\n\n``` bash\n/**\n* REST调用入口。\n* @param request\n* HttpServletRequest\n* @param method\n* String\n* @return RestResponse\n* @throws Exception\n* 异常\n*/\n@SuppressWarnings(\"unchecked\")\npublic Object rest(HttpServletRequest request, String method) throws Exception {\n// 获取接口API名称\nString api = \"\";\nMatcher matcher = uriPattern.matcher(request.getRequestURI());\nif (matcher.find()) {\napi = matcher.group(1);\n}\nif (StringUtils.isBlank(api)) {\nreturn ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, \"该服务不存在\", \"\");\n}\nString channel = request.getHeader(\"channel\");\n// 请求头信息\nMap<String, Object> header = new HashMap<String, Object>();\nheader.put(\"method\", method);\nheader.put(\"channel\", channel);\nif (log.isInfoEnabled()) {\nlog.info(\"访问接口API:\" + api);\n}\n// 判断是否合法渠道\nif (!ChannelConstant.validateChannel(channel)) {\nreturn ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + \"填写的渠道不存在，请确认渠道信息\", \"\");\n}\nSdkClient.setChannel(channel);\nObject result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);\nresultMap.put(appVo.getUrl() + appVo.getSort(), result);\n}\nObject result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(), result);\n} catch (FtspException ex) {\nlog.error(appVo2.getUrl() + \"自定义错误信息\", ex);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(),\nFtspJSONUtil.objectToJsonString(\nResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), \"\")));\n} catch (Exception e) {\nlog.error(appVo2.getUrl() + \"请求接口失败\", e);\nresultMap.put(appVo2.getUrl() + appVo2.getSort(),\nFtspJSONUtil.objectToJsonString(\nResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, \"服务器繁忙！\", \"\")));\n}\n}\n}\n}\nreturn ResponseUtils.getSuccess(\"业务操作成功\", RestOperateCode.GET_DATA, resultMap);\n}\n//小接口\nreturn execution(request, api, channel, header);\n}\n```\n\n\n\n### REST\n\tREST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。\n\t目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。\n\n\n\n### 理解\n 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。\n 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：\n``` bash\n private static Pattern uriPattern = Pattern.compile(\"/api/([\\\\w\\\\/]+)\");\n    Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串\n     apis.put(\"sap/fpxx/cgfp\", (API) ContextInit.getContext().getBean(\"ftsp_api_sap_cgfpAPI\"));  @Component(value = \"ftsp_api_sap_djxx_jsfsAPI\")// spring的装配功能，对应的组件申明value，来作为beanID\n     List<NameValuePair> nvps = new ArrayList<NameValuePair>();//声明键值 来用来传参数 使用httppost的时候\n```\n### MD5\n以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。\n\n    引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源\t程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原\t理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 \n\n\nMD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。\n\n### 总结\n感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。","slug":"2015_last","published":1,"updated":"2016-09-08T02:16:15.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji65z00011gfpvlk3st7c","content":"<p>今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。</p>\n<p>公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。</p>\n<p>用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。</p>\n<h3 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* REST调用入口。</div><div class=\"line\">* @param request</div><div class=\"line\">* HttpServletRequest</div><div class=\"line\">* @param method</div><div class=\"line\">* String</div><div class=\"line\">* @<span class=\"built_in\">return</span> RestResponse</div><div class=\"line\">* @throws Exception</div><div class=\"line\">* 异常</div><div class=\"line\">*/</div><div class=\"line\">@SuppressWarnings(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">public Object rest(HttpServletRequest request, String method) throws Exception &#123;</div><div class=\"line\">// 获取接口API名称</div><div class=\"line\">String api = <span class=\"string\">\"\"</span>;</div><div class=\"line\">Matcher matcher = uriPattern.matcher(request.getRequestURI());</div><div class=\"line\"><span class=\"keyword\">if</span> (matcher.find()) &#123;</div><div class=\"line\">api = matcher.group(1);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (StringUtils.isBlank(api)) &#123;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, <span class=\"string\">\"该服务不存在\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">String channel = request.getHeader(<span class=\"string\">\"channel\"</span>);</div><div class=\"line\">// 请求头信息</div><div class=\"line\">Map&lt;String, Object&gt; header = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">header.put(<span class=\"string\">\"method\"</span>, method);</div><div class=\"line\">header.put(<span class=\"string\">\"channel\"</span>, channel);</div><div class=\"line\"><span class=\"keyword\">if</span> (log.isInfoEnabled()) &#123;</div><div class=\"line\">log.info(<span class=\"string\">\"访问接口API:\"</span> + api);</div><div class=\"line\">&#125;</div><div class=\"line\">// 判断是否合法渠道</div><div class=\"line\"><span class=\"keyword\">if</span> (!ChannelConstant.validateChannel(channel)) &#123;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + <span class=\"string\">\"填写的渠道不存在，请确认渠道信息\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">SdkClient.setChannel(channel);</div><div class=\"line\">Object result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);</div><div class=\"line\">resultMap.put(appVo.getUrl() + appVo.getSort(), result);</div><div class=\"line\">&#125;</div><div class=\"line\">Object result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(), result);</div><div class=\"line\">&#125; catch (FtspException ex) &#123;</div><div class=\"line\">log.error(appVo2.getUrl() + <span class=\"string\">\"自定义错误信息\"</span>, ex);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class=\"line\">FtspJSONUtil.objectToJsonString(</div><div class=\"line\">ResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), <span class=\"string\">\"\"</span>)));</div><div class=\"line\">&#125; catch (Exception e) &#123;</div><div class=\"line\">log.error(appVo2.getUrl() + <span class=\"string\">\"请求接口失败\"</span>, e);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class=\"line\">FtspJSONUtil.objectToJsonString(</div><div class=\"line\">ResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, <span class=\"string\">\"服务器繁忙！\"</span>, <span class=\"string\">\"\"</span>)));</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getSuccess(<span class=\"string\">\"业务操作成功\"</span>, RestOperateCode.GET_DATA, resultMap);</div><div class=\"line\">&#125;</div><div class=\"line\">//小接口</div><div class=\"line\"><span class=\"built_in\">return</span> execution(request, api, channel, header);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h3><pre><code>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。\n目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。\n</code></pre><h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p> 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。<br> 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Pattern uriPattern = Pattern.compile(<span class=\"string\">\"/api/([\\\\w\\\\/]+)\"</span>);</div><div class=\"line\">   Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串</div><div class=\"line\">    apis.put(<span class=\"string\">\"sap/fpxx/cgfp\"</span>, (API) ContextInit.getContext().getBean(<span class=\"string\">\"ftsp_api_sap_cgfpAPI\"</span>));  @Component(value = <span class=\"string\">\"ftsp_api_sap_djxx_jsfsAPI\"</span>)// spring的装配功能，对应的组件申明value，来作为beanID</div><div class=\"line\">    List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;();//声明键值 来用来传参数 使用httppost的时候</div></pre></td></tr></table></figure></p>\n<h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><p>以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。</p>\n<pre><code>引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源    程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原    理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 \n</code></pre><p>MD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。</p>\n","excerpt":"","more":"<p>今天是2015年的最后一天，想想自己14号进来，两个星期好想都在闲逛，带我的@刘俊杰 好像都没有任务给我，然后就不知道干什么就一天了，他叫我继续看api的东西，我基本上全都看完了，大概有个了解，做个demo的也是可以的。他好像不怎么急，我也不想催他，免得他觉得我太过仓促，觉得我对事情不负责这样的。我就继续深究api的东西，昨天看了很久，也明白了很多东西。</p>\n<p>公司的api接口是整个系统的所有api调用的接口，公司业务也是很复杂的。PS：怎么博客园插入图片不行的呀，不会插，请博客园的大神教教。</p>\n<p>用debug来调试对应的junit的测试方法，然后发现有些地方不知道怎么走。首先是httpclient的模拟客户端发送请求，是发送到哪里的呢，之前没有用过，所以就百度了一下，是发送到对应的url，而发送的地址是a,过了一会是b.原来进行业务操作的时候，是要用户登录验证的，首先要调到验证的url然后返回对应的json数据，通过对应的Token来验证用户是否登录成功，现在我还不清楚token是用来干嘛的，之前在看慕课的微信开发的时候看到过，我也没有实践，不是很清楚了。这个验证应该是网页版的和微信公众号是调用同一个接口，然后就到了restController。</p>\n<h3 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* REST调用入口。</div><div class=\"line\">* @param request</div><div class=\"line\">* HttpServletRequest</div><div class=\"line\">* @param method</div><div class=\"line\">* String</div><div class=\"line\">* @<span class=\"built_in\">return</span> RestResponse</div><div class=\"line\">* @throws Exception</div><div class=\"line\">* 异常</div><div class=\"line\">*/</div><div class=\"line\">@SuppressWarnings(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">public Object rest(HttpServletRequest request, String method) throws Exception &#123;</div><div class=\"line\">// 获取接口API名称</div><div class=\"line\">String api = <span class=\"string\">\"\"</span>;</div><div class=\"line\">Matcher matcher = uriPattern.matcher(request.getRequestURI());</div><div class=\"line\"><span class=\"keyword\">if</span> (matcher.find()) &#123;</div><div class=\"line\">api = matcher.group(1);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (StringUtils.isBlank(api)) &#123;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getFailed(RestErrorCode.SERVICEISNOTEXIST, <span class=\"string\">\"该服务不存在\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">String channel = request.getHeader(<span class=\"string\">\"channel\"</span>);</div><div class=\"line\">// 请求头信息</div><div class=\"line\">Map&lt;String, Object&gt; header = new HashMap&lt;String, Object&gt;();</div><div class=\"line\">header.put(<span class=\"string\">\"method\"</span>, method);</div><div class=\"line\">header.put(<span class=\"string\">\"channel\"</span>, channel);</div><div class=\"line\"><span class=\"keyword\">if</span> (log.isInfoEnabled()) &#123;</div><div class=\"line\">log.info(<span class=\"string\">\"访问接口API:\"</span> + api);</div><div class=\"line\">&#125;</div><div class=\"line\">// 判断是否合法渠道</div><div class=\"line\"><span class=\"keyword\">if</span> (!ChannelConstant.validateChannel(channel)) &#123;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getFailed(RestErrorCode.CHANNELNOTEXIST, channel + <span class=\"string\">\"填写的渠道不存在，请确认渠道信息\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">SdkClient.setChannel(channel);</div><div class=\"line\">Object result = APIFactory.call(getUrl(appVo.getUrl()), header, paramMap);</div><div class=\"line\">resultMap.put(appVo.getUrl() + appVo.getSort(), result);</div><div class=\"line\">&#125;</div><div class=\"line\">Object result = APIFactory.call(getUrl(appVo2.getUrl()), header, paramMap);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(), result);</div><div class=\"line\">&#125; catch (FtspException ex) &#123;</div><div class=\"line\">log.error(appVo2.getUrl() + <span class=\"string\">\"自定义错误信息\"</span>, ex);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class=\"line\">FtspJSONUtil.objectToJsonString(</div><div class=\"line\">ResponseUtils.getFailed(StringUtils.isEmpty(ex.getErrorCode())?RestErrorCode.FTSPEXCEPTION:ex.getErrorCode(), ex.getMessage(), <span class=\"string\">\"\"</span>)));</div><div class=\"line\">&#125; catch (Exception e) &#123;</div><div class=\"line\">log.error(appVo2.getUrl() + <span class=\"string\">\"请求接口失败\"</span>, e);</div><div class=\"line\">resultMap.put(appVo2.getUrl() + appVo2.getSort(),</div><div class=\"line\">FtspJSONUtil.objectToJsonString(</div><div class=\"line\">ResponseUtils.getFailed(RestErrorCode.SYSTEMERROR, <span class=\"string\">\"服务器繁忙！\"</span>, <span class=\"string\">\"\"</span>)));</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">return</span> ResponseUtils.getSuccess(<span class=\"string\">\"业务操作成功\"</span>, RestOperateCode.GET_DATA, resultMap);</div><div class=\"line\">&#125;</div><div class=\"line\">//小接口</div><div class=\"line\"><span class=\"built_in\">return</span> execution(request, api, channel, header);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h3><pre><code>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。\n目前在三种主流的Web服务实现方案中，因为REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。\n</code></pre><h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p> 一开始不知道rest是什么，然后就百度了一下，就有了这串东西，然后就有了大概。用户的请求都会经过这个restController，然后就有了一个问题，为什么会到这个Controller不到其他了呢，应该有个xml来配置，还没有找。公司里的xml很多，内容也是够多的，每次看xml的时候很多时候就会蒙掉，因为都用了狠多业务的拼音还有一些不知道什么的东西，这些东西要自己摸索，我也没问是俊杰。至今我也是了解了不少了。<br> 用户进行业务操作会有两个请求这个是必须的。然后里面涉及到的细节问题，我也百度查了下，代码如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Pattern uriPattern = Pattern.compile(<span class=\"string\">\"/api/([\\\\w\\\\/]+)\"</span>);</div><div class=\"line\">   Matcher matcher = uriPattern.matcher(request.getRequestURI());//使用了正则表达式获得相关字符串</div><div class=\"line\">    apis.put(<span class=\"string\">\"sap/fpxx/cgfp\"</span>, (API) ContextInit.getContext().getBean(<span class=\"string\">\"ftsp_api_sap_cgfpAPI\"</span>));  @Component(value = <span class=\"string\">\"ftsp_api_sap_djxx_jsfsAPI\"</span>)// spring的装配功能，对应的组件申明value，来作为beanID</div><div class=\"line\">    List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;();//声明键值 来用来传参数 使用httppost的时候</div></pre></td></tr></table></figure></p>\n<h3 id=\"MD5\"><a href=\"#MD5\" class=\"headerlink\" title=\"MD5\"></a>MD5</h3><p>以前也看过一些加解密技术，也只是有个了解而已，没有深入的了解，深入的研究。</p>\n<pre><code>引用：MD5将任意长度的“字节串”映射为一个128bit的大整数，并且是通过该128bit反推原始字符串是困难的，换句话说就是，即使你看到源    程序和算法描述，也无法将一个MD5的值变换回原始的字符串，从数学原    理上说，是因为原始的字符串有无穷多个，这有点象不存在反函数的数学函数。所以，要遇到了md5密码的问题，比较好的办法是：你可以用这个系统中的md5()函数重新设一个密码，如admin，把生成的一串密码的Hash值覆盖原来的Hash值就行了。 \n</code></pre><p>MD5是消息摘要算法，数字签名，易懂来说就是每个人的指纹了。一旦对一样东西使用了MD5，就是你按了指纹，没有你的指纹没人能动你的东西。现实生活中，可以模拟人的指纹去干一些不好的事，类似的MD5也不会例外，就好像一开始指纹作为安全的保障，然后现在指纹也变得不安全了，因此MD5也是在劫难逃的。我在想，除了跑字典，还有更好的方式来破解MD5吗？暂时还没有想到，想到我就不是一般人，哈哈。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>感觉个人学计算机的东西很多，然后很多都有去涉猎了一下，大概有个了解，而并没有对一样自己喜欢东西去研究，去发展，现在做的ｊａｖａ也不是我很想要的，觉得自己就是被生活逼迫到要学一样东西去找工作，而不是因为自己喜欢来学。我比较喜欢安全这方面的东西，安全涉及的东西真的很多，以前想学一些黑客的东西，然后就没了，后面到了游戏外挂，然后也没了然后了，总结了一点，计算机网络一定要学好。哈哈，想着自己计算机网络也是刚好６０分。</p>\n"},{"title":"百度文字识别API接入","date":"2017-07-04T09:30:41.000Z","_content":"\n ## First\n  一个偶然的链接进去了百度的管理控制台，一扫而过的各种功能真是厉害了。然后看到文字识别，之前帮别人开发一个模拟登陆获取数据（有点像爬虫），有个很关键的点就是验证码了。想了想百度可以文字识别，验证码就不过也如此。\n  - 注册百度账号\n  - 在文字识别添加一个应用\n  - 复制APPid和APPsecret\n  - 填写获取token的地址\n  - 发送请求\n``` \n      String url = \"https://aip.baidubce.com/oauth/2.0/token\";\n              JSONObject obj=new JSONObject();\n              obj.put(\"grant_type\", \"client_credentials\");\n              obj.put(\"client_id\", \"XXX\");\n              obj.put(\"client_secret\", \"YYY\");\n              String content=HttpUtil.post(url, \"json\", obj.toJSONString(), null);\n```\n请求回来的数据是json字符串，解析一下就能获取token了。\n\n## Second\n  获取了token之后就要真正让百度帮我识别验证码了。这时候需要用到百度的sdk，这个包也是在百度的文档中提供，下载之后导入工程即可。\n  按照文档说，图片需要进行base64编码，还好sdk提供了工具类。\n\n  ```\n         String url=\"https://aip.baidubce.com/rest/2.0/ocr/v1/webimage?access_token=\"+access_token;\n              AipRequest r=new AipRequest();\n              String base64Img= Base64Util.encode( FileCopyUtils.copyToByteArray(file));\n              r.setUri(url);\n              r.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n              HashMap<String,Object>params=new HashMap<String,Object>();\n              params.put(\"image\", base64Img);\n              r.setBody(params);\n              AipResponse resp= AipHttpClient.post(r);\n              System.out.println(resp.getBodyStr());\n``` \n响应后的数据就是有识别的结果了，返回来的数据也是json串，需要进行解析。\n\n## Finally\n 看了下token的过期时间，是一个月，所以我就把token转成json文件保存在本机，就不需要每次都要请求获取token了，另外在获取token的时候需要判断是否已经过期了。刚尝试了接触过的两种验证码，较为复杂的，有干扰线的，需要去除掉，然后进行图像处理，再调用百度的API才能识别出来，另外一种是没有干扰线的，这个直接调用就出现结果，准确率估计能达到90%，这个还是很不错的，个人觉得如果有这种需求的话可以使用百度的API，虽然有些次数限制，并发限制，总体来说还是可以的，不过也可以付费放开所有限制。","source":"_posts/Baidu_API.md","raw":"---\ntitle: 百度文字识别API接入\ndate: 2017-07-04 17:30:41\ntags: \n- 百度API\n- \ncategories: \n- 验证码识别\n---\n\n ## First\n  一个偶然的链接进去了百度的管理控制台，一扫而过的各种功能真是厉害了。然后看到文字识别，之前帮别人开发一个模拟登陆获取数据（有点像爬虫），有个很关键的点就是验证码了。想了想百度可以文字识别，验证码就不过也如此。\n  - 注册百度账号\n  - 在文字识别添加一个应用\n  - 复制APPid和APPsecret\n  - 填写获取token的地址\n  - 发送请求\n``` \n      String url = \"https://aip.baidubce.com/oauth/2.0/token\";\n              JSONObject obj=new JSONObject();\n              obj.put(\"grant_type\", \"client_credentials\");\n              obj.put(\"client_id\", \"XXX\");\n              obj.put(\"client_secret\", \"YYY\");\n              String content=HttpUtil.post(url, \"json\", obj.toJSONString(), null);\n```\n请求回来的数据是json字符串，解析一下就能获取token了。\n\n## Second\n  获取了token之后就要真正让百度帮我识别验证码了。这时候需要用到百度的sdk，这个包也是在百度的文档中提供，下载之后导入工程即可。\n  按照文档说，图片需要进行base64编码，还好sdk提供了工具类。\n\n  ```\n         String url=\"https://aip.baidubce.com/rest/2.0/ocr/v1/webimage?access_token=\"+access_token;\n              AipRequest r=new AipRequest();\n              String base64Img= Base64Util.encode( FileCopyUtils.copyToByteArray(file));\n              r.setUri(url);\n              r.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n              HashMap<String,Object>params=new HashMap<String,Object>();\n              params.put(\"image\", base64Img);\n              r.setBody(params);\n              AipResponse resp= AipHttpClient.post(r);\n              System.out.println(resp.getBodyStr());\n``` \n响应后的数据就是有识别的结果了，返回来的数据也是json串，需要进行解析。\n\n## Finally\n 看了下token的过期时间，是一个月，所以我就把token转成json文件保存在本机，就不需要每次都要请求获取token了，另外在获取token的时候需要判断是否已经过期了。刚尝试了接触过的两种验证码，较为复杂的，有干扰线的，需要去除掉，然后进行图像处理，再调用百度的API才能识别出来，另外一种是没有干扰线的，这个直接调用就出现结果，准确率估计能达到90%，这个还是很不错的，个人觉得如果有这种需求的话可以使用百度的API，虽然有些次数限制，并发限制，总体来说还是可以的，不过也可以付费放开所有限制。","slug":"Baidu_API","published":1,"updated":"2017-07-04T09:53:00.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66300031gfpvb38xsrb","content":"<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p>  一个偶然的链接进去了百度的管理控制台，一扫而过的各种功能真是厉害了。然后看到文字识别，之前帮别人开发一个模拟登陆获取数据（有点像爬虫），有个很关键的点就是验证码了。想了想百度可以文字识别，验证码就不过也如此。</p>\n<ul>\n<li>注册百度账号</li>\n<li>在文字识别添加一个应用</li>\n<li>复制APPid和APPsecret</li>\n<li>填写获取token的地址</li>\n<li>发送请求<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String url = &quot;https://aip.baidubce.com/oauth/2.0/token&quot;;</div><div class=\"line\">        JSONObject obj=new JSONObject();</div><div class=\"line\">        obj.put(&quot;grant_type&quot;, &quot;client_credentials&quot;);</div><div class=\"line\">        obj.put(&quot;client_id&quot;, &quot;XXX&quot;);</div><div class=\"line\">        obj.put(&quot;client_secret&quot;, &quot;YYY&quot;);</div><div class=\"line\">        String content=HttpUtil.post(url, &quot;json&quot;, obj.toJSONString(), null);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>请求回来的数据是json字符串，解析一下就能获取token了。</p>\n<h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><p>  获取了token之后就要真正让百度帮我识别验证码了。这时候需要用到百度的sdk，这个包也是在百度的文档中提供，下载之后导入工程即可。<br>  按照文档说，图片需要进行base64编码，还好sdk提供了工具类。</p>\n<pre><code>String url=&quot;https://aip.baidubce.com/rest/2.0/ocr/v1/webimage?access_token=&quot;+access_token;\n     AipRequest r=new AipRequest();\n     String base64Img= Base64Util.encode( FileCopyUtils.copyToByteArray(file));\n     r.setUri(url);\n     r.addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);\n     HashMap&lt;String,Object&gt;params=new HashMap&lt;String,Object&gt;();\n     params.put(&quot;image&quot;, base64Img);\n     r.setBody(params);\n     AipResponse resp= AipHttpClient.post(r);\n     System.out.println(resp.getBodyStr());\n</code></pre><p>响应后的数据就是有识别的结果了，返回来的数据也是json串，需要进行解析。</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h2><p> 看了下token的过期时间，是一个月，所以我就把token转成json文件保存在本机，就不需要每次都要请求获取token了，另外在获取token的时候需要判断是否已经过期了。刚尝试了接触过的两种验证码，较为复杂的，有干扰线的，需要去除掉，然后进行图像处理，再调用百度的API才能识别出来，另外一种是没有干扰线的，这个直接调用就出现结果，准确率估计能达到90%，这个还是很不错的，个人觉得如果有这种需求的话可以使用百度的API，虽然有些次数限制，并发限制，总体来说还是可以的，不过也可以付费放开所有限制。</p>\n","excerpt":"","more":"<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p>  一个偶然的链接进去了百度的管理控制台，一扫而过的各种功能真是厉害了。然后看到文字识别，之前帮别人开发一个模拟登陆获取数据（有点像爬虫），有个很关键的点就是验证码了。想了想百度可以文字识别，验证码就不过也如此。</p>\n<ul>\n<li>注册百度账号</li>\n<li>在文字识别添加一个应用</li>\n<li>复制APPid和APPsecret</li>\n<li>填写获取token的地址</li>\n<li>发送请求<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String url = &quot;https://aip.baidubce.com/oauth/2.0/token&quot;;</div><div class=\"line\">        JSONObject obj=new JSONObject();</div><div class=\"line\">        obj.put(&quot;grant_type&quot;, &quot;client_credentials&quot;);</div><div class=\"line\">        obj.put(&quot;client_id&quot;, &quot;XXX&quot;);</div><div class=\"line\">        obj.put(&quot;client_secret&quot;, &quot;YYY&quot;);</div><div class=\"line\">        String content=HttpUtil.post(url, &quot;json&quot;, obj.toJSONString(), null);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>请求回来的数据是json字符串，解析一下就能获取token了。</p>\n<h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><p>  获取了token之后就要真正让百度帮我识别验证码了。这时候需要用到百度的sdk，这个包也是在百度的文档中提供，下载之后导入工程即可。<br>  按照文档说，图片需要进行base64编码，还好sdk提供了工具类。</p>\n<pre><code>String url=&quot;https://aip.baidubce.com/rest/2.0/ocr/v1/webimage?access_token=&quot;+access_token;\n     AipRequest r=new AipRequest();\n     String base64Img= Base64Util.encode( FileCopyUtils.copyToByteArray(file));\n     r.setUri(url);\n     r.addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);\n     HashMap&lt;String,Object&gt;params=new HashMap&lt;String,Object&gt;();\n     params.put(&quot;image&quot;, base64Img);\n     r.setBody(params);\n     AipResponse resp= AipHttpClient.post(r);\n     System.out.println(resp.getBodyStr());\n</code></pre><p>响应后的数据就是有识别的结果了，返回来的数据也是json串，需要进行解析。</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h2><p> 看了下token的过期时间，是一个月，所以我就把token转成json文件保存在本机，就不需要每次都要请求获取token了，另外在获取token的时候需要判断是否已经过期了。刚尝试了接触过的两种验证码，较为复杂的，有干扰线的，需要去除掉，然后进行图像处理，再调用百度的API才能识别出来，另外一种是没有干扰线的，这个直接调用就出现结果，准确率估计能达到90%，这个还是很不错的，个人觉得如果有这种需求的话可以使用百度的API，虽然有些次数限制，并发限制，总体来说还是可以的，不过也可以付费放开所有限制。</p>\n"},{"title":"Centos7安装MySQL5.7","date":"2018-03-27T01:30:41.000Z","_content":"安装环境：CentOS7 64位、MySQL5.7\n\n----------\n# 配置安装环境\n## 配置yum源rpm安装包\n`wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm`\n## 安装MySQL源\n`yum localinstall mysql57-community-release-el7-8.noarch.rpm`\n## 检查mysql源是否安装成功\n`yum repolist enabled | grep \"mysql.*-community.*\"`\n![mysql](/img/mysql_1.png)  \n看到上图表示安装成功\n## 修改MySQL版本\n若默认安装5.7的话就不需要修改,修改源文件 \n`vim /etc/yum.repos.d/mysql-community.repo`\n改变enabled属性改为1即可 \n![mysql](/img/mysql_2.png)  \n## 安装MySQL\n `yum install mysql-community-server`\n一轮等待后 安装成功\n # 启动MySQL\n `systemctl start mysqld`\n ## 查看MySQL状态\n `systemctl status mysqld`\n     ![mysql](/img/mysql_3.png)  \n ## 开机启动\n `systemctl enable mysqld`\n `systemctl daemon-reload`\n # 修改root本地登陆密码\nmysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码\n查看文件\n `grep 'temporary password' /var/log/mysqld.log`\n    ![mysql](/img/mysql_4.png)  \n ## 登陆MySQL 修改密码\n `mysql -uroot -p`\n `ALTER USER 'root'@'localhost' IDENTIFIED BY 'test!Wwh';`\n >注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 \n\n通过msyql环境变量可以查看密码策略的相关信息：\n `show variables like '%password%';`\n![mysql](/img/mysql_5.png)  \n>validate_password_policy：密码策略，默认为MEDIUM策略 \n validate_password_dictionary_file：密码策略文件，策略为STRONG才需要 \n validate_password_length：密码最少长度 \n validate_password_mixed_case_count：大小写字符长度，至少1个 \n validate_password_number_count ：数字至少1个 \n validate_password_special_char_count：特殊字符至少1个 \n 上述参数是默认策略MEDIUM的密码检查规则。\n 共有以下几种密码策略：\n 策略  检查规则\n 0 or LOW    Length\n 1 or MEDIUM Length; numeric, lowercase/uppercase, and special characters\n 2 or STRONG Length; numeric, lowercase/uppercase, and special characters; dictionary file\n MySQL官网密码策略详细说明：http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy \n\n## 修改密码策略\n在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略\n`validate_password_policy=0 `\n如果不需要 在my.cnf文件中添加如下配置禁用即可：\n`validate_password = off`\n重新启动MySQL 配置才会生效\n`systemctl restart mysqld`\n# 添加远程登录用户\n默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：\n`mysql> GRANT ALL PRIVILEGES ON *.* TO 'wenthywang'@'%' IDENTIFIED BY 'wwhtest123456' WITH GRANT OPTION;`\n    添加用户成功后 就可以远程使用mycat等工具连接了。\n# 配置默认编码utf8\n `vim /etc/my.cnf`\n   添加以下配置\n `character_set_server=utf8 //指定数据库编码为UTF-8`\n `port=33060 //指定端口号`\n \n    重新启动mysql服务，查看数据库默认编码如下所示：\n   ![mysql](/img/mysql_6.png)  \n- END","source":"_posts/Centos7安装MySQL5.7.md","raw":"---\ntitle: Centos7安装MySQL5.7\ndate: 2018-03-27 09:30:41\ntags: \n- Linux\n- MySQL\ncategories: \n- 笔记 \n---\n安装环境：CentOS7 64位、MySQL5.7\n\n----------\n# 配置安装环境\n## 配置yum源rpm安装包\n`wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm`\n## 安装MySQL源\n`yum localinstall mysql57-community-release-el7-8.noarch.rpm`\n## 检查mysql源是否安装成功\n`yum repolist enabled | grep \"mysql.*-community.*\"`\n![mysql](/img/mysql_1.png)  \n看到上图表示安装成功\n## 修改MySQL版本\n若默认安装5.7的话就不需要修改,修改源文件 \n`vim /etc/yum.repos.d/mysql-community.repo`\n改变enabled属性改为1即可 \n![mysql](/img/mysql_2.png)  \n## 安装MySQL\n `yum install mysql-community-server`\n一轮等待后 安装成功\n # 启动MySQL\n `systemctl start mysqld`\n ## 查看MySQL状态\n `systemctl status mysqld`\n     ![mysql](/img/mysql_3.png)  \n ## 开机启动\n `systemctl enable mysqld`\n `systemctl daemon-reload`\n # 修改root本地登陆密码\nmysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码\n查看文件\n `grep 'temporary password' /var/log/mysqld.log`\n    ![mysql](/img/mysql_4.png)  \n ## 登陆MySQL 修改密码\n `mysql -uroot -p`\n `ALTER USER 'root'@'localhost' IDENTIFIED BY 'test!Wwh';`\n >注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 \n\n通过msyql环境变量可以查看密码策略的相关信息：\n `show variables like '%password%';`\n![mysql](/img/mysql_5.png)  \n>validate_password_policy：密码策略，默认为MEDIUM策略 \n validate_password_dictionary_file：密码策略文件，策略为STRONG才需要 \n validate_password_length：密码最少长度 \n validate_password_mixed_case_count：大小写字符长度，至少1个 \n validate_password_number_count ：数字至少1个 \n validate_password_special_char_count：特殊字符至少1个 \n 上述参数是默认策略MEDIUM的密码检查规则。\n 共有以下几种密码策略：\n 策略  检查规则\n 0 or LOW    Length\n 1 or MEDIUM Length; numeric, lowercase/uppercase, and special characters\n 2 or STRONG Length; numeric, lowercase/uppercase, and special characters; dictionary file\n MySQL官网密码策略详细说明：http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy \n\n## 修改密码策略\n在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略\n`validate_password_policy=0 `\n如果不需要 在my.cnf文件中添加如下配置禁用即可：\n`validate_password = off`\n重新启动MySQL 配置才会生效\n`systemctl restart mysqld`\n# 添加远程登录用户\n默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：\n`mysql> GRANT ALL PRIVILEGES ON *.* TO 'wenthywang'@'%' IDENTIFIED BY 'wwhtest123456' WITH GRANT OPTION;`\n    添加用户成功后 就可以远程使用mycat等工具连接了。\n# 配置默认编码utf8\n `vim /etc/my.cnf`\n   添加以下配置\n `character_set_server=utf8 //指定数据库编码为UTF-8`\n `port=33060 //指定端口号`\n \n    重新启动mysql服务，查看数据库默认编码如下所示：\n   ![mysql](/img/mysql_6.png)  \n- END","slug":"Centos7安装MySQL5.7","published":1,"updated":"2018-04-08T02:38:27.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66900071gfpwcrnru77","content":"<p>安装环境：CentOS7 64位、MySQL5.7</p>\n<hr>\n<h1 id=\"配置安装环境\"><a href=\"#配置安装环境\" class=\"headerlink\" title=\"配置安装环境\"></a>配置安装环境</h1><h2 id=\"配置yum源rpm安装包\"><a href=\"#配置yum源rpm安装包\" class=\"headerlink\" title=\"配置yum源rpm安装包\"></a>配置yum源rpm安装包</h2><p><code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code></p>\n<h2 id=\"安装MySQL源\"><a href=\"#安装MySQL源\" class=\"headerlink\" title=\"安装MySQL源\"></a>安装MySQL源</h2><p><code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p>\n<h2 id=\"检查mysql源是否安装成功\"><a href=\"#检查mysql源是否安装成功\" class=\"headerlink\" title=\"检查mysql源是否安装成功\"></a>检查mysql源是否安装成功</h2><p><code>yum repolist enabled | grep &quot;mysql.*-community.*&quot;</code><br><img src=\"/img/mysql_1.png\" alt=\"mysql\"><br>看到上图表示安装成功</p>\n<h2 id=\"修改MySQL版本\"><a href=\"#修改MySQL版本\" class=\"headerlink\" title=\"修改MySQL版本\"></a>修改MySQL版本</h2><p>若默认安装5.7的话就不需要修改,修改源文件<br><code>vim /etc/yum.repos.d/mysql-community.repo</code><br>改变enabled属性改为1即可<br><img src=\"/img/mysql_2.png\" alt=\"mysql\">  </p>\n<h2 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h2><p> <code>yum install mysql-community-server</code><br>一轮等待后 安装成功</p>\n<h1 id=\"启动MySQL\"><a href=\"#启动MySQL\" class=\"headerlink\" title=\"启动MySQL\"></a>启动MySQL</h1><p> <code>systemctl start mysqld</code></p>\n<h2 id=\"查看MySQL状态\"><a href=\"#查看MySQL状态\" class=\"headerlink\" title=\"查看MySQL状态\"></a>查看MySQL状态</h2><p> <code>systemctl status mysqld</code><br>     <img src=\"/img/mysql_3.png\" alt=\"mysql\">  </p>\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><p> <code>systemctl enable mysqld</code><br> <code>systemctl daemon-reload</code></p>\n<h1 id=\"修改root本地登陆密码\"><a href=\"#修改root本地登陆密码\" class=\"headerlink\" title=\"修改root本地登陆密码\"></a>修改root本地登陆密码</h1><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码<br>查看文件<br> <code>grep &#39;temporary password&#39; /var/log/mysqld.log</code><br>    <img src=\"/img/mysql_4.png\" alt=\"mysql\">  </p>\n<h2 id=\"登陆MySQL-修改密码\"><a href=\"#登陆MySQL-修改密码\" class=\"headerlink\" title=\"登陆MySQL 修改密码\"></a>登陆MySQL 修改密码</h2><p> <code>mysql -uroot -p</code><br> <code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;test!Wwh&#39;;</code></p>\n<blockquote>\n<p>注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 </p>\n</blockquote>\n<p>通过msyql环境变量可以查看密码策略的相关信息：<br> <code>show variables like &#39;%password%&#39;;</code><br><img src=\"/img/mysql_5.png\" alt=\"mysql\">  </p>\n<blockquote>\n<p>validate_password_policy：密码策略，默认为MEDIUM策略<br> validate_password_dictionary_file：密码策略文件，策略为STRONG才需要<br> validate_password_length：密码最少长度<br> validate_password_mixed_case_count：大小写字符长度，至少1个<br> validate_password_number_count ：数字至少1个<br> validate_password_special_char_count：特殊字符至少1个<br> 上述参数是默认策略MEDIUM的密码检查规则。<br> 共有以下几种密码策略：<br> 策略  检查规则<br> 0 or LOW    Length<br> 1 or MEDIUM Length; numeric, lowercase/uppercase, and special characters<br> 2 or STRONG Length; numeric, lowercase/uppercase, and special characters; dictionary file<br> MySQL官网密码策略详细说明：<a href=\"http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy\" target=\"_blank\" rel=\"external\">http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy</a> </p>\n</blockquote>\n<h2 id=\"修改密码策略\"><a href=\"#修改密码策略\" class=\"headerlink\" title=\"修改密码策略\"></a>修改密码策略</h2><p>在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略<br><code>validate_password_policy=0</code><br>如果不需要 在my.cnf文件中添加如下配置禁用即可：<br><code>validate_password = off</code><br>重新启动MySQL 配置才会生效<br><code>systemctl restart mysqld</code></p>\n<h1 id=\"添加远程登录用户\"><a href=\"#添加远程登录用户\" class=\"headerlink\" title=\"添加远程登录用户\"></a>添加远程登录用户</h1><p>默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：<br><code>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;wenthywang&#39;@&#39;%&#39; IDENTIFIED BY &#39;wwhtest123456&#39; WITH GRANT OPTION;</code><br>    添加用户成功后 就可以远程使用mycat等工具连接了。</p>\n<h1 id=\"配置默认编码utf8\"><a href=\"#配置默认编码utf8\" class=\"headerlink\" title=\"配置默认编码utf8\"></a>配置默认编码utf8</h1><p> <code>vim /etc/my.cnf</code><br>   添加以下配置<br> <code>character_set_server=utf8 //指定数据库编码为UTF-8</code><br> <code>port=33060 //指定端口号</code></p>\n<pre><code>重新启动mysql服务，查看数据库默认编码如下所示：\n</code></pre><p>   <img src=\"/img/mysql_6.png\" alt=\"mysql\">  </p>\n<ul>\n<li>END</li>\n</ul>\n","excerpt":"","more":"<p>安装环境：CentOS7 64位、MySQL5.7</p>\n<hr>\n<h1 id=\"配置安装环境\"><a href=\"#配置安装环境\" class=\"headerlink\" title=\"配置安装环境\"></a>配置安装环境</h1><h2 id=\"配置yum源rpm安装包\"><a href=\"#配置yum源rpm安装包\" class=\"headerlink\" title=\"配置yum源rpm安装包\"></a>配置yum源rpm安装包</h2><p><code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code></p>\n<h2 id=\"安装MySQL源\"><a href=\"#安装MySQL源\" class=\"headerlink\" title=\"安装MySQL源\"></a>安装MySQL源</h2><p><code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p>\n<h2 id=\"检查mysql源是否安装成功\"><a href=\"#检查mysql源是否安装成功\" class=\"headerlink\" title=\"检查mysql源是否安装成功\"></a>检查mysql源是否安装成功</h2><p><code>yum repolist enabled | grep &quot;mysql.*-community.*&quot;</code><br><img src=\"/img/mysql_1.png\" alt=\"mysql\"><br>看到上图表示安装成功</p>\n<h2 id=\"修改MySQL版本\"><a href=\"#修改MySQL版本\" class=\"headerlink\" title=\"修改MySQL版本\"></a>修改MySQL版本</h2><p>若默认安装5.7的话就不需要修改,修改源文件<br><code>vim /etc/yum.repos.d/mysql-community.repo</code><br>改变enabled属性改为1即可<br><img src=\"/img/mysql_2.png\" alt=\"mysql\">  </p>\n<h2 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h2><p> <code>yum install mysql-community-server</code><br>一轮等待后 安装成功</p>\n<h1 id=\"启动MySQL\"><a href=\"#启动MySQL\" class=\"headerlink\" title=\"启动MySQL\"></a>启动MySQL</h1><p> <code>systemctl start mysqld</code></p>\n<h2 id=\"查看MySQL状态\"><a href=\"#查看MySQL状态\" class=\"headerlink\" title=\"查看MySQL状态\"></a>查看MySQL状态</h2><p> <code>systemctl status mysqld</code><br>     <img src=\"/img/mysql_3.png\" alt=\"mysql\">  </p>\n<h2 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h2><p> <code>systemctl enable mysqld</code><br> <code>systemctl daemon-reload</code></p>\n<h1 id=\"修改root本地登陆密码\"><a href=\"#修改root本地登陆密码\" class=\"headerlink\" title=\"修改root本地登陆密码\"></a>修改root本地登陆密码</h1><p>mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码<br>查看文件<br> <code>grep &#39;temporary password&#39; /var/log/mysqld.log</code><br>    <img src=\"/img/mysql_4.png\" alt=\"mysql\">  </p>\n<h2 id=\"登陆MySQL-修改密码\"><a href=\"#登陆MySQL-修改密码\" class=\"headerlink\" title=\"登陆MySQL 修改密码\"></a>登陆MySQL 修改密码</h2><p> <code>mysql -uroot -p</code><br> <code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;test!Wwh&#39;;</code></p>\n<blockquote>\n<p>注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 </p>\n</blockquote>\n<p>通过msyql环境变量可以查看密码策略的相关信息：<br> <code>show variables like &#39;%password%&#39;;</code><br><img src=\"/img/mysql_5.png\" alt=\"mysql\">  </p>\n<blockquote>\n<p>validate_password_policy：密码策略，默认为MEDIUM策略<br> validate_password_dictionary_file：密码策略文件，策略为STRONG才需要<br> validate_password_length：密码最少长度<br> validate_password_mixed_case_count：大小写字符长度，至少1个<br> validate_password_number_count ：数字至少1个<br> validate_password_special_char_count：特殊字符至少1个<br> 上述参数是默认策略MEDIUM的密码检查规则。<br> 共有以下几种密码策略：<br> 策略  检查规则<br> 0 or LOW    Length<br> 1 or MEDIUM Length; numeric, lowercase/uppercase, and special characters<br> 2 or STRONG Length; numeric, lowercase/uppercase, and special characters; dictionary file<br> MySQL官网密码策略详细说明：<a href=\"http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy\">http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy</a> </p>\n</blockquote>\n<h2 id=\"修改密码策略\"><a href=\"#修改密码策略\" class=\"headerlink\" title=\"修改密码策略\"></a>修改密码策略</h2><p>在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略<br><code>validate_password_policy=0</code><br>如果不需要 在my.cnf文件中添加如下配置禁用即可：<br><code>validate_password = off</code><br>重新启动MySQL 配置才会生效<br><code>systemctl restart mysqld</code></p>\n<h1 id=\"添加远程登录用户\"><a href=\"#添加远程登录用户\" class=\"headerlink\" title=\"添加远程登录用户\"></a>添加远程登录用户</h1><p>默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：<br><code>mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;wenthywang&#39;@&#39;%&#39; IDENTIFIED BY &#39;wwhtest123456&#39; WITH GRANT OPTION;</code><br>    添加用户成功后 就可以远程使用mycat等工具连接了。</p>\n<h1 id=\"配置默认编码utf8\"><a href=\"#配置默认编码utf8\" class=\"headerlink\" title=\"配置默认编码utf8\"></a>配置默认编码utf8</h1><p> <code>vim /etc/my.cnf</code><br>   添加以下配置<br> <code>character_set_server=utf8 //指定数据库编码为UTF-8</code><br> <code>port=33060 //指定端口号</code></p>\n<pre><code>重新启动mysql服务，查看数据库默认编码如下所示：\n</code></pre><p>   <img src=\"/img/mysql_6.png\" alt=\"mysql\">  </p>\n<ul>\n<li>END</li>\n</ul>\n"},{"title":"Centos7安装JDK1.8","date":"2018-04-08T01:30:41.000Z","_content":"安装环境：CentOS7 64位、JDK1.8\n\n----------\n# 下载安装包\n- 切换到安装目录\n`cd /usr/local/`\n- 添加安装目录\n`mkdir java`\n- 切换安装目录\n`cd java`\n- 下载安装包\n`wget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz\"`\n- 解压\n`tar xzf jdk-8u161-linux-x64.tar.gz`  \n\n# 配置环境变量\n- 修改配置文件\n `vim /etc/profile`\n   添加以下配置\n`JAVA_HOME=/usr/local/java/jdk1.8.0_161`\n`JRE_HOME=/usr/local/java/jdk1.8.0_161/jre`\n`CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib`\n`PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin`\n`export JAVA_HOME JRE_HOME CLASS_PATH PATH`\n \n- 更新文件\n`source /etc/profile`\n- 验证\n`java -verion`![java](/img/java.png)  \n`javac -version`\n","source":"_posts/Centos7安装JDK1.8.md","raw":"---\ntitle: Centos7安装JDK1.8\ndate: 2018-04-08 09:30:41\ntags: \n- Linux\n- JDK1.8\ncategories: \n- 笔记 \n---\n安装环境：CentOS7 64位、JDK1.8\n\n----------\n# 下载安装包\n- 切换到安装目录\n`cd /usr/local/`\n- 添加安装目录\n`mkdir java`\n- 切换安装目录\n`cd java`\n- 下载安装包\n`wget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz\"`\n- 解压\n`tar xzf jdk-8u161-linux-x64.tar.gz`  \n\n# 配置环境变量\n- 修改配置文件\n `vim /etc/profile`\n   添加以下配置\n`JAVA_HOME=/usr/local/java/jdk1.8.0_161`\n`JRE_HOME=/usr/local/java/jdk1.8.0_161/jre`\n`CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib`\n`PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin`\n`export JAVA_HOME JRE_HOME CLASS_PATH PATH`\n \n- 更新文件\n`source /etc/profile`\n- 验证\n`java -verion`![java](/img/java.png)  \n`javac -version`\n","slug":"Centos7安装JDK1.8","published":1,"updated":"2018-04-08T03:30:49.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66b00091gfpiflsar6q","content":"<p>安装环境：CentOS7 64位、JDK1.8</p>\n<hr>\n<h1 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h1><ul>\n<li>切换到安装目录<br><code>cd /usr/local/</code></li>\n<li>添加安装目录<br><code>mkdir java</code></li>\n<li>切换安装目录<br><code>cd java</code></li>\n<li>下载安装包<br><code>wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz&quot;</code></li>\n<li>解压<br><code>tar xzf jdk-8u161-linux-x64.tar.gz</code>  </li>\n</ul>\n<h1 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h1><ul>\n<li><p>修改配置文件<br><code>vim /etc/profile</code><br> 添加以下配置<br><code>JAVA_HOME=/usr/local/java/jdk1.8.0_161</code><br><code>JRE_HOME=/usr/local/java/jdk1.8.0_161/jre</code><br><code>CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</code><br><code>PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</code><br><code>export JAVA_HOME JRE_HOME CLASS_PATH PATH</code></p>\n</li>\n<li><p>更新文件<br><code>source /etc/profile</code></p>\n</li>\n<li>验证<br><code>java -verion</code><img src=\"/img/java.png\" alt=\"java\"><br><code>javac -version</code></li>\n</ul>\n","excerpt":"","more":"<p>安装环境：CentOS7 64位、JDK1.8</p>\n<hr>\n<h1 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h1><ul>\n<li>切换到安装目录<br><code>cd /usr/local/</code></li>\n<li>添加安装目录<br><code>mkdir java</code></li>\n<li>切换安装目录<br><code>cd java</code></li>\n<li>下载安装包<br><code>wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz&quot;</code></li>\n<li>解压<br><code>tar xzf jdk-8u161-linux-x64.tar.gz</code>  </li>\n</ul>\n<h1 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h1><ul>\n<li><p>修改配置文件<br><code>vim /etc/profile</code><br> 添加以下配置<br><code>JAVA_HOME=/usr/local/java/jdk1.8.0_161</code><br><code>JRE_HOME=/usr/local/java/jdk1.8.0_161/jre</code><br><code>CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</code><br><code>PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</code><br><code>export JAVA_HOME JRE_HOME CLASS_PATH PATH</code></p>\n</li>\n<li><p>更新文件<br><code>source /etc/profile</code></p>\n</li>\n<li>验证<br><code>java -verion</code><img src=\"/img/java.png\" alt=\"java\"><br><code>javac -version</code></li>\n</ul>\n"},{"title":"Future Callable 初使用","date":"2016-11-19T06:28:41.000Z","_content":" ## 线程优化 \n  昨天看到一同事的导出代码，单线程，看着就觉得还是差了点东西。然后就想进行一番改造，然后就找来了future和callable。\n  **\n      Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。\n  **\n\n  简单来说就是一个是执行任务，然后它带着任务执行的结果回来。\n\n### 简单看下下面的demo\n```\nimport java.util.ArrayList;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class demo{\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        ExecutorService executor = Executors.newCachedThreadPool();\n        ArrayList<Future<Integer>> resultList = new ArrayList<>();\n        \n        //创建并提交任务1\n        AddNumberTask task1 = new AddNumberTask(1, 5000);\n        Future<Integer> future1 = executor.submit(task1);\n        resultList.add(future1);\n        \n        //创建并提交任务2\n        AddNumberTask task2 = new AddNumberTask(5001, 10000);\n        Future<Integer> future2 = executor.submit(task2);\n        resultList.add(future2);\n        \n        executor.shutdown();\n        \n        int total = 0;\n        \n        for(Future<Integer> future : resultList){\n            while(true){\n                if(future.isDone() && !future.isCancelled()){\n                    int sum = future.get();\n                    total += sum;\n                    break;\n                }\n                else{\n                    Thread.sleep(100);\n                }\n            }\n        }\n        \n        System.out.println(\"total sum is \" + total);\n    }\n\n}\n\nclass AddNumberTask implements Callable<Integer>{\n    private int start;\n    private int end;\n    \n    public AddNumberTask(int start, int end) {\n        // TODO Auto-generated constructor stub\n        this.start = start;\n        this.end = end;\n    }\n    \n    @Override\n    public Integer call() throws Exception {\n        // TODO Auto-generated method stub\n        int totalSum = 0;\n        \n        for(int i = start; i <= end; i++){\n            totalSum += i;\n        }\n        \n        Thread.sleep(5000);\n        \n        return totalSum;\n    }\n    \n}\n\n```\n- 参考了这个例子，我就改造了导出的那段代码，1w2数据从原来的6-8s 到现在的2-3s，虽然不是很多，但是也是一大进步，后来想了下，时间其实就花在了查询的sql，如果sql 再继续优化下去的的话应该可以突破到1s执行返回的。但因为还有新需求要进行，我就不再细究下去了。\n\n- 改造的时候，同样我也是根据查询的数据量来新建任务执行，使用了for循环，本来公司已经提供了线程池fixedPool(100)的，我就不用自己再创建了。\n\n### 出现的问题\n- future 没有表示返回来的这堆数据是谁的\n  于是我就对返回变量进行了修改，返回一个map，标识这个数据是我的，后面根据map的key获取数据。\n- size 数据量的大小影响任务的执行\n  查询数据使用了limit 字段每次查询1000 2000 3000 500 这几个size 都试过，似乎值越大越好，一次查询数据量比多次查询数据量效率要高。因为3000恐怕生产环境的数据会比较多，后来我就改成了2000。  \n- mysql 索引 不合理\n  索引建不好，导致查询sql也是很慢的，查询的那个表使用了多列索引，问题就出在这了，使用sql的执行计划看了下，查询的字段虽然有索引但是没有使用到，因为多列索引的第一个不是我的查询字段，导致查询效率会有小小的降低，我也没跟负责人说，毕竟也不是很大的问题，差的时间不是很多。","source":"_posts/Future_Use.md","raw":"---\ntitle: Future Callable 初使用\ndate: 2016-11-19 14:28:41\ntags: \n- Future\n- excel导出\ncategories: \n- 笔记\n- Java \n- 多线程\n---\n ## 线程优化 \n  昨天看到一同事的导出代码，单线程，看着就觉得还是差了点东西。然后就想进行一番改造，然后就找来了future和callable。\n  **\n      Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。\n  **\n\n  简单来说就是一个是执行任务，然后它带着任务执行的结果回来。\n\n### 简单看下下面的demo\n```\nimport java.util.ArrayList;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class demo{\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        ExecutorService executor = Executors.newCachedThreadPool();\n        ArrayList<Future<Integer>> resultList = new ArrayList<>();\n        \n        //创建并提交任务1\n        AddNumberTask task1 = new AddNumberTask(1, 5000);\n        Future<Integer> future1 = executor.submit(task1);\n        resultList.add(future1);\n        \n        //创建并提交任务2\n        AddNumberTask task2 = new AddNumberTask(5001, 10000);\n        Future<Integer> future2 = executor.submit(task2);\n        resultList.add(future2);\n        \n        executor.shutdown();\n        \n        int total = 0;\n        \n        for(Future<Integer> future : resultList){\n            while(true){\n                if(future.isDone() && !future.isCancelled()){\n                    int sum = future.get();\n                    total += sum;\n                    break;\n                }\n                else{\n                    Thread.sleep(100);\n                }\n            }\n        }\n        \n        System.out.println(\"total sum is \" + total);\n    }\n\n}\n\nclass AddNumberTask implements Callable<Integer>{\n    private int start;\n    private int end;\n    \n    public AddNumberTask(int start, int end) {\n        // TODO Auto-generated constructor stub\n        this.start = start;\n        this.end = end;\n    }\n    \n    @Override\n    public Integer call() throws Exception {\n        // TODO Auto-generated method stub\n        int totalSum = 0;\n        \n        for(int i = start; i <= end; i++){\n            totalSum += i;\n        }\n        \n        Thread.sleep(5000);\n        \n        return totalSum;\n    }\n    \n}\n\n```\n- 参考了这个例子，我就改造了导出的那段代码，1w2数据从原来的6-8s 到现在的2-3s，虽然不是很多，但是也是一大进步，后来想了下，时间其实就花在了查询的sql，如果sql 再继续优化下去的的话应该可以突破到1s执行返回的。但因为还有新需求要进行，我就不再细究下去了。\n\n- 改造的时候，同样我也是根据查询的数据量来新建任务执行，使用了for循环，本来公司已经提供了线程池fixedPool(100)的，我就不用自己再创建了。\n\n### 出现的问题\n- future 没有表示返回来的这堆数据是谁的\n  于是我就对返回变量进行了修改，返回一个map，标识这个数据是我的，后面根据map的key获取数据。\n- size 数据量的大小影响任务的执行\n  查询数据使用了limit 字段每次查询1000 2000 3000 500 这几个size 都试过，似乎值越大越好，一次查询数据量比多次查询数据量效率要高。因为3000恐怕生产环境的数据会比较多，后来我就改成了2000。  \n- mysql 索引 不合理\n  索引建不好，导致查询sql也是很慢的，查询的那个表使用了多列索引，问题就出在这了，使用sql的执行计划看了下，查询的字段虽然有索引但是没有使用到，因为多列索引的第一个不是我的查询字段，导致查询效率会有小小的降低，我也没跟负责人说，毕竟也不是很大的问题，差的时间不是很多。","slug":"Future_Use","published":1,"updated":"2016-11-21T01:28:48.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66d000a1gfpp9gvla0h","content":"<h2 id=\"线程优化\"><a href=\"#线程优化\" class=\"headerlink\" title=\"线程优化\"></a>线程优化</h2><p>  昨天看到一同事的导出代码，单线程，看着就觉得还是差了点东西。然后就想进行一番改造，然后就找来了future和callable。<br>  <strong><br>      Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。\n  </strong></p>\n<p>  简单来说就是一个是执行任务，然后它带着任务执行的结果回来。</p>\n<h3 id=\"简单看下下面的demo\"><a href=\"#简单看下下面的demo\" class=\"headerlink\" title=\"简单看下下面的demo\"></a>简单看下下面的demo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.concurrent.Callable;</div><div class=\"line\">import java.util.concurrent.ExecutionException;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.Executors;</div><div class=\"line\">import java.util.concurrent.Future;</div><div class=\"line\"></div><div class=\"line\">public class demo&#123;</div><div class=\"line\">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</div><div class=\"line\">        ExecutorService executor = Executors.newCachedThreadPool();</div><div class=\"line\">        ArrayList&lt;Future&lt;Integer&gt;&gt; resultList = new ArrayList&lt;&gt;();</div><div class=\"line\">        </div><div class=\"line\">        //创建并提交任务1</div><div class=\"line\">        AddNumberTask task1 = new AddNumberTask(1, 5000);</div><div class=\"line\">        Future&lt;Integer&gt; future1 = executor.submit(task1);</div><div class=\"line\">        resultList.add(future1);</div><div class=\"line\">        </div><div class=\"line\">        //创建并提交任务2</div><div class=\"line\">        AddNumberTask task2 = new AddNumberTask(5001, 10000);</div><div class=\"line\">        Future&lt;Integer&gt; future2 = executor.submit(task2);</div><div class=\"line\">        resultList.add(future2);</div><div class=\"line\">        </div><div class=\"line\">        executor.shutdown();</div><div class=\"line\">        </div><div class=\"line\">        int total = 0;</div><div class=\"line\">        </div><div class=\"line\">        for(Future&lt;Integer&gt; future : resultList)&#123;</div><div class=\"line\">            while(true)&#123;</div><div class=\"line\">                if(future.isDone() &amp;&amp; !future.isCancelled())&#123;</div><div class=\"line\">                    int sum = future.get();</div><div class=\"line\">                    total += sum;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else&#123;</div><div class=\"line\">                    Thread.sleep(100);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(&quot;total sum is &quot; + total);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class AddNumberTask implements Callable&lt;Integer&gt;&#123;</div><div class=\"line\">    private int start;</div><div class=\"line\">    private int end;</div><div class=\"line\">    </div><div class=\"line\">    public AddNumberTask(int start, int end) &#123;</div><div class=\"line\">        // TODO Auto-generated constructor stub</div><div class=\"line\">        this.start = start;</div><div class=\"line\">        this.end = end;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    @Override</div><div class=\"line\">    public Integer call() throws Exception &#123;</div><div class=\"line\">        // TODO Auto-generated method stub</div><div class=\"line\">        int totalSum = 0;</div><div class=\"line\">        </div><div class=\"line\">        for(int i = start; i &lt;= end; i++)&#123;</div><div class=\"line\">            totalSum += i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        Thread.sleep(5000);</div><div class=\"line\">        </div><div class=\"line\">        return totalSum;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>参考了这个例子，我就改造了导出的那段代码，1w2数据从原来的6-8s 到现在的2-3s，虽然不是很多，但是也是一大进步，后来想了下，时间其实就花在了查询的sql，如果sql 再继续优化下去的的话应该可以突破到1s执行返回的。但因为还有新需求要进行，我就不再细究下去了。</p>\n</li>\n<li><p>改造的时候，同样我也是根据查询的数据量来新建任务执行，使用了for循环，本来公司已经提供了线程池fixedPool(100)的，我就不用自己再创建了。</p>\n</li>\n</ul>\n<h3 id=\"出现的问题\"><a href=\"#出现的问题\" class=\"headerlink\" title=\"出现的问题\"></a>出现的问题</h3><ul>\n<li>future 没有表示返回来的这堆数据是谁的<br>于是我就对返回变量进行了修改，返回一个map，标识这个数据是我的，后面根据map的key获取数据。</li>\n<li>size 数据量的大小影响任务的执行<br>查询数据使用了limit 字段每次查询1000 2000 3000 500 这几个size 都试过，似乎值越大越好，一次查询数据量比多次查询数据量效率要高。因为3000恐怕生产环境的数据会比较多，后来我就改成了2000。  </li>\n<li>mysql 索引 不合理<br>索引建不好，导致查询sql也是很慢的，查询的那个表使用了多列索引，问题就出在这了，使用sql的执行计划看了下，查询的字段虽然有索引但是没有使用到，因为多列索引的第一个不是我的查询字段，导致查询效率会有小小的降低，我也没跟负责人说，毕竟也不是很大的问题，差的时间不是很多。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"线程优化\"><a href=\"#线程优化\" class=\"headerlink\" title=\"线程优化\"></a>线程优化</h2><p>  昨天看到一同事的导出代码，单线程，看着就觉得还是差了点东西。然后就想进行一番改造，然后就找来了future和callable。<br>  <strong><br>      Callable接口类似于Runnable，从名字就可以看出来了，但是Runnable不会返回结果，并且无法抛出返回结果的异常，而Callable功能更强大一些，被线程执行后，可以返回值，这个返回值可以被Future拿到，也就是说，Future可以拿到异步执行任务的返回值。\n  </strong></p>\n<p>  简单来说就是一个是执行任务，然后它带着任务执行的结果回来。</p>\n<h3 id=\"简单看下下面的demo\"><a href=\"#简单看下下面的demo\" class=\"headerlink\" title=\"简单看下下面的demo\"></a>简单看下下面的demo</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.concurrent.Callable;</div><div class=\"line\">import java.util.concurrent.ExecutionException;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.Executors;</div><div class=\"line\">import java.util.concurrent.Future;</div><div class=\"line\"></div><div class=\"line\">public class demo&#123;</div><div class=\"line\">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</div><div class=\"line\">        ExecutorService executor = Executors.newCachedThreadPool();</div><div class=\"line\">        ArrayList&lt;Future&lt;Integer&gt;&gt; resultList = new ArrayList&lt;&gt;();</div><div class=\"line\">        </div><div class=\"line\">        //创建并提交任务1</div><div class=\"line\">        AddNumberTask task1 = new AddNumberTask(1, 5000);</div><div class=\"line\">        Future&lt;Integer&gt; future1 = executor.submit(task1);</div><div class=\"line\">        resultList.add(future1);</div><div class=\"line\">        </div><div class=\"line\">        //创建并提交任务2</div><div class=\"line\">        AddNumberTask task2 = new AddNumberTask(5001, 10000);</div><div class=\"line\">        Future&lt;Integer&gt; future2 = executor.submit(task2);</div><div class=\"line\">        resultList.add(future2);</div><div class=\"line\">        </div><div class=\"line\">        executor.shutdown();</div><div class=\"line\">        </div><div class=\"line\">        int total = 0;</div><div class=\"line\">        </div><div class=\"line\">        for(Future&lt;Integer&gt; future : resultList)&#123;</div><div class=\"line\">            while(true)&#123;</div><div class=\"line\">                if(future.isDone() &amp;&amp; !future.isCancelled())&#123;</div><div class=\"line\">                    int sum = future.get();</div><div class=\"line\">                    total += sum;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else&#123;</div><div class=\"line\">                    Thread.sleep(100);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        System.out.println(&quot;total sum is &quot; + total);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class AddNumberTask implements Callable&lt;Integer&gt;&#123;</div><div class=\"line\">    private int start;</div><div class=\"line\">    private int end;</div><div class=\"line\">    </div><div class=\"line\">    public AddNumberTask(int start, int end) &#123;</div><div class=\"line\">        // TODO Auto-generated constructor stub</div><div class=\"line\">        this.start = start;</div><div class=\"line\">        this.end = end;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    @Override</div><div class=\"line\">    public Integer call() throws Exception &#123;</div><div class=\"line\">        // TODO Auto-generated method stub</div><div class=\"line\">        int totalSum = 0;</div><div class=\"line\">        </div><div class=\"line\">        for(int i = start; i &lt;= end; i++)&#123;</div><div class=\"line\">            totalSum += i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        Thread.sleep(5000);</div><div class=\"line\">        </div><div class=\"line\">        return totalSum;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>参考了这个例子，我就改造了导出的那段代码，1w2数据从原来的6-8s 到现在的2-3s，虽然不是很多，但是也是一大进步，后来想了下，时间其实就花在了查询的sql，如果sql 再继续优化下去的的话应该可以突破到1s执行返回的。但因为还有新需求要进行，我就不再细究下去了。</p>\n</li>\n<li><p>改造的时候，同样我也是根据查询的数据量来新建任务执行，使用了for循环，本来公司已经提供了线程池fixedPool(100)的，我就不用自己再创建了。</p>\n</li>\n</ul>\n<h3 id=\"出现的问题\"><a href=\"#出现的问题\" class=\"headerlink\" title=\"出现的问题\"></a>出现的问题</h3><ul>\n<li>future 没有表示返回来的这堆数据是谁的<br>于是我就对返回变量进行了修改，返回一个map，标识这个数据是我的，后面根据map的key获取数据。</li>\n<li>size 数据量的大小影响任务的执行<br>查询数据使用了limit 字段每次查询1000 2000 3000 500 这几个size 都试过，似乎值越大越好，一次查询数据量比多次查询数据量效率要高。因为3000恐怕生产环境的数据会比较多，后来我就改成了2000。  </li>\n<li>mysql 索引 不合理<br>索引建不好，导致查询sql也是很慢的，查询的那个表使用了多列索引，问题就出在这了，使用sql的执行计划看了下，查询的字段虽然有索引但是没有使用到，因为多列索引的第一个不是我的查询字段，导致查询效率会有小小的降低，我也没跟负责人说，毕竟也不是很大的问题，差的时间不是很多。</li>\n</ul>\n"},{"title":"使用Hexo+Git+Nodejs搭建个人博客","date":"2016-09-11T09:34:41.000Z","_content":"&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用`&emsp;&emsp;`反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。\n## Git\n- 首先也是必须要注册一个[Git](https://github.com/ \"github\")，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，**名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名**![参考](/img/git1.png)  创建完成后，需要git客户端，客户端下载就不说了，百度都有。\n\n## NodeJs\n&emsp;&emsp;首先要安装[nodejs](https://nodejs.org/download/)挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令  \n`mpn -v`  \n查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。\n## Hexo\n- 正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令  \n`npm install -g hexo`   \n安装hexo，速度的快慢要看你的网速了。  \n\n- 执行初始化hexo,命令：  \n`hexo init`  \n- 启动本地服务命令：  \n`hexo server`（hexo s也可以）  \n- 浏览器输入http://localhost:4000  \n\n**浏览器有出现hexo的主题页面**，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。\n\n\n## 配置Github\n- 找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：\n```deploy:\n    type: git  \n    repository: git@github.com:wenthywang/wenthywang.github.io.git  \n    branch: master\n```\n- 执行命令：\n`\nnpm install hexo-deployer-git --save\n`\n***网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。***\n\n- 执行配置命令：\n`\nhexo deploy(hexo d)\n`\n- 浏览器中输入```http://wenthywang.github.io/```就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了\n\n## 部署步骤\n\n三步走：\n\n- hexo clean\n\n- hexo generate(hexo g)\n\n- hexo deploy(hexo d)\n\n## 常用命令\n\n- hexo new\"postName\" #新建文章\n\n- hexo new page\"pageName\" #新建页面\n\n- hexo generate #生成静态页面至public目录\n\n- hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\n- hexo deploy #将.deploy目录部署到GitHub\n\n- hexo help # 查看帮助\n\n- hexo version #查看Hexo的版本\n","source":"_posts/Hexo_blog.md","raw":"---\ntitle: 使用Hexo+Git+Nodejs搭建个人博客\ndate: 2016-09-11 17:34:41\ntags: \n- Hexo\ncategories: \n- 笔记 \n---\n&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用`&emsp;&emsp;`反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。\n## Git\n- 首先也是必须要注册一个[Git](https://github.com/ \"github\")，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，**名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名**![参考](/img/git1.png)  创建完成后，需要git客户端，客户端下载就不说了，百度都有。\n\n## NodeJs\n&emsp;&emsp;首先要安装[nodejs](https://nodejs.org/download/)挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令  \n`mpn -v`  \n查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。\n## Hexo\n- 正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令  \n`npm install -g hexo`   \n安装hexo，速度的快慢要看你的网速了。  \n\n- 执行初始化hexo,命令：  \n`hexo init`  \n- 启动本地服务命令：  \n`hexo server`（hexo s也可以）  \n- 浏览器输入http://localhost:4000  \n\n**浏览器有出现hexo的主题页面**，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。\n\n\n## 配置Github\n- 找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：\n```deploy:\n    type: git  \n    repository: git@github.com:wenthywang/wenthywang.github.io.git  \n    branch: master\n```\n- 执行命令：\n`\nnpm install hexo-deployer-git --save\n`\n***网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。***\n\n- 执行配置命令：\n`\nhexo deploy(hexo d)\n`\n- 浏览器中输入```http://wenthywang.github.io/```就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了\n\n## 部署步骤\n\n三步走：\n\n- hexo clean\n\n- hexo generate(hexo g)\n\n- hexo deploy(hexo d)\n\n## 常用命令\n\n- hexo new\"postName\" #新建文章\n\n- hexo new page\"pageName\" #新建页面\n\n- hexo generate #生成静态页面至public目录\n\n- hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\n- hexo deploy #将.deploy目录部署到GitHub\n\n- hexo help # 查看帮助\n\n- hexo version #查看Hexo的版本\n","slug":"Hexo_blog","published":1,"updated":"2016-09-18T06:41:39.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66f000d1gfpjrv8e9sp","content":"<p>&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用<code>&amp;emsp;&amp;emsp;</code>反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。</p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><ul>\n<li>首先也是必须要注册一个<a href=\"https://github.com/\" title=\"github\" target=\"_blank\" rel=\"external\">Git</a>，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，<strong>名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名</strong><img src=\"/img/git1.png\" alt=\"参考\">  创建完成后，需要git客户端，客户端下载就不说了，百度都有。</li>\n</ul>\n<h2 id=\"NodeJs\"><a href=\"#NodeJs\" class=\"headerlink\" title=\"NodeJs\"></a>NodeJs</h2><p>&emsp;&emsp;首先要安装<a href=\"https://nodejs.org/download/\" target=\"_blank\" rel=\"external\">nodejs</a>挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令<br><code>mpn -v</code><br>查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ul>\n<li><p>正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令<br><code>npm install -g hexo</code><br>安装hexo，速度的快慢要看你的网速了。  </p>\n</li>\n<li><p>执行初始化hexo,命令：<br><code>hexo init</code>  </p>\n</li>\n<li>启动本地服务命令：<br><code>hexo server</code>（hexo s也可以）  </li>\n<li>浏览器输入<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>  </li>\n</ul>\n<p><strong>浏览器有出现hexo的主题页面</strong>，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。</p>\n<h2 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h2><ul>\n<li><p>找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">type: git  </div><div class=\"line\">repository: git@github.com:wenthywang/wenthywang.github.io.git  </div><div class=\"line\">branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行命令：<br><code>npm install hexo-deployer-git --save</code><br><strong><em>网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。</em></strong></p>\n</li>\n<li><p>执行配置命令：<br><code>hexo deploy(hexo d)</code></p>\n</li>\n<li>浏览器中输入<code>http://wenthywang.github.io/</code>就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了</li>\n</ul>\n<h2 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h2><p>三步走：</p>\n<ul>\n<li><p>hexo clean</p>\n</li>\n<li><p>hexo generate(hexo g)</p>\n</li>\n<li><p>hexo deploy(hexo d)</p>\n</li>\n</ul>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li><p>hexo new”postName” #新建文章</p>\n</li>\n<li><p>hexo new page”pageName” #新建页面</p>\n</li>\n<li><p>hexo generate #生成静态页面至public目录</p>\n</li>\n<li><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n</li>\n<li><p>hexo deploy #将.deploy目录部署到GitHub</p>\n</li>\n<li><p>hexo help # 查看帮助</p>\n</li>\n<li><p>hexo version #查看Hexo的版本</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>&emsp;&emsp;处于好奇，看到别人搞自己的博客，自己也想尝试一番，没想到，弄着弄着就喜欢上了，有时候真是挡也挡不住。遇到的问题也是甚多。刚才发现md的语法原来没有两个空格的，网上有说法使用<code>&amp;emsp;&amp;emsp;</code>反正我是这么用了，因为我用不了输入法的全角的两个空格，我的输入法是win10自带的输入法，所以如果某f有输入法可以尝试一下哦。好了，废话不说了。上教程。</p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><ul>\n<li>首先也是必须要注册一个<a href=\"https://github.com/\" title=\"github\">Git</a>，注册流程就不多说了，反正都是一样了，然后就新增一个Repository，<strong>名字必须是XXX.github.io,也必须是master主干，xxx是你的git的用户名</strong><img src=\"/img/git1.png\" alt=\"参考\">  创建完成后，需要git客户端，客户端下载就不说了，百度都有。</li>\n</ul>\n<h2 id=\"NodeJs\"><a href=\"#NodeJs\" class=\"headerlink\" title=\"NodeJs\"></a>NodeJs</h2><p>&emsp;&emsp;首先要安装<a href=\"https://nodejs.org/download/\">nodejs</a>挺多版本的 我的npm是1.4.28版本 作用是生成一些静态的html，安装成功后 可输入命令<br><code>mpn -v</code><br>查看当前版本 如果查看不了 证明安装失败，那就要重新安装了。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><ul>\n<li><p>正式安装Hexo 建立文件夹hexo，切换到当前文件夹下，输入命令<br><code>npm install -g hexo</code><br>安装hexo，速度的快慢要看你的网速了。  </p>\n</li>\n<li><p>执行初始化hexo,命令：<br><code>hexo init</code>  </p>\n</li>\n<li>启动本地服务命令：<br><code>hexo server</code>（hexo s也可以）  </li>\n<li>浏览器输入<a href=\"http://localhost:4000\">http://localhost:4000</a>  </li>\n</ul>\n<p><strong>浏览器有出现hexo的主题页面</strong>，证明安装成功了，若没出现，可以看下哪里配置出问题，一般是没有问题的。</p>\n<h2 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h2><ul>\n<li><p>找到hexo的配置文件_config.yml,这个文件在hexo的根目录下，打开配置文件。进行如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">type: git  </div><div class=\"line\">repository: git@github.com:wenthywang/wenthywang.github.io.git  </div><div class=\"line\">branch: master</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行命令：<br><code>npm install hexo-deployer-git --save</code><br><strong><em>网上会有很多说法，有的type是github, 还有repository最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.2.2，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。</em></strong></p>\n</li>\n<li><p>执行配置命令：<br><code>hexo deploy(hexo d)</code></p>\n</li>\n<li>浏览器中输入<code>http://wenthywang.github.io/</code>就行了，我的github的账户叫wenthywang,把这个改成你github的账户名就行了</li>\n</ul>\n<h2 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h2><p>三步走：</p>\n<ul>\n<li><p>hexo clean</p>\n</li>\n<li><p>hexo generate(hexo g)</p>\n</li>\n<li><p>hexo deploy(hexo d)</p>\n</li>\n</ul>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li><p>hexo new”postName” #新建文章</p>\n</li>\n<li><p>hexo new page”pageName” #新建页面</p>\n</li>\n<li><p>hexo generate #生成静态页面至public目录</p>\n</li>\n<li><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n</li>\n<li><p>hexo deploy #将.deploy目录部署到GitHub</p>\n</li>\n<li><p>hexo help # 查看帮助</p>\n</li>\n<li><p>hexo version #查看Hexo的版本</p>\n</li>\n</ul>\n"},{"title":"Mybatis调用存储过程报错","date":"2016-09-20T04:13:41.000Z","_content":" ## Mybatis调用存储过程\n ### 贴码\n``` bash\nError querying database.  Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with \"noAccessToProcedureBodies=true\" to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.\n The error may exist in resources/mapper/AgentStatisDao.xml\n The error may involve com.jiaxincloud.gw.statistics.dao.statistics.AgentStatisDao.callAgentVisitorManualStatisProcedure\n The error occurred while executing a query\n SQL: {CALL PRO_AGENT_VISITOR_MANUAL_STATIS(?,?,?)}\n Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with \"noAccessToProcedureBodies=true\" to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.\n```\n\n\n### 总结\n跟着这个错误在网上找了一下，原来是该用户没有调用存储过程的权限，所以只要赋予proc的权限即可，亲测成功。在MySql中执行如下命令，授予权限。(user@host 是连接数据库的用户名，修改成连接数据库的用户名就行)\n``` bash\n    grant select on mysql.proc to user@host;\n    flush privileges;\n``` \n","source":"_posts/Mybatis_error.md","raw":"---\ntitle: Mybatis调用存储过程报错\ndate: 2016-09-20 12:13:41\ntags: \n- Mybatis\n- 存储过程\ncategories: \n- Mybatis\n- 问题\n---\n ## Mybatis调用存储过程\n ### 贴码\n``` bash\nError querying database.  Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with \"noAccessToProcedureBodies=true\" to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.\n The error may exist in resources/mapper/AgentStatisDao.xml\n The error may involve com.jiaxincloud.gw.statistics.dao.statistics.AgentStatisDao.callAgentVisitorManualStatisProcedure\n The error occurred while executing a query\n SQL: {CALL PRO_AGENT_VISITOR_MANUAL_STATIS(?,?,?)}\n Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with \"noAccessToProcedureBodies=true\" to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.\n```\n\n\n### 总结\n跟着这个错误在网上找了一下，原来是该用户没有调用存储过程的权限，所以只要赋予proc的权限即可，亲测成功。在MySql中执行如下命令，授予权限。(user@host 是连接数据库的用户名，修改成连接数据库的用户名就行)\n``` bash\n    grant select on mysql.proc to user@host;\n    flush privileges;\n``` \n","slug":"Mybatis_error","published":1,"updated":"2016-09-20T04:23:43.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66g000e1gfp1qh1xjt6","content":"<h2 id=\"Mybatis调用存储过程\"><a href=\"#Mybatis调用存储过程\" class=\"headerlink\" title=\"Mybatis调用存储过程\"></a>Mybatis调用存储过程</h2><h3 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error querying database.  Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class=\"string\">\"noAccessToProcedureBodies=true\"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</div><div class=\"line\"> The error may exist <span class=\"keyword\">in</span> resources/mapper/AgentStatisDao.xml</div><div class=\"line\"> The error may involve com.jiaxincloud.gw.statistics.dao.statistics.AgentStatisDao.callAgentVisitorManualStatisProcedure</div><div class=\"line\"> The error occurred <span class=\"keyword\">while</span> executing a query</div><div class=\"line\"> SQL: &#123;CALL PRO_AGENT_VISITOR_MANUAL_STATIS(?,?,?)&#125;</div><div class=\"line\"> Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class=\"string\">\"noAccessToProcedureBodies=true\"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>跟着这个错误在网上找了一下，原来是该用户没有调用存储过程的权限，所以只要赋予proc的权限即可，亲测成功。在MySql中执行如下命令，授予权限。(user@host 是连接数据库的用户名，修改成连接数据库的用户名就行)</p>\n<pre><code class=\"bash\">grant select on mysql.proc to user@host;\nflush privileges;\n</code></pre>\n","excerpt":"","more":"<h2 id=\"Mybatis调用存储过程\"><a href=\"#Mybatis调用存储过程\" class=\"headerlink\" title=\"Mybatis调用存储过程\"></a>Mybatis调用存储过程</h2><h3 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error querying database.  Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class=\"string\">\"noAccessToProcedureBodies=true\"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</div><div class=\"line\"> The error may exist <span class=\"keyword\">in</span> resources/mapper/AgentStatisDao.xml</div><div class=\"line\"> The error may involve com.jiaxincloud.gw.statistics.dao.statistics.AgentStatisDao.callAgentVisitorManualStatisProcedure</div><div class=\"line\"> The error occurred <span class=\"keyword\">while</span> executing a query</div><div class=\"line\"> SQL: &#123;CALL PRO_AGENT_VISITOR_MANUAL_STATIS(?,?,?)&#125;</div><div class=\"line\"> Cause: java.sql.SQLException: User does not have access to metadata required to determine stored procedure parameter types. If rights can not be granted, configure connection with <span class=\"string\">\"noAccessToProcedureBodies=true\"</span> to have driver generate parameters that represent INOUT strings irregardless of actual parameter types.</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>跟着这个错误在网上找了一下，原来是该用户没有调用存储过程的权限，所以只要赋予proc的权限即可，亲测成功。在MySql中执行如下命令，授予权限。(user@host 是连接数据库的用户名，修改成连接数据库的用户名就行)</p>\n<pre><code class=\"bash\">grant select on mysql.proc to user@host;\nflush privileges;\n</code></pre>\n"},{"title":"项目中POI导出出现HTML特殊符号的实体--已解决","date":"2016-07-28T14:37:07.000Z","_content":"## 问题：\n \t导出excel 时出现 类似这样的&gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。\n\n## 废话不说,贴码：\n``` bash\n  /**\n*转换html特殊符号。\n* @param content 需要转换的html特殊符号\n* @param defaultName 默认返回值\n* @return 转化后实际的符号\n*/\npublic static String transferHtml(String content, String defaultName) {\nif(content==null) return defaultName; \nString html = content;\nhtml = StringUtils.replace(html, \"&quot;\", \"\\\"\");\nhtml = StringUtils.replace(html, \"&lt;\", \"<\");\nhtml = StringUtils.replace(html, \"&gt;\", \">\");\nhtml = StringUtils.replace(html, \"&gt;\", \">\");\nhtml = StringUtils.replace(html, \"&sim;\", \"~\");\nhtml = StringUtils.replace(html, \"&and;\", \"^\");\nhtml = StringUtils.replace(html, \"&hellip;\", \"...\");\nreturn html;\n}\n```\n\n\n\n### 总结\n\tStringUtils用的是apach的工具类。\n另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。\n\n具体就参考 [**String自带replaceAll和StringUtils工具类replace区别**](http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html)    这博主分析得挺不错的。\n\n另外我也度了一下html特殊符号的对照表，具体参考 [**HTML 特殊符号编码对照表**](http://tool.chinaz.com/tools/htmlchar.aspx)\n\n\t总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。\n","source":"_posts/POI_error.md","raw":"---\ntitle:  项目中POI导出出现HTML特殊符号的实体--已解决\ndate: 2016-07-28 22:37:07\ntags: \n- Java\n- POI\n- 特殊符号\ncategories: \n- Java\n- 问题\n---\n## 问题：\n \t导出excel 时出现 类似这样的&gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。\n\n## 废话不说,贴码：\n``` bash\n  /**\n*转换html特殊符号。\n* @param content 需要转换的html特殊符号\n* @param defaultName 默认返回值\n* @return 转化后实际的符号\n*/\npublic static String transferHtml(String content, String defaultName) {\nif(content==null) return defaultName; \nString html = content;\nhtml = StringUtils.replace(html, \"&quot;\", \"\\\"\");\nhtml = StringUtils.replace(html, \"&lt;\", \"<\");\nhtml = StringUtils.replace(html, \"&gt;\", \">\");\nhtml = StringUtils.replace(html, \"&gt;\", \">\");\nhtml = StringUtils.replace(html, \"&sim;\", \"~\");\nhtml = StringUtils.replace(html, \"&and;\", \"^\");\nhtml = StringUtils.replace(html, \"&hellip;\", \"...\");\nreturn html;\n}\n```\n\n\n\n### 总结\n\tStringUtils用的是apach的工具类。\n另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。\n\n具体就参考 [**String自带replaceAll和StringUtils工具类replace区别**](http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html)    这博主分析得挺不错的。\n\n另外我也度了一下html特殊符号的对照表，具体参考 [**HTML 特殊符号编码对照表**](http://tool.chinaz.com/tools/htmlchar.aspx)\n\n\t总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。\n","slug":"POI_error","published":1,"updated":"2016-09-08T02:17:56.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66i000h1gfp808e3rwx","content":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><pre><code>导出excel 时出现 类似这样的&amp;gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。\n</code></pre><h2 id=\"废话不说-贴码：\"><a href=\"#废话不说-贴码：\" class=\"headerlink\" title=\"废话不说,贴码：\"></a>废话不说,贴码：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  /**</div><div class=\"line\">*转换html特殊符号。</div><div class=\"line\">* @param content 需要转换的html特殊符号</div><div class=\"line\">* @param defaultName 默认返回值</div><div class=\"line\">* @<span class=\"built_in\">return</span> 转化后实际的符号</div><div class=\"line\">*/</div><div class=\"line\">public static String transferHtml(String content, String defaultName) &#123;</div><div class=\"line\"><span class=\"keyword\">if</span>(content==null) <span class=\"built_in\">return</span> defaultName; </div><div class=\"line\">String html = content;</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;quot;\"</span>, <span class=\"string\">\"\\\"\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;lt;\"</span>, <span class=\"string\">\"&lt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;gt;\"</span>, <span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;gt;\"</span>, <span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;sim;\"</span>, <span class=\"string\">\"~\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;and;\"</span>, <span class=\"string\">\"^\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;hellip;\"</span>, <span class=\"string\">\"...\"</span>);</div><div class=\"line\"><span class=\"built_in\">return</span> html;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><pre><code>StringUtils用的是apach的工具类。\n</code></pre><p>另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。</p>\n<p>具体就参考 <a href=\"http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html\" target=\"_blank\" rel=\"external\"><strong>String自带replaceAll和StringUtils工具类replace区别</strong></a>    这博主分析得挺不错的。</p>\n<p>另外我也度了一下html特殊符号的对照表，具体参考 <a href=\"http://tool.chinaz.com/tools/htmlchar.aspx\" target=\"_blank\" rel=\"external\"><strong>HTML 特殊符号编码对照表</strong></a></p>\n<pre><code>总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。\n</code></pre>","excerpt":"","more":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><pre><code>导出excel 时出现 类似这样的&amp;gt;符号，大概是存到数据库也是这样，然后jsp解析可以解析出来，但是java不认得，需要个人写出解析方法。\n</code></pre><h2 id=\"废话不说-贴码：\"><a href=\"#废话不说-贴码：\" class=\"headerlink\" title=\"废话不说,贴码：\"></a>废话不说,贴码：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">  /**</div><div class=\"line\">*转换html特殊符号。</div><div class=\"line\">* @param content 需要转换的html特殊符号</div><div class=\"line\">* @param defaultName 默认返回值</div><div class=\"line\">* @<span class=\"built_in\">return</span> 转化后实际的符号</div><div class=\"line\">*/</div><div class=\"line\">public static String transferHtml(String content, String defaultName) &#123;</div><div class=\"line\"><span class=\"keyword\">if</span>(content==null) <span class=\"built_in\">return</span> defaultName; </div><div class=\"line\">String html = content;</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;quot;\"</span>, <span class=\"string\">\"\\\"\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;lt;\"</span>, <span class=\"string\">\"&lt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;gt;\"</span>, <span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;gt;\"</span>, <span class=\"string\">\"&gt;\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;sim;\"</span>, <span class=\"string\">\"~\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;and;\"</span>, <span class=\"string\">\"^\"</span>);</div><div class=\"line\">html = StringUtils.replace(html, <span class=\"string\">\"&amp;hellip;\"</span>, <span class=\"string\">\"...\"</span>);</div><div class=\"line\"><span class=\"built_in\">return</span> html;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><pre><code>StringUtils用的是apach的工具类。\n</code></pre><p>另外，我也找过度娘，对比了一下StringUtils的replace和String自带的replaceAll方法。</p>\n<p>具体就参考 <a href=\"http://blog.sina.com.cn/s/blog_8f99a1640102v6q2.html\"><strong>String自带replaceAll和StringUtils工具类replace区别</strong></a>    这博主分析得挺不错的。</p>\n<p>另外我也度了一下html特殊符号的对照表，具体参考 <a href=\"http://tool.chinaz.com/tools/htmlchar.aspx\"><strong>HTML 特殊符号编码对照表</strong></a></p>\n<pre><code>总结：根据个人需要把某些常用的特殊符号解析添加到自己的项目中去。\n</code></pre>"},{"title":"SpringMVC静态资源加载出错--未解决","date":"2016-02-19T14:55:44.000Z","_content":"## 问题：\n\t使用mvc：resource配置\n\n\tweb.xml配置是rest风格的/\n\n服务器启动没问题 访问地址是报404\n\n\t另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。\n\n希望有大神来解答一下\n\n","source":"_posts/SpringMVC_error.md","raw":"---\ntitle: SpringMVC静态资源加载出错--未解决\ndate: 2016-02-19 22:55:44\ntags: \n- Java\n- SpringMVC \n- 静态资源\ncategories: \n- Java\n- SpringMVC \n- 问题\n---\n## 问题：\n\t使用mvc：resource配置\n\n\tweb.xml配置是rest风格的/\n\n服务器启动没问题 访问地址是报404\n\n\t另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。\n\n希望有大神来解答一下\n\n","slug":"SpringMVC_error","published":1,"updated":"2016-09-08T02:17:33.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66j000i1gfppevovp07","content":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><pre><code>使用mvc：resource配置\n\nweb.xml配置是rest风格的/\n</code></pre><p>服务器启动没问题 访问地址是报404</p>\n<pre><code>另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。\n</code></pre><p>希望有大神来解答一下</p>\n","excerpt":"","more":"<h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><pre><code>使用mvc：resource配置\n\nweb.xml配置是rest风格的/\n</code></pre><p>服务器启动没问题 访问地址是报404</p>\n<pre><code>另外用了default-servlet的方法加载，服务器启动没错，jsp页面加载静态资源要使用绝对路径才能加载，使用相对路径都加载不了。\n</code></pre><p>希望有大神来解答一下</p>\n"},{"title":"Centos7安装Redis","date":"2018-04-08T08:30:41.000Z","_content":"安装环境：CentOS7 64位、Redis-4.0.8\n\n----------\n# 下载安装包\n- 切换到安装目录\n`cd /usr/local/`\n- 添加安装目录\n`mkdir redis`\n- 切换安装目录\n`cd redis`\n- 下载安装包\n`wget http://download.redis.io/releases/redis-4.0.8.tar.gz`\n- 解压\n`tar xzf redis-4.0.8.tar.gz`  \n\n# 安装gcc\n如果不安装gcc 编译redis会报错![error](/img/error.png)  \n`yum install gcc`\n# 编译安装\n`cd redis/redis-4.0.8/`\n`make MALLOC=libc` \nRedis并没有自己实现内存池，没有在标准的系统内存分配器上再加上自己的东西。所以需要配置内存分配。\n不执行以上命令编译会报下面的错![error](/img/error1.png)  \n编译redis\n`cd src && make install`![redis](/img/redis-1.png)  \n\n# 启动redis\n`./redis-server`\n![redis](/img/redis-2.png)  \n如上图：redis启动成功，但是这种启动方式需要一直打开窗口，不能进行其他操作，不太方便。\n## 以后台进程方式启动redis\n - 修改redis.conf文件\n`vim /usr/local/redis/redis-4.0.8/redis.conf`\n将`daemonize no` 改为`daemonize yes`\n - 指定redis.conf启动\n `./redis-server /usr/local/redis/redis-4.0.8/redis.conf`\n### 设置redis 开机启动\n - 在/etc目录下新建redis目录\n  `mkdir redis`\n - 复制redis 配置文件\n  `cp /usr/local/redis/redis-4.0.8/redis.conf /etc/redis/6379.conf`\n - 复制redis 脚本到启动脚本目录中\n  `cp /usr/local/redis/redis-4.0.8/utils/redis_init_script /etc/init.d/redisd`\n - 切换到自启目录\n `cd /etc/init.d`\n `chkconfig redisd on`\n 会显示`service redisd does not support chkconfig　`\n看结果是redisd不支持chkconfig  \n\n解决方法：\n使用vim编辑redisd文件，在第一行加入如下两行注释，保存退出\n`# chkconfig:   2345 90 10`\n`# description:  Redis is a persistent key-value database`\n注释的意思是，redis服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是10。\n再次执行开机自启命令，成功\n`chkconfig redisd on`\n# 服务启动\n现在可以直接已服务的形式启动和关闭redis了\n启动：\n`service redisd start`\n![redis](/img/redis-3.png)  \n关闭：\n`service redisd stop`\n![redis](/img/redis-4.png) \n\n# 过程中的问题\n## service redisd stop出现以下问题\n>Stopping ...\n(error) NOAUTH Authentication required.  \n\n解决方法：因为我在配置redis 时候 配置了密码连接 所以 出现上面的问题,如果不配置 则不需要以下配置。修改启动脚本\n`vim /etc/init.d/redisd`\n增加密码设置变量,密码是你设置的redis密码\n![redis](/img/redis-5.png)  \n\n## service启动或者关闭时出现以下问题\n> /var/run/redis_6379.pid exists, process is already running or crashed  \n\n解决方法：出现这个问题是因为redis 关闭不正常，导致文件没有被删除掉。\n执行以下命令即可删除\n`rm -rf /var/run/redis_6379.pid`\n ","source":"_posts/Centos7安装Redis.md","raw":"---\ntitle: Centos7安装Redis\ndate: 2018-04-08 16:30:41\ntags: \n- Linux\n- Redis\ncategories: \n- 笔记 \n---\n安装环境：CentOS7 64位、Redis-4.0.8\n\n----------\n# 下载安装包\n- 切换到安装目录\n`cd /usr/local/`\n- 添加安装目录\n`mkdir redis`\n- 切换安装目录\n`cd redis`\n- 下载安装包\n`wget http://download.redis.io/releases/redis-4.0.8.tar.gz`\n- 解压\n`tar xzf redis-4.0.8.tar.gz`  \n\n# 安装gcc\n如果不安装gcc 编译redis会报错![error](/img/error.png)  \n`yum install gcc`\n# 编译安装\n`cd redis/redis-4.0.8/`\n`make MALLOC=libc` \nRedis并没有自己实现内存池，没有在标准的系统内存分配器上再加上自己的东西。所以需要配置内存分配。\n不执行以上命令编译会报下面的错![error](/img/error1.png)  \n编译redis\n`cd src && make install`![redis](/img/redis-1.png)  \n\n# 启动redis\n`./redis-server`\n![redis](/img/redis-2.png)  \n如上图：redis启动成功，但是这种启动方式需要一直打开窗口，不能进行其他操作，不太方便。\n## 以后台进程方式启动redis\n - 修改redis.conf文件\n`vim /usr/local/redis/redis-4.0.8/redis.conf`\n将`daemonize no` 改为`daemonize yes`\n - 指定redis.conf启动\n `./redis-server /usr/local/redis/redis-4.0.8/redis.conf`\n### 设置redis 开机启动\n - 在/etc目录下新建redis目录\n  `mkdir redis`\n - 复制redis 配置文件\n  `cp /usr/local/redis/redis-4.0.8/redis.conf /etc/redis/6379.conf`\n - 复制redis 脚本到启动脚本目录中\n  `cp /usr/local/redis/redis-4.0.8/utils/redis_init_script /etc/init.d/redisd`\n - 切换到自启目录\n `cd /etc/init.d`\n `chkconfig redisd on`\n 会显示`service redisd does not support chkconfig　`\n看结果是redisd不支持chkconfig  \n\n解决方法：\n使用vim编辑redisd文件，在第一行加入如下两行注释，保存退出\n`# chkconfig:   2345 90 10`\n`# description:  Redis is a persistent key-value database`\n注释的意思是，redis服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是10。\n再次执行开机自启命令，成功\n`chkconfig redisd on`\n# 服务启动\n现在可以直接已服务的形式启动和关闭redis了\n启动：\n`service redisd start`\n![redis](/img/redis-3.png)  \n关闭：\n`service redisd stop`\n![redis](/img/redis-4.png) \n\n# 过程中的问题\n## service redisd stop出现以下问题\n>Stopping ...\n(error) NOAUTH Authentication required.  \n\n解决方法：因为我在配置redis 时候 配置了密码连接 所以 出现上面的问题,如果不配置 则不需要以下配置。修改启动脚本\n`vim /etc/init.d/redisd`\n增加密码设置变量,密码是你设置的redis密码\n![redis](/img/redis-5.png)  \n\n## service启动或者关闭时出现以下问题\n> /var/run/redis_6379.pid exists, process is already running or crashed  \n\n解决方法：出现这个问题是因为redis 关闭不正常，导致文件没有被删除掉。\n执行以下命令即可删除\n`rm -rf /var/run/redis_6379.pid`\n ","slug":"Centos7安装Redis","published":1,"updated":"2018-04-09T03:42:59.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66l000m1gfpxco6ez4g","content":"<p>安装环境：CentOS7 64位、Redis-4.0.8</p>\n<hr>\n<h1 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h1><ul>\n<li>切换到安装目录<br><code>cd /usr/local/</code></li>\n<li>添加安装目录<br><code>mkdir redis</code></li>\n<li>切换安装目录<br><code>cd redis</code></li>\n<li>下载安装包<br><code>wget http://download.redis.io/releases/redis-4.0.8.tar.gz</code></li>\n<li>解压<br><code>tar xzf redis-4.0.8.tar.gz</code>  </li>\n</ul>\n<h1 id=\"安装gcc\"><a href=\"#安装gcc\" class=\"headerlink\" title=\"安装gcc\"></a>安装gcc</h1><p>如果不安装gcc 编译redis会报错<img src=\"/img/error.png\" alt=\"error\"><br><code>yum install gcc</code></p>\n<h1 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h1><p><code>cd redis/redis-4.0.8/</code><br><code>make MALLOC=libc</code><br>Redis并没有自己实现内存池，没有在标准的系统内存分配器上再加上自己的东西。所以需要配置内存分配。<br>不执行以上命令编译会报下面的错<img src=\"/img/error1.png\" alt=\"error\"><br>编译redis<br><code>cd src &amp;&amp; make install</code><img src=\"/img/redis-1.png\" alt=\"redis\">  </p>\n<h1 id=\"启动redis\"><a href=\"#启动redis\" class=\"headerlink\" title=\"启动redis\"></a>启动redis</h1><p><code>./redis-server</code><br><img src=\"/img/redis-2.png\" alt=\"redis\"><br>如上图：redis启动成功，但是这种启动方式需要一直打开窗口，不能进行其他操作，不太方便。</p>\n<h2 id=\"以后台进程方式启动redis\"><a href=\"#以后台进程方式启动redis\" class=\"headerlink\" title=\"以后台进程方式启动redis\"></a>以后台进程方式启动redis</h2><ul>\n<li>修改redis.conf文件<br><code>vim /usr/local/redis/redis-4.0.8/redis.conf</code><br>将<code>daemonize no</code> 改为<code>daemonize yes</code></li>\n<li>指定redis.conf启动<br><code>./redis-server /usr/local/redis/redis-4.0.8/redis.conf</code><h3 id=\"设置redis-开机启动\"><a href=\"#设置redis-开机启动\" class=\"headerlink\" title=\"设置redis 开机启动\"></a>设置redis 开机启动</h3></li>\n<li>在/etc目录下新建redis目录<br><code>mkdir redis</code></li>\n<li>复制redis 配置文件<br><code>cp /usr/local/redis/redis-4.0.8/redis.conf /etc/redis/6379.conf</code></li>\n<li>复制redis 脚本到启动脚本目录中<br><code>cp /usr/local/redis/redis-4.0.8/utils/redis_init_script /etc/init.d/redisd</code></li>\n<li>切换到自启目录<br><code>cd /etc/init.d</code><br><code>chkconfig redisd on</code><br>会显示<code>service redisd does not support chkconfig</code><br>看结果是redisd不支持chkconfig  </li>\n</ul>\n<p>解决方法：<br>使用vim编辑redisd文件，在第一行加入如下两行注释，保存退出<br><code># chkconfig:   2345 90 10</code><br><code># description:  Redis is a persistent key-value database</code><br>注释的意思是，redis服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是10。<br>再次执行开机自启命令，成功<br><code>chkconfig redisd on</code></p>\n<h1 id=\"服务启动\"><a href=\"#服务启动\" class=\"headerlink\" title=\"服务启动\"></a>服务启动</h1><p>现在可以直接已服务的形式启动和关闭redis了<br>启动：<br><code>service redisd start</code><br><img src=\"/img/redis-3.png\" alt=\"redis\"><br>关闭：<br><code>service redisd stop</code><br><img src=\"/img/redis-4.png\" alt=\"redis\"> </p>\n<h1 id=\"过程中的问题\"><a href=\"#过程中的问题\" class=\"headerlink\" title=\"过程中的问题\"></a>过程中的问题</h1><h2 id=\"service-redisd-stop出现以下问题\"><a href=\"#service-redisd-stop出现以下问题\" class=\"headerlink\" title=\"service redisd stop出现以下问题\"></a>service redisd stop出现以下问题</h2><blockquote>\n<p>Stopping …<br>(error) NOAUTH Authentication required.  </p>\n</blockquote>\n<p>解决方法：因为我在配置redis 时候 配置了密码连接 所以 出现上面的问题,如果不配置 则不需要以下配置。修改启动脚本<br><code>vim /etc/init.d/redisd</code><br>增加密码设置变量,密码是你设置的redis密码<br><img src=\"/img/redis-5.png\" alt=\"redis\">  </p>\n<h2 id=\"service启动或者关闭时出现以下问题\"><a href=\"#service启动或者关闭时出现以下问题\" class=\"headerlink\" title=\"service启动或者关闭时出现以下问题\"></a>service启动或者关闭时出现以下问题</h2><blockquote>\n<p>/var/run/redis_6379.pid exists, process is already running or crashed  </p>\n</blockquote>\n<p>解决方法：出现这个问题是因为redis 关闭不正常，导致文件没有被删除掉。<br>执行以下命令即可删除<br><code>rm -rf /var/run/redis_6379.pid</code></p>\n","excerpt":"","more":"<p>安装环境：CentOS7 64位、Redis-4.0.8</p>\n<hr>\n<h1 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h1><ul>\n<li>切换到安装目录<br><code>cd /usr/local/</code></li>\n<li>添加安装目录<br><code>mkdir redis</code></li>\n<li>切换安装目录<br><code>cd redis</code></li>\n<li>下载安装包<br><code>wget http://download.redis.io/releases/redis-4.0.8.tar.gz</code></li>\n<li>解压<br><code>tar xzf redis-4.0.8.tar.gz</code>  </li>\n</ul>\n<h1 id=\"安装gcc\"><a href=\"#安装gcc\" class=\"headerlink\" title=\"安装gcc\"></a>安装gcc</h1><p>如果不安装gcc 编译redis会报错<img src=\"/img/error.png\" alt=\"error\"><br><code>yum install gcc</code></p>\n<h1 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h1><p><code>cd redis/redis-4.0.8/</code><br><code>make MALLOC=libc</code><br>Redis并没有自己实现内存池，没有在标准的系统内存分配器上再加上自己的东西。所以需要配置内存分配。<br>不执行以上命令编译会报下面的错<img src=\"/img/error1.png\" alt=\"error\"><br>编译redis<br><code>cd src &amp;&amp; make install</code><img src=\"/img/redis-1.png\" alt=\"redis\">  </p>\n<h1 id=\"启动redis\"><a href=\"#启动redis\" class=\"headerlink\" title=\"启动redis\"></a>启动redis</h1><p><code>./redis-server</code><br><img src=\"/img/redis-2.png\" alt=\"redis\"><br>如上图：redis启动成功，但是这种启动方式需要一直打开窗口，不能进行其他操作，不太方便。</p>\n<h2 id=\"以后台进程方式启动redis\"><a href=\"#以后台进程方式启动redis\" class=\"headerlink\" title=\"以后台进程方式启动redis\"></a>以后台进程方式启动redis</h2><ul>\n<li>修改redis.conf文件<br><code>vim /usr/local/redis/redis-4.0.8/redis.conf</code><br>将<code>daemonize no</code> 改为<code>daemonize yes</code></li>\n<li>指定redis.conf启动<br><code>./redis-server /usr/local/redis/redis-4.0.8/redis.conf</code><h3 id=\"设置redis-开机启动\"><a href=\"#设置redis-开机启动\" class=\"headerlink\" title=\"设置redis 开机启动\"></a>设置redis 开机启动</h3></li>\n<li>在/etc目录下新建redis目录<br><code>mkdir redis</code></li>\n<li>复制redis 配置文件<br><code>cp /usr/local/redis/redis-4.0.8/redis.conf /etc/redis/6379.conf</code></li>\n<li>复制redis 脚本到启动脚本目录中<br><code>cp /usr/local/redis/redis-4.0.8/utils/redis_init_script /etc/init.d/redisd</code></li>\n<li>切换到自启目录<br><code>cd /etc/init.d</code><br><code>chkconfig redisd on</code><br>会显示<code>service redisd does not support chkconfig</code><br>看结果是redisd不支持chkconfig  </li>\n</ul>\n<p>解决方法：<br>使用vim编辑redisd文件，在第一行加入如下两行注释，保存退出<br><code># chkconfig:   2345 90 10</code><br><code># description:  Redis is a persistent key-value database</code><br>注释的意思是，redis服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是10。<br>再次执行开机自启命令，成功<br><code>chkconfig redisd on</code></p>\n<h1 id=\"服务启动\"><a href=\"#服务启动\" class=\"headerlink\" title=\"服务启动\"></a>服务启动</h1><p>现在可以直接已服务的形式启动和关闭redis了<br>启动：<br><code>service redisd start</code><br><img src=\"/img/redis-3.png\" alt=\"redis\"><br>关闭：<br><code>service redisd stop</code><br><img src=\"/img/redis-4.png\" alt=\"redis\"> </p>\n<h1 id=\"过程中的问题\"><a href=\"#过程中的问题\" class=\"headerlink\" title=\"过程中的问题\"></a>过程中的问题</h1><h2 id=\"service-redisd-stop出现以下问题\"><a href=\"#service-redisd-stop出现以下问题\" class=\"headerlink\" title=\"service redisd stop出现以下问题\"></a>service redisd stop出现以下问题</h2><blockquote>\n<p>Stopping …<br>(error) NOAUTH Authentication required.  </p>\n</blockquote>\n<p>解决方法：因为我在配置redis 时候 配置了密码连接 所以 出现上面的问题,如果不配置 则不需要以下配置。修改启动脚本<br><code>vim /etc/init.d/redisd</code><br>增加密码设置变量,密码是你设置的redis密码<br><img src=\"/img/redis-5.png\" alt=\"redis\">  </p>\n<h2 id=\"service启动或者关闭时出现以下问题\"><a href=\"#service启动或者关闭时出现以下问题\" class=\"headerlink\" title=\"service启动或者关闭时出现以下问题\"></a>service启动或者关闭时出现以下问题</h2><blockquote>\n<p>/var/run/redis_6379.pid exists, process is already running or crashed  </p>\n</blockquote>\n<p>解决方法：出现这个问题是因为redis 关闭不正常，导致文件没有被删除掉。<br>执行以下命令即可删除<br><code>rm -rf /var/run/redis_6379.pid</code></p>\n"},{"title":"SpringMVC报错","date":"2016-01-11T15:03:41.000Z","_content":" ## spring 报错\n ### 贴码\n``` bash\n  org.springframework.core.convert.ConversionFailedException: Failed to convert from type java.util.ArrayList<?> to type java.util.List<org.springframework.core.io.Resource> for value '[/img/]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type org.springframework.core.io.Resource\nat org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)\nat org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)\nat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)\nat org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)\nat org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)\nat org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)\nat org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)\nat org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)\nat org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)\nat org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)\nat org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)\nat org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)\nat javax.servlet.GenericServlet.init(GenericServlet.java:158)\nat org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)\nat org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)\nat org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)\nat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)\nat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\nat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)\nat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\nat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\nat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)\nat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\nat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)\nat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)\nat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:620)\nat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\nat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\nat java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type org.springframework.core.io.Resource\nat org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)\nat org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)\nat org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)\nat org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)\n... 42 more\n```\n\n\n### 总结\n我在springmvc.xml配置了mvc：resoure，配置信息如下：\n``` bash\n<mvc:resources location=\"/js/\" mapping=\"/js/**\"/>\n<mvc:resources location=\"/img/\" mapping=\"/img/**\"/>\n``` \n如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？\n\n网上找不到解决的办法。求好心人能帮忙解答\n","source":"_posts/SpringMVC_erro1.md","raw":"---\ntitle: SpringMVC报错\ndate: 2016-01-11 23:03:41\ntags: \n- Java\n- SpringMVC\n- 静态资源\ncategories: \n- Java \n- SpringMVC\n- 问题\n---\n ## spring 报错\n ### 贴码\n``` bash\n  org.springframework.core.convert.ConversionFailedException: Failed to convert from type java.util.ArrayList<?> to type java.util.List<org.springframework.core.io.Resource> for value '[/img/]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type org.springframework.core.io.Resource\nat org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)\nat org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)\nat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)\nat org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)\nat org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)\nat org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:295)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)\nat org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)\nat org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)\nat org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)\nat org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)\nat org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)\nat org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)\nat javax.servlet.GenericServlet.init(GenericServlet.java:158)\nat org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)\nat org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)\nat org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)\nat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)\nat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\nat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)\nat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\nat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)\nat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)\nat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\nat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)\nat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)\nat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:620)\nat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\nat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\nat java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type java.lang.String to type org.springframework.core.io.Resource\nat org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)\nat org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)\nat org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)\nat org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)\n... 42 more\n```\n\n\n### 总结\n我在springmvc.xml配置了mvc：resoure，配置信息如下：\n``` bash\n<mvc:resources location=\"/js/\" mapping=\"/js/**\"/>\n<mvc:resources location=\"/img/\" mapping=\"/img/**\"/>\n``` \n如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？\n\n网上找不到解决的办法。求好心人能帮忙解答\n","slug":"SpringMVC_erro1","published":1,"updated":"2016-09-08T02:17:08.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66n000n1gfpagpwmivs","content":"<h2 id=\"spring-报错\"><a href=\"#spring-报错\" class=\"headerlink\" title=\"spring 报错\"></a>spring 报错</h2><h3 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">  org.springframework.core.convert.ConversionFailedException: Failed to convert from <span class=\"built_in\">type</span> java.util.ArrayList&lt;?&gt; to <span class=\"built_in\">type</span> java.util.List&lt;org.springframework.core.io.Resource&gt; <span class=\"keyword\">for</span> value <span class=\"string\">'[/img/]'</span>; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class=\"built_in\">type</span> java.lang.String to <span class=\"built_in\">type</span> org.springframework.core.io.Resource</div><div class=\"line\">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)</div><div class=\"line\">at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory<span class=\"variable\">$1</span>.getObject(AbstractBeanFactory.java:295)</div><div class=\"line\">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)</div><div class=\"line\">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)</div><div class=\"line\">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)</div><div class=\"line\">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)</div><div class=\"line\">at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)</div><div class=\"line\">at javax.servlet.GenericServlet.init(GenericServlet.java:158)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)</div><div class=\"line\">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)</div><div class=\"line\">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)</div><div class=\"line\">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)</div><div class=\"line\">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</div><div class=\"line\">at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)</div><div class=\"line\">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</div><div class=\"line\">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)</div><div class=\"line\">at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)</div><div class=\"line\">at org.apache.coyote.AbstractProtocol<span class=\"variable\">$AbstractConnectionHandler</span>.process(AbstractProtocol.java:620)</div><div class=\"line\">at org.apache.tomcat.util.net.JIoEndpoint<span class=\"variable\">$SocketProcessor</span>.run(JIoEndpoint.java:316)</div><div class=\"line\">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class=\"line\">at java.util.concurrent.ThreadPoolExecutor<span class=\"variable\">$Worker</span>.run(ThreadPoolExecutor.java:615)</div><div class=\"line\">at org.apache.tomcat.util.threads.TaskThread<span class=\"variable\">$WrappingRunnable</span>.run(TaskThread.java:61)</div><div class=\"line\">at java.lang.Thread.run(Thread.java:745)</div><div class=\"line\">Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class=\"built_in\">type</span> java.lang.String to <span class=\"built_in\">type</span> org.springframework.core.io.Resource</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)</div><div class=\"line\">at org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)</div><div class=\"line\">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)</div><div class=\"line\">... 42 more</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>我在springmvc.xml配置了mvc：resoure，配置信息如下：</p>\n<pre><code class=\"bash\">&lt;mvc:resources location=<span class=\"string\">\"/js/\"</span> mapping=<span class=\"string\">\"/js/**\"</span>/&gt;\n&lt;mvc:resources location=<span class=\"string\">\"/img/\"</span> mapping=<span class=\"string\">\"/img/**\"</span>/&gt;\n</code></pre>\n<p>如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？</p>\n<p>网上找不到解决的办法。求好心人能帮忙解答</p>\n","excerpt":"","more":"<h2 id=\"spring-报错\"><a href=\"#spring-报错\" class=\"headerlink\" title=\"spring 报错\"></a>spring 报错</h2><h3 id=\"贴码\"><a href=\"#贴码\" class=\"headerlink\" title=\"贴码\"></a>贴码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">  org.springframework.core.convert.ConversionFailedException: Failed to convert from <span class=\"built_in\">type</span> java.util.ArrayList&lt;?&gt; to <span class=\"built_in\">type</span> java.util.List&lt;org.springframework.core.io.Resource&gt; <span class=\"keyword\">for</span> value <span class=\"string\">'[/img/]'</span>; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class=\"built_in\">type</span> java.lang.String to <span class=\"built_in\">type</span> org.springframework.core.io.Resource</div><div class=\"line\">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:41)</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:169)</div><div class=\"line\">at org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:161)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertIfNecessary(BeanWrapperImpl.java:450)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:496)</div><div class=\"line\">at org.springframework.beans.BeanWrapperImpl.convertForProperty(BeanWrapperImpl.java:490)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.convertForProperty(AbstractAutowireCapableBeanFactory.java:1437)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1396)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1132)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:522)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:461)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory<span class=\"variable\">$1</span>.getObject(AbstractBeanFactory.java:295)</div><div class=\"line\">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:292)</div><div class=\"line\">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)</div><div class=\"line\">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)</div><div class=\"line\">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)</div><div class=\"line\">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.configureAndRefreshWebApplicationContext(FrameworkServlet.java:647)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:598)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.createWebApplicationContext(FrameworkServlet.java:661)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.initWebApplicationContext(FrameworkServlet.java:517)</div><div class=\"line\">at org.springframework.web.servlet.FrameworkServlet.initServletBean(FrameworkServlet.java:458)</div><div class=\"line\">at org.springframework.web.servlet.HttpServletBean.init(HttpServletBean.java:138)</div><div class=\"line\">at javax.servlet.GenericServlet.init(GenericServlet.java:158)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1284)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1197)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:864)</div><div class=\"line\">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:134)</div><div class=\"line\">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)</div><div class=\"line\">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:505)</div><div class=\"line\">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)</div><div class=\"line\">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</div><div class=\"line\">at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:957)</div><div class=\"line\">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</div><div class=\"line\">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:423)</div><div class=\"line\">at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1079)</div><div class=\"line\">at org.apache.coyote.AbstractProtocol<span class=\"variable\">$AbstractConnectionHandler</span>.process(AbstractProtocol.java:620)</div><div class=\"line\">at org.apache.tomcat.util.net.JIoEndpoint<span class=\"variable\">$SocketProcessor</span>.run(JIoEndpoint.java:316)</div><div class=\"line\">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class=\"line\">at java.util.concurrent.ThreadPoolExecutor<span class=\"variable\">$Worker</span>.run(ThreadPoolExecutor.java:615)</div><div class=\"line\">at org.apache.tomcat.util.threads.TaskThread<span class=\"variable\">$WrappingRunnable</span>.run(TaskThread.java:61)</div><div class=\"line\">at java.lang.Thread.run(Thread.java:745)</div><div class=\"line\">Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from <span class=\"built_in\">type</span> java.lang.String to <span class=\"built_in\">type</span> org.springframework.core.io.Resource</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:276)</div><div class=\"line\">at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:172)</div><div class=\"line\">at org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:74)</div><div class=\"line\">at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35)</div><div class=\"line\">... 42 more</div></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>我在springmvc.xml配置了mvc：resoure，配置信息如下：</p>\n<pre><code class=\"bash\">&lt;mvc:resources location=<span class=\"string\">\"/js/\"</span> mapping=<span class=\"string\">\"/js/**\"</span>/&gt;\n&lt;mvc:resources location=<span class=\"string\">\"/img/\"</span> mapping=<span class=\"string\">\"/img/**\"</span>/&gt;\n</code></pre>\n<p>如上错误 ，用的是spring3.2的包，程序运行没问题，静态资源可以加载，但是不知道怎么会报这个错，求问怎么解决？？？</p>\n<p>网上找不到解决的办法。求好心人能帮忙解答</p>\n"},{"title":"elasticsearch 笔记","date":"2016-11-17T17:07:41.000Z","_content":" ## 初学elasticsearch\nelasticsearch，简称ES。**[百度百科](http://baike.baidu.com/link?url=dbviqnoOFYZYYSxYswZubLVUk-7WFiuR9tLb-DOC0sv0pHRHEkfsSw0--EdarpYBLdaqrAPw9YPHYl0mQA6TxoIMUIj7i3NDVMtGCKsjxYG)**\n> ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。\n我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一> 个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。\n\n\n### elasticsearch 安装\n- 安装elasticsearch简单，容易。我使用的es是2.4.1版本的，[elasticsearch下载](https://www.elastic.co/downloads/elasticsearch)。另外Java也是必须的，最好是1.7以上的版本，我用的是1.7的java版本的。\n- 下载好之后，打开根目录下的bin目录下的elasticsearch.bat，如下：\n![打开bat](/img/es1.png)![打开bat](/img/es2.png)  \n其实就是本地开了服务，跟web工程差不多。\n\n- 打开之后，就可以本地玩耍了。es默认使用9200，9300端口的，详细配置可以参考官方文档，也可以自己参详参详。在浏览器上输入``` localhost：9200 ``` 可见配置信息，以及开启信息，如下图：\n![打开bat](/img/es3.png)\n\n### elasticsearch插件安装\n- es有两个插件，一个是head的插件，可以看到es的集群状态。一个是sql插件，可以用类似sql的语句查询数据。具体的安装可以百度或者google查找哦。\n\n### 强大的Elasticsearch-sql\n- Elasticsearch-sql是一个强大的插件，界面上可以用sql查询，代码上可以用sql执行sql语句，相对于es的原生态，我还是比较喜欢这种sql开发的，因为一开始我是使用原生态的查询聚合查询，写得也DT的。后来加了sql插件，开发效率都提高了不少，但是使用起来也是有一定的限制。\n- group by 后面的字段不能为空\n- 字段类型需要groupby的需要设置not_analyzed 保证这个字段不分析，当出现一些特殊字符的时候，不加的话es会默认使用分析，分词功能，就达不到要的效果，当时也是纠结了好久才发现的。\n- 创建es链接麻烦，每次查询需要创建链接，没有连接池，虽然后面用了druid连接，似乎会出问题。\n- es put连接创建一次就好了，后来就使用了类加载，一次连接即可，减少多次连接造成的消耗。\n\n### 总结\n    使用还是很方便的，特别是用sql。不过对于业务复杂的似乎不怎么样，另外同时使用redis做缓存是最好不过了。\n    查询效率是很高，后期维护也是需要挺高的成本的。总体来说实时性还是挺强的，苦逼的我现在还在加班...\n    之前写了一半，今天就写完它吧，也是写得很急，有什么要交流的可以留言。或者加微信详聊哦。","source":"_posts/elasticsearch_1.md","raw":"---\ntitle: elasticsearch 笔记\ndate: 2016-11-18 01:07:41\ntags: \n- elasticsearch\n- 分布式\ncategories: \n- elasticsearch\n- 分布式\n---\n ## 初学elasticsearch\nelasticsearch，简称ES。**[百度百科](http://baike.baidu.com/link?url=dbviqnoOFYZYYSxYswZubLVUk-7WFiuR9tLb-DOC0sv0pHRHEkfsSw0--EdarpYBLdaqrAPw9YPHYl0mQA6TxoIMUIj7i3NDVMtGCKsjxYG)**\n> ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。\n我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一> 个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。\n\n\n### elasticsearch 安装\n- 安装elasticsearch简单，容易。我使用的es是2.4.1版本的，[elasticsearch下载](https://www.elastic.co/downloads/elasticsearch)。另外Java也是必须的，最好是1.7以上的版本，我用的是1.7的java版本的。\n- 下载好之后，打开根目录下的bin目录下的elasticsearch.bat，如下：\n![打开bat](/img/es1.png)![打开bat](/img/es2.png)  \n其实就是本地开了服务，跟web工程差不多。\n\n- 打开之后，就可以本地玩耍了。es默认使用9200，9300端口的，详细配置可以参考官方文档，也可以自己参详参详。在浏览器上输入``` localhost：9200 ``` 可见配置信息，以及开启信息，如下图：\n![打开bat](/img/es3.png)\n\n### elasticsearch插件安装\n- es有两个插件，一个是head的插件，可以看到es的集群状态。一个是sql插件，可以用类似sql的语句查询数据。具体的安装可以百度或者google查找哦。\n\n### 强大的Elasticsearch-sql\n- Elasticsearch-sql是一个强大的插件，界面上可以用sql查询，代码上可以用sql执行sql语句，相对于es的原生态，我还是比较喜欢这种sql开发的，因为一开始我是使用原生态的查询聚合查询，写得也DT的。后来加了sql插件，开发效率都提高了不少，但是使用起来也是有一定的限制。\n- group by 后面的字段不能为空\n- 字段类型需要groupby的需要设置not_analyzed 保证这个字段不分析，当出现一些特殊字符的时候，不加的话es会默认使用分析，分词功能，就达不到要的效果，当时也是纠结了好久才发现的。\n- 创建es链接麻烦，每次查询需要创建链接，没有连接池，虽然后面用了druid连接，似乎会出问题。\n- es put连接创建一次就好了，后来就使用了类加载，一次连接即可，减少多次连接造成的消耗。\n\n### 总结\n    使用还是很方便的，特别是用sql。不过对于业务复杂的似乎不怎么样，另外同时使用redis做缓存是最好不过了。\n    查询效率是很高，后期维护也是需要挺高的成本的。总体来说实时性还是挺强的，苦逼的我现在还在加班...\n    之前写了一半，今天就写完它吧，也是写得很急，有什么要交流的可以留言。或者加微信详聊哦。","slug":"elasticsearch_1","published":1,"updated":"2016-11-17T17:09:17.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66u000r1gfpkxi155qp","content":"<h2 id=\"初学elasticsearch\"><a href=\"#初学elasticsearch\" class=\"headerlink\" title=\"初学elasticsearch\"></a>初学elasticsearch</h2><p>elasticsearch，简称ES。<strong><a href=\"http://baike.baidu.com/link?url=dbviqnoOFYZYYSxYswZubLVUk-7WFiuR9tLb-DOC0sv0pHRHEkfsSw0--EdarpYBLdaqrAPw9YPHYl0mQA6TxoIMUIj7i3NDVMtGCKsjxYG\" target=\"_blank\" rel=\"external\">百度百科</a></strong></p>\n<blockquote>\n<p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。<br>我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一&gt; 个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。</p>\n</blockquote>\n<h3 id=\"elasticsearch-安装\"><a href=\"#elasticsearch-安装\" class=\"headerlink\" title=\"elasticsearch 安装\"></a>elasticsearch 安装</h3><ul>\n<li>安装elasticsearch简单，容易。我使用的es是2.4.1版本的，<a href=\"https://www.elastic.co/downloads/elasticsearch\" target=\"_blank\" rel=\"external\">elasticsearch下载</a>。另外Java也是必须的，最好是1.7以上的版本，我用的是1.7的java版本的。</li>\n<li><p>下载好之后，打开根目录下的bin目录下的elasticsearch.bat，如下：<br><img src=\"/img/es1.png\" alt=\"打开bat\"><img src=\"/img/es2.png\" alt=\"打开bat\"><br>其实就是本地开了服务，跟web工程差不多。</p>\n</li>\n<li><p>打开之后，就可以本地玩耍了。es默认使用9200，9300端口的，详细配置可以参考官方文档，也可以自己参详参详。在浏览器上输入<code>localhost：9200</code> 可见配置信息，以及开启信息，如下图：<br><img src=\"/img/es3.png\" alt=\"打开bat\"></p>\n</li>\n</ul>\n<h3 id=\"elasticsearch插件安装\"><a href=\"#elasticsearch插件安装\" class=\"headerlink\" title=\"elasticsearch插件安装\"></a>elasticsearch插件安装</h3><ul>\n<li>es有两个插件，一个是head的插件，可以看到es的集群状态。一个是sql插件，可以用类似sql的语句查询数据。具体的安装可以百度或者google查找哦。</li>\n</ul>\n<h3 id=\"强大的Elasticsearch-sql\"><a href=\"#强大的Elasticsearch-sql\" class=\"headerlink\" title=\"强大的Elasticsearch-sql\"></a>强大的Elasticsearch-sql</h3><ul>\n<li>Elasticsearch-sql是一个强大的插件，界面上可以用sql查询，代码上可以用sql执行sql语句，相对于es的原生态，我还是比较喜欢这种sql开发的，因为一开始我是使用原生态的查询聚合查询，写得也DT的。后来加了sql插件，开发效率都提高了不少，但是使用起来也是有一定的限制。</li>\n<li>group by 后面的字段不能为空</li>\n<li>字段类型需要groupby的需要设置not_analyzed 保证这个字段不分析，当出现一些特殊字符的时候，不加的话es会默认使用分析，分词功能，就达不到要的效果，当时也是纠结了好久才发现的。</li>\n<li>创建es链接麻烦，每次查询需要创建链接，没有连接池，虽然后面用了druid连接，似乎会出问题。</li>\n<li>es put连接创建一次就好了，后来就使用了类加载，一次连接即可，减少多次连接造成的消耗。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><pre><code>使用还是很方便的，特别是用sql。不过对于业务复杂的似乎不怎么样，另外同时使用redis做缓存是最好不过了。\n查询效率是很高，后期维护也是需要挺高的成本的。总体来说实时性还是挺强的，苦逼的我现在还在加班...\n之前写了一半，今天就写完它吧，也是写得很急，有什么要交流的可以留言。或者加微信详聊哦。\n</code></pre>","excerpt":"","more":"<h2 id=\"初学elasticsearch\"><a href=\"#初学elasticsearch\" class=\"headerlink\" title=\"初学elasticsearch\"></a>初学elasticsearch</h2><p>elasticsearch，简称ES。<strong><a href=\"http://baike.baidu.com/link?url=dbviqnoOFYZYYSxYswZubLVUk-7WFiuR9tLb-DOC0sv0pHRHEkfsSw0--EdarpYBLdaqrAPw9YPHYl0mQA6TxoIMUIj7i3NDVMtGCKsjxYG\">百度百科</a></strong></p>\n<blockquote>\n<p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。<br>我们建立一个网站或应用程序，并要添加搜索功能，令我们受打击的是：搜索工作是很难的。我们希望我们的搜索解决方案要快，我们希望有一个零配置和一个完全免费的搜索模式，我们希望能够简单地使用JSON通过HTTP的索引数据，我们希望我们的搜索服务器始终可用，我们希望能够一台开始并扩展到数百，我们要实时搜索，我们要简单的多租户，我们希望建立一&gt; 个云的解决方案。Elasticsearch旨在解决所有这些问题和更多的问题。</p>\n</blockquote>\n<h3 id=\"elasticsearch-安装\"><a href=\"#elasticsearch-安装\" class=\"headerlink\" title=\"elasticsearch 安装\"></a>elasticsearch 安装</h3><ul>\n<li>安装elasticsearch简单，容易。我使用的es是2.4.1版本的，<a href=\"https://www.elastic.co/downloads/elasticsearch\">elasticsearch下载</a>。另外Java也是必须的，最好是1.7以上的版本，我用的是1.7的java版本的。</li>\n<li><p>下载好之后，打开根目录下的bin目录下的elasticsearch.bat，如下：<br><img src=\"/img/es1.png\" alt=\"打开bat\"><img src=\"/img/es2.png\" alt=\"打开bat\"><br>其实就是本地开了服务，跟web工程差不多。</p>\n</li>\n<li><p>打开之后，就可以本地玩耍了。es默认使用9200，9300端口的，详细配置可以参考官方文档，也可以自己参详参详。在浏览器上输入<code>localhost：9200</code> 可见配置信息，以及开启信息，如下图：<br><img src=\"/img/es3.png\" alt=\"打开bat\"></p>\n</li>\n</ul>\n<h3 id=\"elasticsearch插件安装\"><a href=\"#elasticsearch插件安装\" class=\"headerlink\" title=\"elasticsearch插件安装\"></a>elasticsearch插件安装</h3><ul>\n<li>es有两个插件，一个是head的插件，可以看到es的集群状态。一个是sql插件，可以用类似sql的语句查询数据。具体的安装可以百度或者google查找哦。</li>\n</ul>\n<h3 id=\"强大的Elasticsearch-sql\"><a href=\"#强大的Elasticsearch-sql\" class=\"headerlink\" title=\"强大的Elasticsearch-sql\"></a>强大的Elasticsearch-sql</h3><ul>\n<li>Elasticsearch-sql是一个强大的插件，界面上可以用sql查询，代码上可以用sql执行sql语句，相对于es的原生态，我还是比较喜欢这种sql开发的，因为一开始我是使用原生态的查询聚合查询，写得也DT的。后来加了sql插件，开发效率都提高了不少，但是使用起来也是有一定的限制。</li>\n<li>group by 后面的字段不能为空</li>\n<li>字段类型需要groupby的需要设置not_analyzed 保证这个字段不分析，当出现一些特殊字符的时候，不加的话es会默认使用分析，分词功能，就达不到要的效果，当时也是纠结了好久才发现的。</li>\n<li>创建es链接麻烦，每次查询需要创建链接，没有连接池，虽然后面用了druid连接，似乎会出问题。</li>\n<li>es put连接创建一次就好了，后来就使用了类加载，一次连接即可，减少多次连接造成的消耗。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><pre><code>使用还是很方便的，特别是用sql。不过对于业务复杂的似乎不怎么样，另外同时使用redis做缓存是最好不过了。\n查询效率是很高，后期维护也是需要挺高的成本的。总体来说实时性还是挺强的，苦逼的我现在还在加班...\n之前写了一半，今天就写完它吧，也是写得很急，有什么要交流的可以留言。或者加微信详聊哦。\n</code></pre>"},{"title":"csv 笔记","date":"2016-12-02T12:40:41.000Z","_content":" ## csv初使用\nCOMMON-CSV**[官网](http://commons.apache.org/proper/commons-csv/)**\n> 项目中批量插入数据库使用的mybatis，在做数据导入的时候，觉得是mybatis的批量导入有问题，后来发现其实是没问题的。当时没看时间花费多少，就找到了common-csv来做测试，在知乎上也有很多人说用csv配合load data会很快，后来测试之后，其实感觉是差不多的，我的数据量是1000左右，可能在1w以上的数据就会出现差异，load data 这个东西感觉是效率很高，使用起来也是很方便，在项目中引用common-csv的jar包即可\n\n\n### 示例\n- mybatis xml 文件配置\n```\n<insert id=\"createOrdersByCsv\"   >\n    LOAD  DATA LOCAL INFILE #{filePath}\n   INTO TABLE wo_work_order_test\n   FIELDS   TERMINATED BY ','\n      lines terminated by '\\r\\n'\n(ID, ENTERPRISE_ID, ORDER_NO,CUSTOMER_ID,\nSTATUS,PRIORITY,SUBJECT,CONTENT,SOURCE,WORKGROUP,AGENT,IS_DELETE,\nSTRATEGY,HAS_FILES,DISPATCH_STATUS,BATCH_NO,CREATE_TIME,\nUPDATE_TIME,OVER_TIME,HANDING_OVER_TIME,OVER_TIME_FLAG,\nHANDING_OVER_TIME_FLAG,WG_RECEIVE_TIME,AG_RECEIVE_TIME);\n    </insert>\n```\n- java 代码生成csv文件\n```\n/**\n     * 通过Csv文件导入mySql数据库\n     * @param entities 实体list\n     * @return boolean 导入结果\n     */\n    private boolean createOrdersByCsv(List<OrderEntity>entities){\n        boolean result=false;\n        String filename = \"/usr/local/jiaxin_gw_container-1.0/tmp/\"+TimeUtils.getCurrentTimeStamp()+\"orders-tmp.csv\";\n        try {     \n        CSVFormat csvFileFormat = CSVFormat.RFC4180.withRecordSeparator(\"\\n\");// 创建CSVFormat\n\n        OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(filename),\"UTF-8\");\n        BufferedWriter bufferedWriter = new BufferedWriter(write);\n        CSVPrinter csvFilePrinter = new CSVPrinter(bufferedWriter, csvFileFormat);\n        StringBuilder recordStr = new StringBuilder();\n\n        for (OrderEntity entity : entities) {\n            recordStr.append(entity.getID() + \",\");\n            recordStr.append(entity.getEnterpriseID() + \",\");\n            recordStr.append(entity.getOrderNo() + \",\");\n            if(entity.getCustomerJID()==null){\n                recordStr.append(\"\\\\N\" + \",\");\n            }else{\n                recordStr.append(entity.getCustomerJID() + \",\");\n            }\n        \n            recordStr.append(entity.getStatus() + \",\");\n            recordStr.append(entity.getPriority() + \",\");\n            if(entity.getSubject()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getSubject() + \",\");\n            }\n        if(entity.getDescription()==null){\n            recordStr.append(\"\\\\N\" + \",\");\n        }else{\n            recordStr.append(entity.getDescription() + \",\");\n        }\n            \n            recordStr.append(entity.getSource() + \",\");\n\n            if(entity.getAcceptWkgroupJID()==null){\n                recordStr.append( \"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getAcceptWkgroupJID()+ \",\");\n            }\n \n            if(entity.getAcceptAgentJID()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getAcceptAgentJID() + \",\");\n            }\n        \n            recordStr.append(entity.getIsDelete() + \",\");\n            recordStr.append(entity.getDispatchStrategy() + \",\");\n            recordStr.append(entity.getHasAttach()+ \",\");\n            recordStr.append(entity.getDispatchStatus()+ \",\");\n            \n            recordStr.append(entity.getBatchNo()+ \",\");\n            recordStr.append(entity.getCreateTime()+ \",\");\n            recordStr.append(entity.getUpdateTime()+ \",\");\n            if(entity.getTimeoutTime()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getTimeoutTime()+ \",\"); \n            }\n        if(entity.getHandingOverTime()==null){\n            recordStr.append(\"\\\\N\"+ \",\");\n        }else{\n            recordStr.append(entity.getHandingOverTime()+ \",\");\n        }\n        \n            recordStr.append(entity.getOverTimeFlag()+ \",\");\n            recordStr.append(entity.getHandingOverTimeFlag());\n            recordStr.append(\"\\r\\n\");\n        }\n        \n                 recordStr.deleteCharAt(0);  \n                recordStr.deleteCharAt(recordStr.length()-1);  \n                csvFilePrinter.printRecord(recordStr.toString());  \n                recordStr.delete(0, recordStr.length()-1);  \n                csvFilePrinter.close();\n        orderDao.createOrdersByCsv(filename);\n        result=true;\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return result;\n    }\n```\n上面的\\\\N是null的String插入到mysql为null，如果不使用\\\\N，插入到数据库就是null的字符串，显然不对。\n\n### 总结\n 在使用过程中，生成csv文件中，产生的头尾双引号，还没有找到解决方法，所以导致插入数据库是有双引号的。\n 需要在api文档中找寻相关解决方法。这是一个问题。\n 还有就是分隔符的问题，导入的数据要是比较正常的数据还好，如果出现跟分割符相同的数据，会直接导致插入的数据90%的错误，这个是很严重的问题，所以用的时候要注意。","source":"_posts/common-csv.md","raw":"---\ntitle: csv 笔记\ndate: 2016-12-02 20:40:41\ntags: \n- csv\n- myslq\ncategories: \n- 笔记\n---\n ## csv初使用\nCOMMON-CSV**[官网](http://commons.apache.org/proper/commons-csv/)**\n> 项目中批量插入数据库使用的mybatis，在做数据导入的时候，觉得是mybatis的批量导入有问题，后来发现其实是没问题的。当时没看时间花费多少，就找到了common-csv来做测试，在知乎上也有很多人说用csv配合load data会很快，后来测试之后，其实感觉是差不多的，我的数据量是1000左右，可能在1w以上的数据就会出现差异，load data 这个东西感觉是效率很高，使用起来也是很方便，在项目中引用common-csv的jar包即可\n\n\n### 示例\n- mybatis xml 文件配置\n```\n<insert id=\"createOrdersByCsv\"   >\n    LOAD  DATA LOCAL INFILE #{filePath}\n   INTO TABLE wo_work_order_test\n   FIELDS   TERMINATED BY ','\n      lines terminated by '\\r\\n'\n(ID, ENTERPRISE_ID, ORDER_NO,CUSTOMER_ID,\nSTATUS,PRIORITY,SUBJECT,CONTENT,SOURCE,WORKGROUP,AGENT,IS_DELETE,\nSTRATEGY,HAS_FILES,DISPATCH_STATUS,BATCH_NO,CREATE_TIME,\nUPDATE_TIME,OVER_TIME,HANDING_OVER_TIME,OVER_TIME_FLAG,\nHANDING_OVER_TIME_FLAG,WG_RECEIVE_TIME,AG_RECEIVE_TIME);\n    </insert>\n```\n- java 代码生成csv文件\n```\n/**\n     * 通过Csv文件导入mySql数据库\n     * @param entities 实体list\n     * @return boolean 导入结果\n     */\n    private boolean createOrdersByCsv(List<OrderEntity>entities){\n        boolean result=false;\n        String filename = \"/usr/local/jiaxin_gw_container-1.0/tmp/\"+TimeUtils.getCurrentTimeStamp()+\"orders-tmp.csv\";\n        try {     \n        CSVFormat csvFileFormat = CSVFormat.RFC4180.withRecordSeparator(\"\\n\");// 创建CSVFormat\n\n        OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(filename),\"UTF-8\");\n        BufferedWriter bufferedWriter = new BufferedWriter(write);\n        CSVPrinter csvFilePrinter = new CSVPrinter(bufferedWriter, csvFileFormat);\n        StringBuilder recordStr = new StringBuilder();\n\n        for (OrderEntity entity : entities) {\n            recordStr.append(entity.getID() + \",\");\n            recordStr.append(entity.getEnterpriseID() + \",\");\n            recordStr.append(entity.getOrderNo() + \",\");\n            if(entity.getCustomerJID()==null){\n                recordStr.append(\"\\\\N\" + \",\");\n            }else{\n                recordStr.append(entity.getCustomerJID() + \",\");\n            }\n        \n            recordStr.append(entity.getStatus() + \",\");\n            recordStr.append(entity.getPriority() + \",\");\n            if(entity.getSubject()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getSubject() + \",\");\n            }\n        if(entity.getDescription()==null){\n            recordStr.append(\"\\\\N\" + \",\");\n        }else{\n            recordStr.append(entity.getDescription() + \",\");\n        }\n            \n            recordStr.append(entity.getSource() + \",\");\n\n            if(entity.getAcceptWkgroupJID()==null){\n                recordStr.append( \"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getAcceptWkgroupJID()+ \",\");\n            }\n \n            if(entity.getAcceptAgentJID()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getAcceptAgentJID() + \",\");\n            }\n        \n            recordStr.append(entity.getIsDelete() + \",\");\n            recordStr.append(entity.getDispatchStrategy() + \",\");\n            recordStr.append(entity.getHasAttach()+ \",\");\n            recordStr.append(entity.getDispatchStatus()+ \",\");\n            \n            recordStr.append(entity.getBatchNo()+ \",\");\n            recordStr.append(entity.getCreateTime()+ \",\");\n            recordStr.append(entity.getUpdateTime()+ \",\");\n            if(entity.getTimeoutTime()==null){\n                recordStr.append(\"\\\\N\"+ \",\");\n            }else{\n                recordStr.append(entity.getTimeoutTime()+ \",\"); \n            }\n        if(entity.getHandingOverTime()==null){\n            recordStr.append(\"\\\\N\"+ \",\");\n        }else{\n            recordStr.append(entity.getHandingOverTime()+ \",\");\n        }\n        \n            recordStr.append(entity.getOverTimeFlag()+ \",\");\n            recordStr.append(entity.getHandingOverTimeFlag());\n            recordStr.append(\"\\r\\n\");\n        }\n        \n                 recordStr.deleteCharAt(0);  \n                recordStr.deleteCharAt(recordStr.length()-1);  \n                csvFilePrinter.printRecord(recordStr.toString());  \n                recordStr.delete(0, recordStr.length()-1);  \n                csvFilePrinter.close();\n        orderDao.createOrdersByCsv(filename);\n        result=true;\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return result;\n    }\n```\n上面的\\\\N是null的String插入到mysql为null，如果不使用\\\\N，插入到数据库就是null的字符串，显然不对。\n\n### 总结\n 在使用过程中，生成csv文件中，产生的头尾双引号，还没有找到解决方法，所以导致插入数据库是有双引号的。\n 需要在api文档中找寻相关解决方法。这是一个问题。\n 还有就是分隔符的问题，导入的数据要是比较正常的数据还好，如果出现跟分割符相同的数据，会直接导致插入的数据90%的错误，这个是很严重的问题，所以用的时候要注意。","slug":"common-csv","published":1,"updated":"2016-12-02T12:59:14.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66v000u1gfpf2s7a72a","content":"<h2 id=\"csv初使用\"><a href=\"#csv初使用\" class=\"headerlink\" title=\"csv初使用\"></a>csv初使用</h2><p>COMMON-CSV<strong><a href=\"http://commons.apache.org/proper/commons-csv/\" target=\"_blank\" rel=\"external\">官网</a></strong></p>\n<blockquote>\n<p>项目中批量插入数据库使用的mybatis，在做数据导入的时候，觉得是mybatis的批量导入有问题，后来发现其实是没问题的。当时没看时间花费多少，就找到了common-csv来做测试，在知乎上也有很多人说用csv配合load data会很快，后来测试之后，其实感觉是差不多的，我的数据量是1000左右，可能在1w以上的数据就会出现差异，load data 这个东西感觉是效率很高，使用起来也是很方便，在项目中引用common-csv的jar包即可</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li><p>mybatis xml 文件配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;insert id=&quot;createOrdersByCsv&quot;   &gt;</div><div class=\"line\">    LOAD  DATA LOCAL INFILE #&#123;filePath&#125;</div><div class=\"line\">   INTO TABLE wo_work_order_test</div><div class=\"line\">   FIELDS   TERMINATED BY &apos;,&apos;</div><div class=\"line\">      lines terminated by &apos;\\r\\n&apos;</div><div class=\"line\">(ID, ENTERPRISE_ID, ORDER_NO,CUSTOMER_ID,</div><div class=\"line\">STATUS,PRIORITY,SUBJECT,CONTENT,SOURCE,WORKGROUP,AGENT,IS_DELETE,</div><div class=\"line\">STRATEGY,HAS_FILES,DISPATCH_STATUS,BATCH_NO,CREATE_TIME,</div><div class=\"line\">UPDATE_TIME,OVER_TIME,HANDING_OVER_TIME,OVER_TIME_FLAG,</div><div class=\"line\">HANDING_OVER_TIME_FLAG,WG_RECEIVE_TIME,AG_RECEIVE_TIME);</div><div class=\"line\">    &lt;/insert&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>java 代码生成csv文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">     * 通过Csv文件导入mySql数据库</div><div class=\"line\">     * @param entities 实体list</div><div class=\"line\">     * @return boolean 导入结果</div><div class=\"line\">     */</div><div class=\"line\">    private boolean createOrdersByCsv(List&lt;OrderEntity&gt;entities)&#123;</div><div class=\"line\">        boolean result=false;</div><div class=\"line\">        String filename = &quot;/usr/local/jiaxin_gw_container-1.0/tmp/&quot;+TimeUtils.getCurrentTimeStamp()+&quot;orders-tmp.csv&quot;;</div><div class=\"line\">        try &#123;     </div><div class=\"line\">        CSVFormat csvFileFormat = CSVFormat.RFC4180.withRecordSeparator(&quot;\\n&quot;);// 创建CSVFormat</div><div class=\"line\"></div><div class=\"line\">        OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(filename),&quot;UTF-8&quot;);</div><div class=\"line\">        BufferedWriter bufferedWriter = new BufferedWriter(write);</div><div class=\"line\">        CSVPrinter csvFilePrinter = new CSVPrinter(bufferedWriter, csvFileFormat);</div><div class=\"line\">        StringBuilder recordStr = new StringBuilder();</div><div class=\"line\"></div><div class=\"line\">        for (OrderEntity entity : entities) &#123;</div><div class=\"line\">            recordStr.append(entity.getID() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getEnterpriseID() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getOrderNo() + &quot;,&quot;);</div><div class=\"line\">            if(entity.getCustomerJID()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot; + &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getCustomerJID() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getStatus() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getPriority() + &quot;,&quot;);</div><div class=\"line\">            if(entity.getSubject()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getSubject() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        if(entity.getDescription()==null)&#123;</div><div class=\"line\">            recordStr.append(&quot;\\\\N&quot; + &quot;,&quot;);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            recordStr.append(entity.getDescription() + &quot;,&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">            recordStr.append(entity.getSource() + &quot;,&quot;);</div><div class=\"line\"></div><div class=\"line\">            if(entity.getAcceptWkgroupJID()==null)&#123;</div><div class=\"line\">                recordStr.append( &quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getAcceptWkgroupJID()+ &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            if(entity.getAcceptAgentJID()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getAcceptAgentJID() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getIsDelete() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getDispatchStrategy() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getHasAttach()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getDispatchStatus()+ &quot;,&quot;);</div><div class=\"line\">            </div><div class=\"line\">            recordStr.append(entity.getBatchNo()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getCreateTime()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getUpdateTime()+ &quot;,&quot;);</div><div class=\"line\">            if(entity.getTimeoutTime()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getTimeoutTime()+ &quot;,&quot;); </div><div class=\"line\">            &#125;</div><div class=\"line\">        if(entity.getHandingOverTime()==null)&#123;</div><div class=\"line\">            recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            recordStr.append(entity.getHandingOverTime()+ &quot;,&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getOverTimeFlag()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getHandingOverTimeFlag());</div><div class=\"line\">            recordStr.append(&quot;\\r\\n&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">                 recordStr.deleteCharAt(0);  </div><div class=\"line\">                recordStr.deleteCharAt(recordStr.length()-1);  </div><div class=\"line\">                csvFilePrinter.printRecord(recordStr.toString());  </div><div class=\"line\">                recordStr.delete(0, recordStr.length()-1);  </div><div class=\"line\">                csvFilePrinter.close();</div><div class=\"line\">        orderDao.createOrdersByCsv(filename);</div><div class=\"line\">        result=true;</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            // TODO Auto-generated catch block</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的\\N是null的String插入到mysql为null，如果不使用\\N，插入到数据库就是null的字符串，显然不对。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p> 在使用过程中，生成csv文件中，产生的头尾双引号，还没有找到解决方法，所以导致插入数据库是有双引号的。<br> 需要在api文档中找寻相关解决方法。这是一个问题。<br> 还有就是分隔符的问题，导入的数据要是比较正常的数据还好，如果出现跟分割符相同的数据，会直接导致插入的数据90%的错误，这个是很严重的问题，所以用的时候要注意。</p>\n","excerpt":"","more":"<h2 id=\"csv初使用\"><a href=\"#csv初使用\" class=\"headerlink\" title=\"csv初使用\"></a>csv初使用</h2><p>COMMON-CSV<strong><a href=\"http://commons.apache.org/proper/commons-csv/\">官网</a></strong></p>\n<blockquote>\n<p>项目中批量插入数据库使用的mybatis，在做数据导入的时候，觉得是mybatis的批量导入有问题，后来发现其实是没问题的。当时没看时间花费多少，就找到了common-csv来做测试，在知乎上也有很多人说用csv配合load data会很快，后来测试之后，其实感觉是差不多的，我的数据量是1000左右，可能在1w以上的数据就会出现差异，load data 这个东西感觉是效率很高，使用起来也是很方便，在项目中引用common-csv的jar包即可</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li><p>mybatis xml 文件配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;insert id=&quot;createOrdersByCsv&quot;   &gt;</div><div class=\"line\">    LOAD  DATA LOCAL INFILE #&#123;filePath&#125;</div><div class=\"line\">   INTO TABLE wo_work_order_test</div><div class=\"line\">   FIELDS   TERMINATED BY &apos;,&apos;</div><div class=\"line\">      lines terminated by &apos;\\r\\n&apos;</div><div class=\"line\">(ID, ENTERPRISE_ID, ORDER_NO,CUSTOMER_ID,</div><div class=\"line\">STATUS,PRIORITY,SUBJECT,CONTENT,SOURCE,WORKGROUP,AGENT,IS_DELETE,</div><div class=\"line\">STRATEGY,HAS_FILES,DISPATCH_STATUS,BATCH_NO,CREATE_TIME,</div><div class=\"line\">UPDATE_TIME,OVER_TIME,HANDING_OVER_TIME,OVER_TIME_FLAG,</div><div class=\"line\">HANDING_OVER_TIME_FLAG,WG_RECEIVE_TIME,AG_RECEIVE_TIME);</div><div class=\"line\">    &lt;/insert&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>java 代码生成csv文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">     * 通过Csv文件导入mySql数据库</div><div class=\"line\">     * @param entities 实体list</div><div class=\"line\">     * @return boolean 导入结果</div><div class=\"line\">     */</div><div class=\"line\">    private boolean createOrdersByCsv(List&lt;OrderEntity&gt;entities)&#123;</div><div class=\"line\">        boolean result=false;</div><div class=\"line\">        String filename = &quot;/usr/local/jiaxin_gw_container-1.0/tmp/&quot;+TimeUtils.getCurrentTimeStamp()+&quot;orders-tmp.csv&quot;;</div><div class=\"line\">        try &#123;     </div><div class=\"line\">        CSVFormat csvFileFormat = CSVFormat.RFC4180.withRecordSeparator(&quot;\\n&quot;);// 创建CSVFormat</div><div class=\"line\"></div><div class=\"line\">        OutputStreamWriter write = new OutputStreamWriter(new FileOutputStream(filename),&quot;UTF-8&quot;);</div><div class=\"line\">        BufferedWriter bufferedWriter = new BufferedWriter(write);</div><div class=\"line\">        CSVPrinter csvFilePrinter = new CSVPrinter(bufferedWriter, csvFileFormat);</div><div class=\"line\">        StringBuilder recordStr = new StringBuilder();</div><div class=\"line\"></div><div class=\"line\">        for (OrderEntity entity : entities) &#123;</div><div class=\"line\">            recordStr.append(entity.getID() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getEnterpriseID() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getOrderNo() + &quot;,&quot;);</div><div class=\"line\">            if(entity.getCustomerJID()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot; + &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getCustomerJID() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getStatus() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getPriority() + &quot;,&quot;);</div><div class=\"line\">            if(entity.getSubject()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getSubject() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        if(entity.getDescription()==null)&#123;</div><div class=\"line\">            recordStr.append(&quot;\\\\N&quot; + &quot;,&quot;);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            recordStr.append(entity.getDescription() + &quot;,&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">            </div><div class=\"line\">            recordStr.append(entity.getSource() + &quot;,&quot;);</div><div class=\"line\"></div><div class=\"line\">            if(entity.getAcceptWkgroupJID()==null)&#123;</div><div class=\"line\">                recordStr.append( &quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getAcceptWkgroupJID()+ &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            if(entity.getAcceptAgentJID()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getAcceptAgentJID() + &quot;,&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getIsDelete() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getDispatchStrategy() + &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getHasAttach()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getDispatchStatus()+ &quot;,&quot;);</div><div class=\"line\">            </div><div class=\"line\">            recordStr.append(entity.getBatchNo()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getCreateTime()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getUpdateTime()+ &quot;,&quot;);</div><div class=\"line\">            if(entity.getTimeoutTime()==null)&#123;</div><div class=\"line\">                recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                recordStr.append(entity.getTimeoutTime()+ &quot;,&quot;); </div><div class=\"line\">            &#125;</div><div class=\"line\">        if(entity.getHandingOverTime()==null)&#123;</div><div class=\"line\">            recordStr.append(&quot;\\\\N&quot;+ &quot;,&quot;);</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            recordStr.append(entity.getHandingOverTime()+ &quot;,&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">            recordStr.append(entity.getOverTimeFlag()+ &quot;,&quot;);</div><div class=\"line\">            recordStr.append(entity.getHandingOverTimeFlag());</div><div class=\"line\">            recordStr.append(&quot;\\r\\n&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">                 recordStr.deleteCharAt(0);  </div><div class=\"line\">                recordStr.deleteCharAt(recordStr.length()-1);  </div><div class=\"line\">                csvFilePrinter.printRecord(recordStr.toString());  </div><div class=\"line\">                recordStr.delete(0, recordStr.length()-1);  </div><div class=\"line\">                csvFilePrinter.close();</div><div class=\"line\">        orderDao.createOrdersByCsv(filename);</div><div class=\"line\">        result=true;</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            // TODO Auto-generated catch block</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>上面的\\N是null的String插入到mysql为null，如果不使用\\N，插入到数据库就是null的字符串，显然不对。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p> 在使用过程中，生成csv文件中，产生的头尾双引号，还没有找到解决方法，所以导致插入数据库是有双引号的。<br> 需要在api文档中找寻相关解决方法。这是一个问题。<br> 还有就是分隔符的问题，导入的数据要是比较正常的数据还好，如果出现跟分割符相同的数据，会直接导致插入的数据90%的错误，这个是很严重的问题，所以用的时候要注意。</p>\n"},{"title":"elasticsearch-sql-5.1.2笔记","date":"2017-03-27T08:43:41.000Z","_content":" ## elasticsearch-sql-5.1.2\n**[elasticsearch-sql](https://github.com/NLPchina/elasticsearch-sql)**\n> ElasticSearch-sql 是es的插件之一，通过类sql查询es。最近更新了最新的5.1.2版本，出现某些异常情况。使用groupby的时候查询的时候只有10条，出现这个问题，尝试了在issue找答案，找到了发送请求的时候要设置size的大小，而sql插件源码包里面写死了200和10，至于怎么找出来的，我也是在别人的博客里面看到的，**[blog](http://blog.csdn.net/wangyang_software/article/details/51791573)**。因此，通过修改源码重新打包即可解决我的问题（源码包就跟打好的jar包放一起，名字也写上了source，多贴心），修改两个位置,如下\nline 76:这个位置是最后一次查询条数，改成Integer.MAX_VALUE。\n```\n      if(select.getRowCount()>0) {\n                        ((TermsAggregationBuilder) lastAgg).size(Integer.MAX_VALUE);\n                    }\n```\nline 109:这个位置是重点，每次的子查询都要设置size，改成Integer.MAX_VALUE。\n```\n    AggregationBuilder subAgg = getGroupAgg(field, select);\n                      //ES5.0 termsaggregation with size = 0 not supported anymore\n                    if (subAgg instanceof TermsAggregationBuilder && !(field instanceof MethodField)) {\n                        ((TermsAggregationBuilder) subAgg).size(Integer.MAX_VALUE);\n                    }\n\n```\n里面注释也有说到，5.0以上已经不支持size为0的设置，所以要设置值，不设置的话默认是10。这个问题在线上已经出现了，先准备升级修复这个问题。另外，如果数据超出了Integer.MAX_VALUE，则需要加上更多的过滤条件，似乎超过了查询就会出问题了，这个问题并没有深究。\n\n\n\n### 总结\n> 找这个问题的过程虽然艰辛，学习的过程让我很快乐，同时我也在es讨论网站也发出相关问题，跟相关的es使用者一起讨论，得到他们的回答，我也是想当开心的。Anyaway ，发现看源码真的让自己学习了很多。**[discuss.elastic.co]( https://discuss.elastic.co/top/all)**\n\n   ","source":"_posts/elasticsearch_3.md","raw":"---\ntitle: elasticsearch-sql-5.1.2笔记\ndate: 2017-03-27 16:43:41\ntags: \n- elasticsearch-sql\n- group_by\ncategories: \n- elasticsearch\n- 分布式\n---\n ## elasticsearch-sql-5.1.2\n**[elasticsearch-sql](https://github.com/NLPchina/elasticsearch-sql)**\n> ElasticSearch-sql 是es的插件之一，通过类sql查询es。最近更新了最新的5.1.2版本，出现某些异常情况。使用groupby的时候查询的时候只有10条，出现这个问题，尝试了在issue找答案，找到了发送请求的时候要设置size的大小，而sql插件源码包里面写死了200和10，至于怎么找出来的，我也是在别人的博客里面看到的，**[blog](http://blog.csdn.net/wangyang_software/article/details/51791573)**。因此，通过修改源码重新打包即可解决我的问题（源码包就跟打好的jar包放一起，名字也写上了source，多贴心），修改两个位置,如下\nline 76:这个位置是最后一次查询条数，改成Integer.MAX_VALUE。\n```\n      if(select.getRowCount()>0) {\n                        ((TermsAggregationBuilder) lastAgg).size(Integer.MAX_VALUE);\n                    }\n```\nline 109:这个位置是重点，每次的子查询都要设置size，改成Integer.MAX_VALUE。\n```\n    AggregationBuilder subAgg = getGroupAgg(field, select);\n                      //ES5.0 termsaggregation with size = 0 not supported anymore\n                    if (subAgg instanceof TermsAggregationBuilder && !(field instanceof MethodField)) {\n                        ((TermsAggregationBuilder) subAgg).size(Integer.MAX_VALUE);\n                    }\n\n```\n里面注释也有说到，5.0以上已经不支持size为0的设置，所以要设置值，不设置的话默认是10。这个问题在线上已经出现了，先准备升级修复这个问题。另外，如果数据超出了Integer.MAX_VALUE，则需要加上更多的过滤条件，似乎超过了查询就会出问题了，这个问题并没有深究。\n\n\n\n### 总结\n> 找这个问题的过程虽然艰辛，学习的过程让我很快乐，同时我也在es讨论网站也发出相关问题，跟相关的es使用者一起讨论，得到他们的回答，我也是想当开心的。Anyaway ，发现看源码真的让自己学习了很多。**[discuss.elastic.co]( https://discuss.elastic.co/top/all)**\n\n   ","slug":"elasticsearch_3","published":1,"updated":"2017-03-27T09:13:37.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66w000y1gfpimf6e7b6","content":"<h2 id=\"elasticsearch-sql-5-1-2\"><a href=\"#elasticsearch-sql-5-1-2\" class=\"headerlink\" title=\"elasticsearch-sql-5.1.2\"></a>elasticsearch-sql-5.1.2</h2><p><strong><a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"external\">elasticsearch-sql</a></strong></p>\n<blockquote>\n<p>ElasticSearch-sql 是es的插件之一，通过类sql查询es。最近更新了最新的5.1.2版本，出现某些异常情况。使用groupby的时候查询的时候只有10条，出现这个问题，尝试了在issue找答案，找到了发送请求的时候要设置size的大小，而sql插件源码包里面写死了200和10，至于怎么找出来的，我也是在别人的博客里面看到的，<strong><a href=\"http://blog.csdn.net/wangyang_software/article/details/51791573\" target=\"_blank\" rel=\"external\">blog</a></strong>。因此，通过修改源码重新打包即可解决我的问题（源码包就跟打好的jar包放一起，名字也写上了source，多贴心），修改两个位置,如下<br>line 76:这个位置是最后一次查询条数，改成Integer.MAX_VALUE。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(select.getRowCount()&gt;0) &#123;</div><div class=\"line\">                  ((TermsAggregationBuilder) lastAgg).size(Integer.MAX_VALUE);</div><div class=\"line\">              &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>line 109:这个位置是重点，每次的子查询都要设置size，改成Integer.MAX_VALUE。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">AggregationBuilder subAgg = getGroupAgg(field, select);</div><div class=\"line\">                  //ES5.0 termsaggregation with size = 0 not supported anymore</div><div class=\"line\">                if (subAgg instanceof TermsAggregationBuilder &amp;&amp; !(field instanceof MethodField)) &#123;</div><div class=\"line\">                    ((TermsAggregationBuilder) subAgg).size(Integer.MAX_VALUE);</div><div class=\"line\">                &#125;</div></pre></td></tr></table></figure></p>\n<p>里面注释也有说到，5.0以上已经不支持size为0的设置，所以要设置值，不设置的话默认是10。这个问题在线上已经出现了，先准备升级修复这个问题。另外，如果数据超出了Integer.MAX_VALUE，则需要加上更多的过滤条件，似乎超过了查询就会出问题了，这个问题并没有深究。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>找这个问题的过程虽然艰辛，学习的过程让我很快乐，同时我也在es讨论网站也发出相关问题，跟相关的es使用者一起讨论，得到他们的回答，我也是想当开心的。Anyaway ，发现看源码真的让自己学习了很多。<strong><a href=\"https://discuss.elastic.co/top/all\" target=\"_blank\" rel=\"external\">discuss.elastic.co</a></strong></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"elasticsearch-sql-5-1-2\"><a href=\"#elasticsearch-sql-5-1-2\" class=\"headerlink\" title=\"elasticsearch-sql-5.1.2\"></a>elasticsearch-sql-5.1.2</h2><p><strong><a href=\"https://github.com/NLPchina/elasticsearch-sql\">elasticsearch-sql</a></strong></p>\n<blockquote>\n<p>ElasticSearch-sql 是es的插件之一，通过类sql查询es。最近更新了最新的5.1.2版本，出现某些异常情况。使用groupby的时候查询的时候只有10条，出现这个问题，尝试了在issue找答案，找到了发送请求的时候要设置size的大小，而sql插件源码包里面写死了200和10，至于怎么找出来的，我也是在别人的博客里面看到的，<strong><a href=\"http://blog.csdn.net/wangyang_software/article/details/51791573\">blog</a></strong>。因此，通过修改源码重新打包即可解决我的问题（源码包就跟打好的jar包放一起，名字也写上了source，多贴心），修改两个位置,如下<br>line 76:这个位置是最后一次查询条数，改成Integer.MAX_VALUE。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(select.getRowCount()&gt;0) &#123;</div><div class=\"line\">                  ((TermsAggregationBuilder) lastAgg).size(Integer.MAX_VALUE);</div><div class=\"line\">              &#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>line 109:这个位置是重点，每次的子查询都要设置size，改成Integer.MAX_VALUE。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">AggregationBuilder subAgg = getGroupAgg(field, select);</div><div class=\"line\">                  //ES5.0 termsaggregation with size = 0 not supported anymore</div><div class=\"line\">                if (subAgg instanceof TermsAggregationBuilder &amp;&amp; !(field instanceof MethodField)) &#123;</div><div class=\"line\">                    ((TermsAggregationBuilder) subAgg).size(Integer.MAX_VALUE);</div><div class=\"line\">                &#125;</div></pre></td></tr></table></figure></p>\n<p>里面注释也有说到，5.0以上已经不支持size为0的设置，所以要设置值，不设置的话默认是10。这个问题在线上已经出现了，先准备升级修复这个问题。另外，如果数据超出了Integer.MAX_VALUE，则需要加上更多的过滤条件，似乎超过了查询就会出问题了，这个问题并没有深究。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>找这个问题的过程虽然艰辛，学习的过程让我很快乐，同时我也在es讨论网站也发出相关问题，跟相关的es使用者一起讨论，得到他们的回答，我也是想当开心的。Anyaway ，发现看源码真的让自己学习了很多。<strong><a href=\"https://discuss.elastic.co/top/all\">discuss.elastic.co</a></strong></p>\n</blockquote>\n"},{"title":"linux下elasticsearch插件安装笔记(head,sql)","date":"2017-05-04T07:43:41.000Z","_content":"\n ## 说明\n 这里的版本是es5.1.2，不适用5.x以下，5.x以下是用插件的形式安装在es上面，具体看git。\n 安装的目录，和解压的目录都可以随便选的，但是为了统一管理，最好全部插件安装在es的根目录下（个人建议），因为我这里此前有人安装过相关的插件，分散在不同的目录，搞起来让我很懵逼。\n\n ## elasticsearch-head\ngithub链接 **[elasticsearch-head](https://github.com/mobz/elasticsearch-head)**\n head 插件在window安装跟linux安装操作步骤基本相似，这里就介绍linux下安装即可。\n1.首先需要git clone head 插件到本地，在linux上使用git命令也行，下载到本地再上传到linux服务器也行，哪方便行。\n2.安装npm：\n使用国外镜像会比较慢，所以使用淘宝镜像，很快的。\n```\nwget https://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.4.7-linux-x64.tar.gz\n```\n3.解压：\n```\ntar -zxvf node-v4.4.7-linux-x64.tar.gz\n```\n4.设置环境变量：<strong>这个步骤很重要<strong>,直接影响到npm安装是否正确\n```\nexport PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin\n```\n  这个opt是刚才解压的目录，这个一定不要错。\n5.查看npm版本：\n\n```\nnpm -v\n```\n\n 看下有没有版本号，有的话就没问题了。没有的话应该是环境变量出问题了，先看下当前环境变量\n\n ```\n echo $PATH\n ```\n\n 有上一步的安装目录的话，就没有问题了，这时候需要你重新设置环境变量\n\n ```\n export PATH=把刚才path的值拷贝过来就可以了\n ```\n\n然后重新npm -v 看下，如果还是不行，建议重新安装npm。  \n  \n另外还有一个很奇葩的东西，不知道是不是linux自带了node，会导致环境变量有问题，如果发现自带的node，请务必要删掉，然后重新设置PATH。  \n\n另外装完npm之后可以装n插件，这个插件可以更新最新版本的node，具体详情可以bing一下。\n\n6.在head插件根目录下安装npm和grunt插件\n\n```\n npm install  cnpm --registry=https://registry.npm.taobao.org\n npm install  grunt–cli\n```\n\n7.修改Elasticsearch配置文件\n\n编辑elasticsearch-5.1.1/config/elasticsearch.yml,加入以下内容：\n\n```\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n\n8.修改Gruntfile.js\n打开elasticsearch-head-master/Gruntfile.js，找到下面connect属性，新增hostname: ‘0.0.0.0’,同时里面的port参数是对应的端口号，访问的时候就是这个端口号了，按需配置。\n\n```\nconnect: {\n        server: {\n            options: {\n                hostname: '0.0.0.0',\n                port: 9100,\n                base: '.',\n                keepalive: true\n            }\n        }\n    }   \n```\n\n9.启动elasticsearch-head\n在elasticsearch-head-master/目录下，运行启动命令:\n\n``` \ngrunt server  \n\n```\n\n这个操作可能会出现异常，提示插件找不到，所以要找到elasticsearch-head-master/目录下的package.json里面最后的\"devDependencies\"参数，安装需要的插件包。\n\n```\nnpm install 插件名@版本号\n```\n\n安装完再启动就好了。\n\n\n10.后台启动elasticsearch-head\n\n```\nnohup grunt server &exit\n```\n\n如果想关闭head插件，使用Linux查找进程命令：\n\n```\nps aux|grep head\n```\n\n结束进程：\n\n```\nkill 进程号\n```\n\n至此，head插件已成功安装。\n![head](/img/head.png)  \n\n ## elasticsearch-sql\n github链接 **[elasticsearch-sql](https://github.com/NLPchina/elasticsearch-sql)**\n由于上面已经安装好整个环境了，就不需要再安装了，如果是反过来装的话，也要先装npm才行。\n>1.下载es-sql-site压缩包[https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。\n>2.切换到解压目录，并安装express插件，同时部署node服务。\n```\ncd site-server\nnpm install express --save\nnode node-server.js \n```\n>至此sql插件已成功安装,同样如果需要后台运行，需要使用nohup命令执行。\n另外sql端口号的配置在es-sql-site\\site-server目录下的site_configuration.json文件中配置。\n![sql](/img/sql.png)  \n\n### 总结\n   插件安装可能比较繁琐，特别是npm的安装，需要耐心。另外配置链接的地址可以写死在js里面\n![link1](/img/link1.png)  \n>这个的链接配置在head-master目录下elasticsearch-head-master\\_site\\app.js \n```\nline 4327 \"http://localhost:9200\" ->\"http://172.16.54.74:19200\"\n```\n配置成启动的es的ip和端口即可\n\n![link2](/img/link2.png)  \n>这个的链接配置在head-master目录下es-sql-site\\_site\\controller.js\n\n```\nline 387    url = \"http://localhost:9200\"->\"http://172.16.54.74:19200\"\nline 390    url = location.protocol+'//' + location.hostname + (location.port ? ':'+location.port : '')->\"http://172.16.54.74:19200\"\n```  \n都改成启动的es的ip和端口即可，这样子就不需要每次打开插件都填写对应的ip和port了。","source":"_posts/elasticsearch_4.md","raw":"---\ntitle: linux下elasticsearch插件安装笔记(head,sql)\ndate: 2017-05-04 15:43:41\ntags: \n- elasticsearch插件\n- linux\ncategories: \n- elasticsearch\n- linux\n---\n\n ## 说明\n 这里的版本是es5.1.2，不适用5.x以下，5.x以下是用插件的形式安装在es上面，具体看git。\n 安装的目录，和解压的目录都可以随便选的，但是为了统一管理，最好全部插件安装在es的根目录下（个人建议），因为我这里此前有人安装过相关的插件，分散在不同的目录，搞起来让我很懵逼。\n\n ## elasticsearch-head\ngithub链接 **[elasticsearch-head](https://github.com/mobz/elasticsearch-head)**\n head 插件在window安装跟linux安装操作步骤基本相似，这里就介绍linux下安装即可。\n1.首先需要git clone head 插件到本地，在linux上使用git命令也行，下载到本地再上传到linux服务器也行，哪方便行。\n2.安装npm：\n使用国外镜像会比较慢，所以使用淘宝镜像，很快的。\n```\nwget https://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.4.7-linux-x64.tar.gz\n```\n3.解压：\n```\ntar -zxvf node-v4.4.7-linux-x64.tar.gz\n```\n4.设置环境变量：<strong>这个步骤很重要<strong>,直接影响到npm安装是否正确\n```\nexport PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin\n```\n  这个opt是刚才解压的目录，这个一定不要错。\n5.查看npm版本：\n\n```\nnpm -v\n```\n\n 看下有没有版本号，有的话就没问题了。没有的话应该是环境变量出问题了，先看下当前环境变量\n\n ```\n echo $PATH\n ```\n\n 有上一步的安装目录的话，就没有问题了，这时候需要你重新设置环境变量\n\n ```\n export PATH=把刚才path的值拷贝过来就可以了\n ```\n\n然后重新npm -v 看下，如果还是不行，建议重新安装npm。  \n  \n另外还有一个很奇葩的东西，不知道是不是linux自带了node，会导致环境变量有问题，如果发现自带的node，请务必要删掉，然后重新设置PATH。  \n\n另外装完npm之后可以装n插件，这个插件可以更新最新版本的node，具体详情可以bing一下。\n\n6.在head插件根目录下安装npm和grunt插件\n\n```\n npm install  cnpm --registry=https://registry.npm.taobao.org\n npm install  grunt–cli\n```\n\n7.修改Elasticsearch配置文件\n\n编辑elasticsearch-5.1.1/config/elasticsearch.yml,加入以下内容：\n\n```\nhttp.cors.enabled: true\nhttp.cors.allow-origin: \"*\"\n```\n\n8.修改Gruntfile.js\n打开elasticsearch-head-master/Gruntfile.js，找到下面connect属性，新增hostname: ‘0.0.0.0’,同时里面的port参数是对应的端口号，访问的时候就是这个端口号了，按需配置。\n\n```\nconnect: {\n        server: {\n            options: {\n                hostname: '0.0.0.0',\n                port: 9100,\n                base: '.',\n                keepalive: true\n            }\n        }\n    }   \n```\n\n9.启动elasticsearch-head\n在elasticsearch-head-master/目录下，运行启动命令:\n\n``` \ngrunt server  \n\n```\n\n这个操作可能会出现异常，提示插件找不到，所以要找到elasticsearch-head-master/目录下的package.json里面最后的\"devDependencies\"参数，安装需要的插件包。\n\n```\nnpm install 插件名@版本号\n```\n\n安装完再启动就好了。\n\n\n10.后台启动elasticsearch-head\n\n```\nnohup grunt server &exit\n```\n\n如果想关闭head插件，使用Linux查找进程命令：\n\n```\nps aux|grep head\n```\n\n结束进程：\n\n```\nkill 进程号\n```\n\n至此，head插件已成功安装。\n![head](/img/head.png)  \n\n ## elasticsearch-sql\n github链接 **[elasticsearch-sql](https://github.com/NLPchina/elasticsearch-sql)**\n由于上面已经安装好整个环境了，就不需要再安装了，如果是反过来装的话，也要先装npm才行。\n>1.下载es-sql-site压缩包[https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。\n>2.切换到解压目录，并安装express插件，同时部署node服务。\n```\ncd site-server\nnpm install express --save\nnode node-server.js \n```\n>至此sql插件已成功安装,同样如果需要后台运行，需要使用nohup命令执行。\n另外sql端口号的配置在es-sql-site\\site-server目录下的site_configuration.json文件中配置。\n![sql](/img/sql.png)  \n\n### 总结\n   插件安装可能比较繁琐，特别是npm的安装，需要耐心。另外配置链接的地址可以写死在js里面\n![link1](/img/link1.png)  \n>这个的链接配置在head-master目录下elasticsearch-head-master\\_site\\app.js \n```\nline 4327 \"http://localhost:9200\" ->\"http://172.16.54.74:19200\"\n```\n配置成启动的es的ip和端口即可\n\n![link2](/img/link2.png)  \n>这个的链接配置在head-master目录下es-sql-site\\_site\\controller.js\n\n```\nline 387    url = \"http://localhost:9200\"->\"http://172.16.54.74:19200\"\nline 390    url = location.protocol+'//' + location.hostname + (location.port ? ':'+location.port : '')->\"http://172.16.54.74:19200\"\n```  \n都改成启动的es的ip和端口即可，这样子就不需要每次打开插件都填写对应的ip和port了。","slug":"elasticsearch_4","published":1,"updated":"2018-03-07T03:38:40.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji66y00111gfpg1u5dy34","content":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p> 这里的版本是es5.1.2，不适用5.x以下，5.x以下是用插件的形式安装在es上面，具体看git。<br> 安装的目录，和解压的目录都可以随便选的，但是为了统一管理，最好全部插件安装在es的根目录下（个人建议），因为我这里此前有人安装过相关的插件，分散在不同的目录，搞起来让我很懵逼。</p>\n<h2 id=\"elasticsearch-head\"><a href=\"#elasticsearch-head\" class=\"headerlink\" title=\"elasticsearch-head\"></a>elasticsearch-head</h2><p>github链接 <strong><a href=\"https://github.com/mobz/elasticsearch-head\" target=\"_blank\" rel=\"external\">elasticsearch-head</a></strong><br> head 插件在window安装跟linux安装操作步骤基本相似，这里就介绍linux下安装即可。<br>1.首先需要git clone head 插件到本地，在linux上使用git命令也行，下载到本地再上传到linux服务器也行，哪方便行。<br>2.安装npm：<br>使用国外镜像会比较慢，所以使用淘宝镜像，很快的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.4.7-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<p>3.解压：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf node-v4.4.7-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<p>4.设置环境变量：<strong>这个步骤很重要<strong>,直接影响到npm安装是否正确<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin</div></pre></td></tr></table></figure></strong></strong></p>\n<p>  这个opt是刚才解压的目录，这个一定不要错。<br>5.查看npm版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p> 看下有没有版本号，有的话就没问题了。没有的话应该是环境变量出问题了，先看下当前环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $PATH</div></pre></td></tr></table></figure>\n<p> 有上一步的安装目录的话，就没有问题了，这时候需要你重新设置环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=把刚才path的值拷贝过来就可以了</div></pre></td></tr></table></figure>\n<p>然后重新npm -v 看下，如果还是不行，建议重新安装npm。  </p>\n<p>另外还有一个很奇葩的东西，不知道是不是linux自带了node，会导致环境变量有问题，如果发现自带的node，请务必要删掉，然后重新设置PATH。  </p>\n<p>另外装完npm之后可以装n插件，这个插件可以更新最新版本的node，具体详情可以bing一下。</p>\n<p>6.在head插件根目录下安装npm和grunt插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install  cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\">npm install  grunt–cli</div></pre></td></tr></table></figure>\n<p>7.修改Elasticsearch配置文件</p>\n<p>编辑elasticsearch-5.1.1/config/elasticsearch.yml,加入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.cors.enabled: true</div><div class=\"line\">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure>\n<p>8.修改Gruntfile.js<br>打开elasticsearch-head-master/Gruntfile.js，找到下面connect属性，新增hostname: ‘0.0.0.0’,同时里面的port参数是对应的端口号，访问的时候就是这个端口号了，按需配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">connect: &#123;</div><div class=\"line\">        server: &#123;</div><div class=\"line\">            options: &#123;</div><div class=\"line\">                hostname: &apos;0.0.0.0&apos;,</div><div class=\"line\">                port: 9100,</div><div class=\"line\">                base: &apos;.&apos;,</div><div class=\"line\">                keepalive: true</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>9.启动elasticsearch-head<br>在elasticsearch-head-master/目录下，运行启动命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grunt server</div></pre></td></tr></table></figure>\n<p>这个操作可能会出现异常，提示插件找不到，所以要找到elasticsearch-head-master/目录下的package.json里面最后的”devDependencies”参数，安装需要的插件包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install 插件名@版本号</div></pre></td></tr></table></figure>\n<p>安装完再启动就好了。</p>\n<p>10.后台启动elasticsearch-head</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup grunt server &amp;exit</div></pre></td></tr></table></figure>\n<p>如果想关闭head插件，使用Linux查找进程命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux|grep head</div></pre></td></tr></table></figure>\n<p>结束进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill 进程号</div></pre></td></tr></table></figure>\n<p>至此，head插件已成功安装。<br><img src=\"/img/head.png\" alt=\"head\">  </p>\n<h2 id=\"elasticsearch-sql\"><a href=\"#elasticsearch-sql\" class=\"headerlink\" title=\"elasticsearch-sql\"></a>elasticsearch-sql</h2><p> github链接 <strong><a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"external\">elasticsearch-sql</a></strong><br>由于上面已经安装好整个环境了，就不需要再安装了，如果是反过来装的话，也要先装npm才行。</p>\n<blockquote>\n<p>1.下载es-sql-site压缩包[<a href=\"https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。\" target=\"_blank\" rel=\"external\">https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。</a><br>2.切换到解压目录，并安装express插件，同时部署node服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd site-server</div><div class=\"line\">npm install express --save</div><div class=\"line\">node node-server.js</div></pre></td></tr></table></figure></p>\n<p>至此sql插件已成功安装,同样如果需要后台运行，需要使用nohup命令执行。<br>另外sql端口号的配置在es-sql-site\\site-server目录下的site_configuration.json文件中配置。<br><img src=\"/img/sql.png\" alt=\"sql\">  </p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>   插件安装可能比较繁琐，特别是npm的安装，需要耐心。另外配置链接的地址可以写死在js里面<br><img src=\"/img/link1.png\" alt=\"link1\">  </p>\n<blockquote>\n<p>这个的链接配置在head-master目录下elasticsearch-head-master_site\\app.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">line 4327 &quot;http://localhost:9200&quot; -&gt;&quot;http://172.16.54.74:19200&quot;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>配置成启动的es的ip和端口即可</p>\n<p><img src=\"/img/link2.png\" alt=\"link2\">  </p>\n<blockquote>\n<p>这个的链接配置在head-master目录下es-sql-site_site\\controller.js</p>\n</blockquote>\n<pre><code>line 387    url = &quot;http://localhost:9200&quot;-&gt;&quot;http://172.16.54.74:19200&quot;\nline 390    url = location.protocol+&apos;//&apos; + location.hostname + (location.port ? &apos;:&apos;+location.port : &apos;&apos;)-&gt;&quot;http://172.16.54.74:19200&quot;\n</code></pre><p>都改成启动的es的ip和端口即可，这样子就不需要每次打开插件都填写对应的ip和port了。</p>\n","excerpt":"","more":"<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p> 这里的版本是es5.1.2，不适用5.x以下，5.x以下是用插件的形式安装在es上面，具体看git。<br> 安装的目录，和解压的目录都可以随便选的，但是为了统一管理，最好全部插件安装在es的根目录下（个人建议），因为我这里此前有人安装过相关的插件，分散在不同的目录，搞起来让我很懵逼。</p>\n<h2 id=\"elasticsearch-head\"><a href=\"#elasticsearch-head\" class=\"headerlink\" title=\"elasticsearch-head\"></a>elasticsearch-head</h2><p>github链接 <strong><a href=\"https://github.com/mobz/elasticsearch-head\">elasticsearch-head</a></strong><br> head 插件在window安装跟linux安装操作步骤基本相似，这里就介绍linux下安装即可。<br>1.首先需要git clone head 插件到本地，在linux上使用git命令也行，下载到本地再上传到linux服务器也行，哪方便行。<br>2.安装npm：<br>使用国外镜像会比较慢，所以使用淘宝镜像，很快的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://npm.taobao.org/mirrors/node/latest-v4.x/node-v4.4.7-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<p>3.解压：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf node-v4.4.7-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>\n<p>4.设置环境变量：<strong>这个步骤很重要<strong>,直接影响到npm安装是否正确<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=$PATH:/opt/node-v4.4.7-linux-x64/bin</div></pre></td></tr></table></figure></p>\n<p>  这个opt是刚才解压的目录，这个一定不要错。<br>5.查看npm版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm -v</div></pre></td></tr></table></figure>\n<p> 看下有没有版本号，有的话就没问题了。没有的话应该是环境变量出问题了，先看下当前环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo $PATH</div></pre></td></tr></table></figure>\n<p> 有上一步的安装目录的话，就没有问题了，这时候需要你重新设置环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=把刚才path的值拷贝过来就可以了</div></pre></td></tr></table></figure>\n<p>然后重新npm -v 看下，如果还是不行，建议重新安装npm。  </p>\n<p>另外还有一个很奇葩的东西，不知道是不是linux自带了node，会导致环境变量有问题，如果发现自带的node，请务必要删掉，然后重新设置PATH。  </p>\n<p>另外装完npm之后可以装n插件，这个插件可以更新最新版本的node，具体详情可以bing一下。</p>\n<p>6.在head插件根目录下安装npm和grunt插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install  cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\">npm install  grunt–cli</div></pre></td></tr></table></figure>\n<p>7.修改Elasticsearch配置文件</p>\n<p>编辑elasticsearch-5.1.1/config/elasticsearch.yml,加入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.cors.enabled: true</div><div class=\"line\">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure>\n<p>8.修改Gruntfile.js<br>打开elasticsearch-head-master/Gruntfile.js，找到下面connect属性，新增hostname: ‘0.0.0.0’,同时里面的port参数是对应的端口号，访问的时候就是这个端口号了，按需配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">connect: &#123;</div><div class=\"line\">        server: &#123;</div><div class=\"line\">            options: &#123;</div><div class=\"line\">                hostname: &apos;0.0.0.0&apos;,</div><div class=\"line\">                port: 9100,</div><div class=\"line\">                base: &apos;.&apos;,</div><div class=\"line\">                keepalive: true</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>9.启动elasticsearch-head<br>在elasticsearch-head-master/目录下，运行启动命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grunt server</div></pre></td></tr></table></figure>\n<p>这个操作可能会出现异常，提示插件找不到，所以要找到elasticsearch-head-master/目录下的package.json里面最后的”devDependencies”参数，安装需要的插件包。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install 插件名@版本号</div></pre></td></tr></table></figure>\n<p>安装完再启动就好了。</p>\n<p>10.后台启动elasticsearch-head</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup grunt server &amp;exit</div></pre></td></tr></table></figure>\n<p>如果想关闭head插件，使用Linux查找进程命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps aux|grep head</div></pre></td></tr></table></figure>\n<p>结束进程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill 进程号</div></pre></td></tr></table></figure>\n<p>至此，head插件已成功安装。<br><img src=\"/img/head.png\" alt=\"head\">  </p>\n<h2 id=\"elasticsearch-sql\"><a href=\"#elasticsearch-sql\" class=\"headerlink\" title=\"elasticsearch-sql\"></a>elasticsearch-sql</h2><p> github链接 <strong><a href=\"https://github.com/NLPchina/elasticsearch-sql\">elasticsearch-sql</a></strong><br>由于上面已经安装好整个环境了，就不需要再安装了，如果是反过来装的话，也要先装npm才行。</p>\n<blockquote>\n<p>1.下载es-sql-site压缩包[<a href=\"https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。\">https://github.com/NLPchina/elasticsearch-sql/releases/download/5.0.1/es-sql-site-standalone.zip]并解压到相应目录。</a><br>2.切换到解压目录，并安装express插件，同时部署node服务。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd site-server</div><div class=\"line\">npm install express --save</div><div class=\"line\">node node-server.js</div></pre></td></tr></table></figure></p>\n<p>至此sql插件已成功安装,同样如果需要后台运行，需要使用nohup命令执行。<br>另外sql端口号的配置在es-sql-site\\site-server目录下的site_configuration.json文件中配置。<br><img src=\"/img/sql.png\" alt=\"sql\">  </p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>   插件安装可能比较繁琐，特别是npm的安装，需要耐心。另外配置链接的地址可以写死在js里面<br><img src=\"/img/link1.png\" alt=\"link1\">  </p>\n<blockquote>\n<p>这个的链接配置在head-master目录下elasticsearch-head-master_site\\app.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">line 4327 &quot;http://localhost:9200&quot; -&gt;&quot;http://172.16.54.74:19200&quot;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>配置成启动的es的ip和端口即可</p>\n<p><img src=\"/img/link2.png\" alt=\"link2\">  </p>\n<blockquote>\n<p>这个的链接配置在head-master目录下es-sql-site_site\\controller.js</p>\n</blockquote>\n<pre><code>line 387    url = &quot;http://localhost:9200&quot;-&gt;&quot;http://172.16.54.74:19200&quot;\nline 390    url = location.protocol+&apos;//&apos; + location.hostname + (location.port ? &apos;:&apos;+location.port : &apos;&apos;)-&gt;&quot;http://172.16.54.74:19200&quot;\n</code></pre><p>都改成启动的es的ip和端口即可，这样子就不需要每次打开插件都填写对应的ip和port了。</p>\n"},{"title":"elasticsearch 笔记-插件","date":"2016-12-30T07:07:41.000Z","_content":" ## delete-by-query插件使用\n```\nTransportClient.builder().settings(settings).addPlugin(DeleteByQueryPlugin.class).build();  \n\n```\n\ndeleteByQuery插件是通过按照查询出来的doc 来进行删除操作。\n- es的集群都需要安装deleteByQuery 插件，到es的安装目录里执行plugin install deletebyQuery命令则可安装\n- es安装完需要重启，重新加载插件\n- 客户端创建时需要添加plugin的支持如上面代码\n- eg：  \n\n```\n/**\n * es 查询删除操作\n * @param index 索引\n * @param type 类型\n * @param column 删除字段的列名\n * @param deleteValue 删除字段值\n * @return long 删除结果\n */\n    public  long deleteByQuery (String index,String type,String column,String deleteValue) {\n        String deleteByQuery=\"{\\\"query\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"term\\\":{\\\"\"+column+\"\\\":\\\"\"+deleteValue+\"\\\"}}]}}}\";\n        LOG.info(\"[EsJdbcDaoSupport.deleteByQuery] request json-> \"+deleteByQuery);\n        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(EsConnectionFactory.transportClient,   \n                                          DeleteByQueryAction.INSTANCE)\n                                          .setIndices(index)\n                                          .setTypes(type)\n                                          .setSource(deleteByQuery)\n                                          .execute()\n                                          .actionGet();  \n        return response.getTotalFound();\n    }\n```\n这种方式是通过拼装请求json 来获得查询条件，然后es发送json查询。  \n\n```\n    /**\n     * 查询es记录\n     * \n     * @param index 数据库\n     * @param type 表\n     * @param dataMap 字段对应的数据\n     * @return  boolean\n     */\n    public  long delete (String index,String type,String deleteId) {\n        TransportClient client =EsConnectionFactory.createEsClient();\n        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(client,   \n                                          DeleteByQueryAction.INSTANCE)\n                                          .setIndices(index)\n                                          .setTypes(type)\n                                         .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"QS_ENTERPRISE_ID\", deleteId)))\n                                          .execute()\n                                          .actionGet();  \n        return response.getTotalFound();\n    }\n```\n这种方式是通过原生es的查询查询数据，两种效果一样，不过我还是比较喜欢第二种。第一种可以动态生成查询条件，第二种动态生成好像是不行。\n\n## update-by-query 插件使用  \n\n```\nTransportClient.builder().settings(settings).addPlugin(ReindexPlugin.class).build();\n```\n\n- update-by-query插件是通过按照查询出来的doc 来进行更新操作，主要原理应该是：es不支持直接操作es单条记录，所以要把更新的记录拿出来，然后删除原来的，把更新后插入进去。\n- es 不需要安装，不需要重启\n- 工程中添加reindex.jar，jar包在下载es里面的lib中可以找到\n- 客户端创建时需要添加plugin的支持如上面代码\n- eg：  \n\n```\n        UpdateByQueryRequestBuilder ubqrb=UpdateByQueryAction.INSTANCE.newRequestBuilder(client);\n        BulkIndexByScrollResponse r=ubqrb.source(INDEX_ST_SESSION_TAG_SDR)\n                              .script(new Script(\"[ctx._source.ST_TAG_ID2=0,ctx._source.ST_TAG_ID3=0]\"))\n                              .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"ST_ENTERPRISE_ID\", orgName)))\n                             .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"ST_TAG_ID2\", tagid)))\n                             .get();\n```\n\nupdate-by-query 的难点在于一开始的script的写法，一开始不懂如何写script，后来看了各种文档api，才发现ctx.source是最重要的一个参数。后面的才是es的对应的列名（mapping），个人感觉ctx代表了所有数据的所有属性。\n\n## 总结\n通过学习两种插件的使用，更加了解了es的运作，现在用的是2.4.1的版本。没有升级，好像5的版本已经自带插件了，不需要再手动添加插件了。不过，还是觉得es配合sql的操作还是不让人放心。复杂的业务操作还是用原生的es，不需要用sql插件，不然会出现一些不可预知的情况。","source":"_posts/elasticsearch_2.md","raw":"---\ntitle: elasticsearch 笔记-插件\ndate: 2016-12-30 15:07:41\ntags: \n- elasticsearch-插件\n- 分布式\ncategories: \n- elasticsearch\n- 分布式\n---\n ## delete-by-query插件使用\n```\nTransportClient.builder().settings(settings).addPlugin(DeleteByQueryPlugin.class).build();  \n\n```\n\ndeleteByQuery插件是通过按照查询出来的doc 来进行删除操作。\n- es的集群都需要安装deleteByQuery 插件，到es的安装目录里执行plugin install deletebyQuery命令则可安装\n- es安装完需要重启，重新加载插件\n- 客户端创建时需要添加plugin的支持如上面代码\n- eg：  \n\n```\n/**\n * es 查询删除操作\n * @param index 索引\n * @param type 类型\n * @param column 删除字段的列名\n * @param deleteValue 删除字段值\n * @return long 删除结果\n */\n    public  long deleteByQuery (String index,String type,String column,String deleteValue) {\n        String deleteByQuery=\"{\\\"query\\\":{\\\"bool\\\":{\\\"must\\\":[{\\\"term\\\":{\\\"\"+column+\"\\\":\\\"\"+deleteValue+\"\\\"}}]}}}\";\n        LOG.info(\"[EsJdbcDaoSupport.deleteByQuery] request json-> \"+deleteByQuery);\n        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(EsConnectionFactory.transportClient,   \n                                          DeleteByQueryAction.INSTANCE)\n                                          .setIndices(index)\n                                          .setTypes(type)\n                                          .setSource(deleteByQuery)\n                                          .execute()\n                                          .actionGet();  \n        return response.getTotalFound();\n    }\n```\n这种方式是通过拼装请求json 来获得查询条件，然后es发送json查询。  \n\n```\n    /**\n     * 查询es记录\n     * \n     * @param index 数据库\n     * @param type 表\n     * @param dataMap 字段对应的数据\n     * @return  boolean\n     */\n    public  long delete (String index,String type,String deleteId) {\n        TransportClient client =EsConnectionFactory.createEsClient();\n        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(client,   \n                                          DeleteByQueryAction.INSTANCE)\n                                          .setIndices(index)\n                                          .setTypes(type)\n                                         .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"QS_ENTERPRISE_ID\", deleteId)))\n                                          .execute()\n                                          .actionGet();  \n        return response.getTotalFound();\n    }\n```\n这种方式是通过原生es的查询查询数据，两种效果一样，不过我还是比较喜欢第二种。第一种可以动态生成查询条件，第二种动态生成好像是不行。\n\n## update-by-query 插件使用  \n\n```\nTransportClient.builder().settings(settings).addPlugin(ReindexPlugin.class).build();\n```\n\n- update-by-query插件是通过按照查询出来的doc 来进行更新操作，主要原理应该是：es不支持直接操作es单条记录，所以要把更新的记录拿出来，然后删除原来的，把更新后插入进去。\n- es 不需要安装，不需要重启\n- 工程中添加reindex.jar，jar包在下载es里面的lib中可以找到\n- 客户端创建时需要添加plugin的支持如上面代码\n- eg：  \n\n```\n        UpdateByQueryRequestBuilder ubqrb=UpdateByQueryAction.INSTANCE.newRequestBuilder(client);\n        BulkIndexByScrollResponse r=ubqrb.source(INDEX_ST_SESSION_TAG_SDR)\n                              .script(new Script(\"[ctx._source.ST_TAG_ID2=0,ctx._source.ST_TAG_ID3=0]\"))\n                              .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"ST_ENTERPRISE_ID\", orgName)))\n                             .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(\"ST_TAG_ID2\", tagid)))\n                             .get();\n```\n\nupdate-by-query 的难点在于一开始的script的写法，一开始不懂如何写script，后来看了各种文档api，才发现ctx.source是最重要的一个参数。后面的才是es的对应的列名（mapping），个人感觉ctx代表了所有数据的所有属性。\n\n## 总结\n通过学习两种插件的使用，更加了解了es的运作，现在用的是2.4.1的版本。没有升级，好像5的版本已经自带插件了，不需要再手动添加插件了。不过，还是觉得es配合sql的操作还是不让人放心。复杂的业务操作还是用原生的es，不需要用sql插件，不然会出现一些不可预知的情况。","slug":"elasticsearch_2","published":1,"updated":"2016-12-30T08:31:27.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji67000151gfpvwxrjj1r","content":"<h2 id=\"delete-by-query插件使用\"><a href=\"#delete-by-query插件使用\" class=\"headerlink\" title=\"delete-by-query插件使用\"></a>delete-by-query插件使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TransportClient.builder().settings(settings).addPlugin(DeleteByQueryPlugin.class).build();</div></pre></td></tr></table></figure>\n<p>deleteByQuery插件是通过按照查询出来的doc 来进行删除操作。</p>\n<ul>\n<li>es的集群都需要安装deleteByQuery 插件，到es的安装目录里执行plugin install deletebyQuery命令则可安装</li>\n<li>es安装完需要重启，重新加载插件</li>\n<li>客户端创建时需要添加plugin的支持如上面代码</li>\n<li>eg：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * es 查询删除操作</div><div class=\"line\"> * @param index 索引</div><div class=\"line\"> * @param type 类型</div><div class=\"line\"> * @param column 删除字段的列名</div><div class=\"line\"> * @param deleteValue 删除字段值</div><div class=\"line\"> * @return long 删除结果</div><div class=\"line\"> */</div><div class=\"line\">    public  long deleteByQuery (String index,String type,String column,String deleteValue) &#123;</div><div class=\"line\">        String deleteByQuery=&quot;&#123;\\&quot;query\\&quot;:&#123;\\&quot;bool\\&quot;:&#123;\\&quot;must\\&quot;:[&#123;\\&quot;term\\&quot;:&#123;\\&quot;&quot;+column+&quot;\\&quot;:\\&quot;&quot;+deleteValue+&quot;\\&quot;&#125;&#125;]&#125;&#125;&#125;&quot;;</div><div class=\"line\">        LOG.info(&quot;[EsJdbcDaoSupport.deleteByQuery] request json-&gt; &quot;+deleteByQuery);</div><div class=\"line\">        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(EsConnectionFactory.transportClient,   </div><div class=\"line\">                                          DeleteByQueryAction.INSTANCE)</div><div class=\"line\">                                          .setIndices(index)</div><div class=\"line\">                                          .setTypes(type)</div><div class=\"line\">                                          .setSource(deleteByQuery)</div><div class=\"line\">                                          .execute()</div><div class=\"line\">                                          .actionGet();  </div><div class=\"line\">        return response.getTotalFound();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这种方式是通过拼装请求json 来获得查询条件，然后es发送json查询。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 查询es记录</div><div class=\"line\"> * </div><div class=\"line\"> * @param index 数据库</div><div class=\"line\"> * @param type 表</div><div class=\"line\"> * @param dataMap 字段对应的数据</div><div class=\"line\"> * @return  boolean</div><div class=\"line\"> */</div><div class=\"line\">public  long delete (String index,String type,String deleteId) &#123;</div><div class=\"line\">    TransportClient client =EsConnectionFactory.createEsClient();</div><div class=\"line\">    DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(client,   </div><div class=\"line\">                                      DeleteByQueryAction.INSTANCE)</div><div class=\"line\">                                      .setIndices(index)</div><div class=\"line\">                                      .setTypes(type)</div><div class=\"line\">                                     .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;QS_ENTERPRISE_ID&quot;, deleteId)))</div><div class=\"line\">                                      .execute()</div><div class=\"line\">                                      .actionGet();  </div><div class=\"line\">    return response.getTotalFound();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式是通过原生es的查询查询数据，两种效果一样，不过我还是比较喜欢第二种。第一种可以动态生成查询条件，第二种动态生成好像是不行。</p>\n<h2 id=\"update-by-query-插件使用\"><a href=\"#update-by-query-插件使用\" class=\"headerlink\" title=\"update-by-query 插件使用\"></a>update-by-query 插件使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TransportClient.builder().settings(settings).addPlugin(ReindexPlugin.class).build();</div></pre></td></tr></table></figure>\n<ul>\n<li>update-by-query插件是通过按照查询出来的doc 来进行更新操作，主要原理应该是：es不支持直接操作es单条记录，所以要把更新的记录拿出来，然后删除原来的，把更新后插入进去。</li>\n<li>es 不需要安装，不需要重启</li>\n<li>工程中添加reindex.jar，jar包在下载es里面的lib中可以找到</li>\n<li>客户端创建时需要添加plugin的支持如上面代码</li>\n<li>eg：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">UpdateByQueryRequestBuilder ubqrb=UpdateByQueryAction.INSTANCE.newRequestBuilder(client);</div><div class=\"line\">BulkIndexByScrollResponse r=ubqrb.source(INDEX_ST_SESSION_TAG_SDR)</div><div class=\"line\">                      .script(new Script(&quot;[ctx._source.ST_TAG_ID2=0,ctx._source.ST_TAG_ID3=0]&quot;))</div><div class=\"line\">                      .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_ENTERPRISE_ID&quot;, orgName)))</div><div class=\"line\">                     .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_TAG_ID2&quot;, tagid)))</div><div class=\"line\">                     .get();</div></pre></td></tr></table></figure>\n<p>update-by-query 的难点在于一开始的script的写法，一开始不懂如何写script，后来看了各种文档api，才发现ctx.source是最重要的一个参数。后面的才是es的对应的列名（mapping），个人感觉ctx代表了所有数据的所有属性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过学习两种插件的使用，更加了解了es的运作，现在用的是2.4.1的版本。没有升级，好像5的版本已经自带插件了，不需要再手动添加插件了。不过，还是觉得es配合sql的操作还是不让人放心。复杂的业务操作还是用原生的es，不需要用sql插件，不然会出现一些不可预知的情况。</p>\n","excerpt":"","more":"<h2 id=\"delete-by-query插件使用\"><a href=\"#delete-by-query插件使用\" class=\"headerlink\" title=\"delete-by-query插件使用\"></a>delete-by-query插件使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TransportClient.builder().settings(settings).addPlugin(DeleteByQueryPlugin.class).build();</div></pre></td></tr></table></figure>\n<p>deleteByQuery插件是通过按照查询出来的doc 来进行删除操作。</p>\n<ul>\n<li>es的集群都需要安装deleteByQuery 插件，到es的安装目录里执行plugin install deletebyQuery命令则可安装</li>\n<li>es安装完需要重启，重新加载插件</li>\n<li>客户端创建时需要添加plugin的支持如上面代码</li>\n<li>eg：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * es 查询删除操作</div><div class=\"line\"> * @param index 索引</div><div class=\"line\"> * @param type 类型</div><div class=\"line\"> * @param column 删除字段的列名</div><div class=\"line\"> * @param deleteValue 删除字段值</div><div class=\"line\"> * @return long 删除结果</div><div class=\"line\"> */</div><div class=\"line\">    public  long deleteByQuery (String index,String type,String column,String deleteValue) &#123;</div><div class=\"line\">        String deleteByQuery=&quot;&#123;\\&quot;query\\&quot;:&#123;\\&quot;bool\\&quot;:&#123;\\&quot;must\\&quot;:[&#123;\\&quot;term\\&quot;:&#123;\\&quot;&quot;+column+&quot;\\&quot;:\\&quot;&quot;+deleteValue+&quot;\\&quot;&#125;&#125;]&#125;&#125;&#125;&quot;;</div><div class=\"line\">        LOG.info(&quot;[EsJdbcDaoSupport.deleteByQuery] request json-&gt; &quot;+deleteByQuery);</div><div class=\"line\">        DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(EsConnectionFactory.transportClient,   </div><div class=\"line\">                                          DeleteByQueryAction.INSTANCE)</div><div class=\"line\">                                          .setIndices(index)</div><div class=\"line\">                                          .setTypes(type)</div><div class=\"line\">                                          .setSource(deleteByQuery)</div><div class=\"line\">                                          .execute()</div><div class=\"line\">                                          .actionGet();  </div><div class=\"line\">        return response.getTotalFound();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>这种方式是通过拼装请求json 来获得查询条件，然后es发送json查询。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 查询es记录</div><div class=\"line\"> * </div><div class=\"line\"> * @param index 数据库</div><div class=\"line\"> * @param type 表</div><div class=\"line\"> * @param dataMap 字段对应的数据</div><div class=\"line\"> * @return  boolean</div><div class=\"line\"> */</div><div class=\"line\">public  long delete (String index,String type,String deleteId) &#123;</div><div class=\"line\">    TransportClient client =EsConnectionFactory.createEsClient();</div><div class=\"line\">    DeleteByQueryResponse response =  new DeleteByQueryRequestBuilder(client,   </div><div class=\"line\">                                      DeleteByQueryAction.INSTANCE)</div><div class=\"line\">                                      .setIndices(index)</div><div class=\"line\">                                      .setTypes(type)</div><div class=\"line\">                                     .setQuery(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;QS_ENTERPRISE_ID&quot;, deleteId)))</div><div class=\"line\">                                      .execute()</div><div class=\"line\">                                      .actionGet();  </div><div class=\"line\">    return response.getTotalFound();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式是通过原生es的查询查询数据，两种效果一样，不过我还是比较喜欢第二种。第一种可以动态生成查询条件，第二种动态生成好像是不行。</p>\n<h2 id=\"update-by-query-插件使用\"><a href=\"#update-by-query-插件使用\" class=\"headerlink\" title=\"update-by-query 插件使用\"></a>update-by-query 插件使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TransportClient.builder().settings(settings).addPlugin(ReindexPlugin.class).build();</div></pre></td></tr></table></figure>\n<ul>\n<li>update-by-query插件是通过按照查询出来的doc 来进行更新操作，主要原理应该是：es不支持直接操作es单条记录，所以要把更新的记录拿出来，然后删除原来的，把更新后插入进去。</li>\n<li>es 不需要安装，不需要重启</li>\n<li>工程中添加reindex.jar，jar包在下载es里面的lib中可以找到</li>\n<li>客户端创建时需要添加plugin的支持如上面代码</li>\n<li>eg：  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">UpdateByQueryRequestBuilder ubqrb=UpdateByQueryAction.INSTANCE.newRequestBuilder(client);</div><div class=\"line\">BulkIndexByScrollResponse r=ubqrb.source(INDEX_ST_SESSION_TAG_SDR)</div><div class=\"line\">                      .script(new Script(&quot;[ctx._source.ST_TAG_ID2=0,ctx._source.ST_TAG_ID3=0]&quot;))</div><div class=\"line\">                      .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_ENTERPRISE_ID&quot;, orgName)))</div><div class=\"line\">                     .filter(QueryBuilders.boolQuery().must(QueryBuilders.termQuery(&quot;ST_TAG_ID2&quot;, tagid)))</div><div class=\"line\">                     .get();</div></pre></td></tr></table></figure>\n<p>update-by-query 的难点在于一开始的script的写法，一开始不懂如何写script，后来看了各种文档api，才发现ctx.source是最重要的一个参数。后面的才是es的对应的列名（mapping），个人感觉ctx代表了所有数据的所有属性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过学习两种插件的使用，更加了解了es的运作，现在用的是2.4.1的版本。没有升级，好像5的版本已经自带插件了，不需要再手动添加插件了。不过，还是觉得es配合sql的操作还是不让人放心。复杂的业务操作还是用原生的es，不需要用sql插件，不然会出现一些不可预知的情况。</p>\n"},{"title":"我的hexo部署到腾讯云服务器","date":"2018-03-07T10:59:41.000Z","_content":"&emsp;&emsp;最近发现腾讯云搞活动，然后就心血来潮买了个服务器，感觉是挺便宜的（肯定是腾讯的套路），还续费了2年，希望自己能玩好这台服务器。昨天刚买完之后，一直在想不知道用来干嘛，想到现在还是不清楚要搞些撒东西出来，所以索性就先把博客迁移到这台服务器吧。\n\n\n# 服务器配置\n ## 安装Git\n`yum -y update`\n`yum install -y git nginx`\n安装git是因为hexo部署静态资源的时候需要有个git仓库\n安装nginx用来部署hexo静态资源文件  \n\n> git安装后需要配置公钥，打开以下文件,把需要部署的客户端的公钥复制到这个文件中就行，这个操作在部署hexo的时候可以跳过openssh的密码验证。（可以不操作，操作更好）\n \n - 在服务器上操作\n`vim ~/.ssh/authorized_keys`  \n\n - 在hexo客户端中操作\n \n打开GIT GUI 找到HELP找到SHOW SSH KEY\n```\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyPyy6mKAQrVQXVWCJ/2SeIDxF6a5FA8exlTTBtuAJZawpgRrnTCma+JFIvdViPH0fNIDLU0IwXZMExK5Gw2u90g3z0O2kJqF1pyAduyKUqd2oSK/aBGgcKCMej5OnS6xfDYqZn+zawsfU58ohUJHWNsXvTtK8XMGKi/N7nBsPxBqgwrTBMwHKIzhWjhv6SquQnnGaNXbddaidImixNyIHsbpJiPAQZtT4RH3WfCasBOtYF5Xl1ZMs07MiGEe+grX3MjrenMe1MJyWEziZTKREaV8jOgVbJi0EjpGTYqDb/oC6paqL4MbpQxQiFD70n2gOjSAyyVWEPfIHKaVl4z+cQ== Administrator@LQN-PC\n\n```\n复制key到authorized_keys 保存即可。\nPS:如果服务端重装系统了 则需要清除本地公钥缓存 使用以下命令\n`ssh-keygen -R 111.230.24.31`\n    \n 1. 新建git仓库\n`cd /usr/local/wwh`\n`mkdir GitLibrary`\n`chmod -R 755 /data/GitLibrary`\n\n 2. 初始化\n`git init --bare hexo.git`\n`vim /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive`\n\n 添加以下代码\n```\n#!/bin/bash\ngit --work-tree=/usr/local/wwh/hexo --git-dir=/usr/local/wwh/GitLibrary/hexo.git checkout -f\n```\n 保存并退出\n\n 3. 给文件添加可执行权限\n`chmod +x /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive`\n> 至此 git仓库配置完成。\n\n## nginx配置\n\n> nginx安装目录在/etc/nginx,配置测试性配置来检查是否安装成功了。\n\n 1. 在/usr/local/wwh下新建文件夹 `mkdir hexo `\n 2. `cd hexo` 新建index.html 文件 `vim index.html`\n文件内容如下：\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title></title>\n    <meta charset=\"UTF-8\">\n  </head>\n  <body>\n    <p>Nginx running</p>\n  </body>\n</html>\n```\n3.配置 Nginx 服务器\n`vim /etc/nginx/nginx.conf`    添加以下配置\n\n```\nserver {\n      listen       80 default_server;\n      listen       [::]:80 default_server;\n      server_name   localhost\n      root         /usr/local/wwh/hexo;//地址为刚才新建hexo文件夹\n  }\n```\n\n4.启动Nginx 测试是否启动成功\n输入命令： `systemctl start nginx.service` \n在没有配置系统启动Nginx的时候只能使用这种方式\n\n5.访问IP\n在浏览器输入IP地址：http://111.230.24.31/ \n会显示`Nginx running` \n表明Nginx启动成功。\n\n# 部署Hexo\n>  hexo 客户端安装 配置等不说明,在另外一篇文章中已经提及过了\n\n1.修改nginx.conf 配置文件 `vim  /etc/nginx/nginx.conf `\n\n添加以下代码\n```\n server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  localhost;\n        root         /usr/local/wwh/hexo;\n      \n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ {\n      expires 30d;\n      access_log off;\n      }\n\n    location ~ .*\\.(eot|ttf|otf|woff|svg)$ {\n    expires 30d;\n    access_log off;\n    }\n\n    location ~ .*\\.(js|css)?$ {\n    expires 7d;\n    access_log off;\n    }\n\n    error_page 404 /404.html;\n            location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n     }\n\n\n}\n```\n\n> 代码中location 可不添加，location的配置主要是用来做页面缓存,提高访问性能,避免页面加载太慢。\n\n重新启动nginx \n` systemctl restart nginx.service ` \n\n> nginx 配置完成\n\n2.hexo客户端配置\n\n - 修改hexo中_config.yml\n\n  修改deploy 参数,修改为以下代码\n  ```\n  deploy:\n    type: git\n    repo: \n       github: git@github.com:wenthywang/wenthywang.github.io.git //部署到github\n       wwh: root@111.230.24.31:/usr/local/wwh/GitLibrary/hexo //部署到腾讯云服务器\n    branch: master\n  ```\n  \n\n - 执行hexo部署命令\n\n`hexo clean` //清除本地资源\n`hexo g -d` //生成静态文件 并部署到配置文件中git地址\n\n\n> 至此,hexo博客部署完毕。\n \n\n# 为Nginx添加系统启动配置 \n\n - 在/etc/init.d/目录下编写脚本，名为nginx\n ```\n #!/bin/sh \n# \n# nginx - this script starts and stops the nginx daemon \n# \n# chkconfig:   - 85 15 \n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \n#               proxy and IMAP/POP3 proxy server \n# processname: nginx \n# config:      /etc/nginx/nginx.conf \n# config:      /etc/sysconfig/nginx \n# pidfile:     /var/run/nginx.pid \n\n# Source function library. \n. /etc/rc.d/init.d/functions \n\n# Source networking configuration. \n. /etc/sysconfig/network \n\n# Check that networking is up. \n[ \"$NETWORKING\" = \"no\" ] && exit 0 \n\nnginx=\"/usr/local/nginx/sbin/nginx\" \nprog=$(basename $nginx) \n\nNGINX_CONF_FILE=\"/usr/local/nginx/conf/nginx.conf\" \n\n[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx \n\nlockfile=/var/lock/subsys/nginx \n\nstart() { \n    [ -x $nginx ] || exit 5 \n    [ -f $NGINX_CONF_FILE ] || exit 6 \n    echo -n $\"Starting $prog: \" \n    daemon $nginx -c $NGINX_CONF_FILE \n    retval=$? \n    echo \n    [ $retval -eq 0 ] && touch $lockfile \n    return $retval \n} \n\nstop() { \n    echo -n $\"Stopping $prog: \" \n    killproc $prog -QUIT \n    retval=$? \n    echo \n    [ $retval -eq 0 ] && rm -f $lockfile \n    return $retval \nkillall -9 nginx \n} \n\nrestart() { \n    configtest || return $? \n    stop \n    sleep 1 \n    start \n} \n\nreload() { \n    configtest || return $? \n    echo -n $\"Reloading $prog: \" \n    killproc $nginx -HUP \nRETVAL=$? \n    echo \n} \n\nforce_reload() { \n    restart \n} \n\nconfigtest() { \n$nginx -t -c $NGINX_CONF_FILE \n} \n\nrh_status() { \n    status $prog \n} \n\nrh_status_q() { \n    rh_status >/dev/null 2>&1 \n} \n\ncase \"$1\" in \n    start) \n        rh_status_q && exit 0 \n    $1 \n        ;; \n    stop) \n        rh_status_q || exit 0 \n        $1 \n        ;; \n    restart|configtest) \n        $1 \n        ;; \n    reload) \n        rh_status_q || exit 7 \n        $1 \n        ;; \n    force-reload) \n        force_reload \n        ;; \n    status) \n        rh_status \n        ;; \n    condrestart|try-restart) \n        rh_status_q || exit 0 \n            ;; \n    *)    \n      echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\" \n        exit 2 \n\nesac\n ```\n\n - 开启nginx服务\n`chmod 755 /etc/init.d/nginx`\n`chkconfig --add nginx`\n\n - nginx启动，停止\n`service nginx start`//启动nginx\n`service nginx stop`//停止nginx\n`service nginx restart`//重启nginx\n`service nginx reload`//修改配置后立马生效\n\n通过系统配置后,nginx可以使用service nginx *的方式来启动了。\n\n# 定时清除nginx日志 \n\n1.修改nginx日志地址\n`vim /etc/nginx/nginx.conf`\n 修改以下内容\n`error_log  /etc/nginx/logs/error.log warn;`\n`access_log  /etc/nginx/logs/access.log  main;`\n\n2.重新启动nginx \n因为重新加载配置不生效，需要重新启动nginx。\n`service nginx restart`\n\n3.添加定时任务（5天前的日志删除）\n`cd /etc/nginx`\n`mkdir sh`\n`cd sh`\n`vim delete_nginx_logs.sh`\n\n添加以下代码\n```\n#set the path to nginx log files\nlog_files_path=\"/etc/nginx/logs/\"\nsave_days=5\n#delete ? days ago nginx log files\nfind $log_files_path -mtime +$save_days -exec rm -rf {} \\;\n``` \n\n修改定时任务\n`crontab -e`\n添加以下代码 保存\n`00 00 * * * /bin/sh /etc/nginx/sh/delete_nginx_logs.sh`\n每天0点0分执行脚本","source":"_posts/hexo_deploy.md","raw":"---\ntitle: 我的hexo部署到腾讯云服务器\ndate: 2018-03-07 18:59:41\ntags: \n- Hexo\n- Linux\ncategories: \n- 笔记 \n---\n&emsp;&emsp;最近发现腾讯云搞活动，然后就心血来潮买了个服务器，感觉是挺便宜的（肯定是腾讯的套路），还续费了2年，希望自己能玩好这台服务器。昨天刚买完之后，一直在想不知道用来干嘛，想到现在还是不清楚要搞些撒东西出来，所以索性就先把博客迁移到这台服务器吧。\n\n\n# 服务器配置\n ## 安装Git\n`yum -y update`\n`yum install -y git nginx`\n安装git是因为hexo部署静态资源的时候需要有个git仓库\n安装nginx用来部署hexo静态资源文件  \n\n> git安装后需要配置公钥，打开以下文件,把需要部署的客户端的公钥复制到这个文件中就行，这个操作在部署hexo的时候可以跳过openssh的密码验证。（可以不操作，操作更好）\n \n - 在服务器上操作\n`vim ~/.ssh/authorized_keys`  \n\n - 在hexo客户端中操作\n \n打开GIT GUI 找到HELP找到SHOW SSH KEY\n```\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyPyy6mKAQrVQXVWCJ/2SeIDxF6a5FA8exlTTBtuAJZawpgRrnTCma+JFIvdViPH0fNIDLU0IwXZMExK5Gw2u90g3z0O2kJqF1pyAduyKUqd2oSK/aBGgcKCMej5OnS6xfDYqZn+zawsfU58ohUJHWNsXvTtK8XMGKi/N7nBsPxBqgwrTBMwHKIzhWjhv6SquQnnGaNXbddaidImixNyIHsbpJiPAQZtT4RH3WfCasBOtYF5Xl1ZMs07MiGEe+grX3MjrenMe1MJyWEziZTKREaV8jOgVbJi0EjpGTYqDb/oC6paqL4MbpQxQiFD70n2gOjSAyyVWEPfIHKaVl4z+cQ== Administrator@LQN-PC\n\n```\n复制key到authorized_keys 保存即可。\nPS:如果服务端重装系统了 则需要清除本地公钥缓存 使用以下命令\n`ssh-keygen -R 111.230.24.31`\n    \n 1. 新建git仓库\n`cd /usr/local/wwh`\n`mkdir GitLibrary`\n`chmod -R 755 /data/GitLibrary`\n\n 2. 初始化\n`git init --bare hexo.git`\n`vim /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive`\n\n 添加以下代码\n```\n#!/bin/bash\ngit --work-tree=/usr/local/wwh/hexo --git-dir=/usr/local/wwh/GitLibrary/hexo.git checkout -f\n```\n 保存并退出\n\n 3. 给文件添加可执行权限\n`chmod +x /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive`\n> 至此 git仓库配置完成。\n\n## nginx配置\n\n> nginx安装目录在/etc/nginx,配置测试性配置来检查是否安装成功了。\n\n 1. 在/usr/local/wwh下新建文件夹 `mkdir hexo `\n 2. `cd hexo` 新建index.html 文件 `vim index.html`\n文件内容如下：\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title></title>\n    <meta charset=\"UTF-8\">\n  </head>\n  <body>\n    <p>Nginx running</p>\n  </body>\n</html>\n```\n3.配置 Nginx 服务器\n`vim /etc/nginx/nginx.conf`    添加以下配置\n\n```\nserver {\n      listen       80 default_server;\n      listen       [::]:80 default_server;\n      server_name   localhost\n      root         /usr/local/wwh/hexo;//地址为刚才新建hexo文件夹\n  }\n```\n\n4.启动Nginx 测试是否启动成功\n输入命令： `systemctl start nginx.service` \n在没有配置系统启动Nginx的时候只能使用这种方式\n\n5.访问IP\n在浏览器输入IP地址：http://111.230.24.31/ \n会显示`Nginx running` \n表明Nginx启动成功。\n\n# 部署Hexo\n>  hexo 客户端安装 配置等不说明,在另外一篇文章中已经提及过了\n\n1.修改nginx.conf 配置文件 `vim  /etc/nginx/nginx.conf `\n\n添加以下代码\n```\n server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  localhost;\n        root         /usr/local/wwh/hexo;\n      \n    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ {\n      expires 30d;\n      access_log off;\n      }\n\n    location ~ .*\\.(eot|ttf|otf|woff|svg)$ {\n    expires 30d;\n    access_log off;\n    }\n\n    location ~ .*\\.(js|css)?$ {\n    expires 7d;\n    access_log off;\n    }\n\n    error_page 404 /404.html;\n            location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n     }\n\n\n}\n```\n\n> 代码中location 可不添加，location的配置主要是用来做页面缓存,提高访问性能,避免页面加载太慢。\n\n重新启动nginx \n` systemctl restart nginx.service ` \n\n> nginx 配置完成\n\n2.hexo客户端配置\n\n - 修改hexo中_config.yml\n\n  修改deploy 参数,修改为以下代码\n  ```\n  deploy:\n    type: git\n    repo: \n       github: git@github.com:wenthywang/wenthywang.github.io.git //部署到github\n       wwh: root@111.230.24.31:/usr/local/wwh/GitLibrary/hexo //部署到腾讯云服务器\n    branch: master\n  ```\n  \n\n - 执行hexo部署命令\n\n`hexo clean` //清除本地资源\n`hexo g -d` //生成静态文件 并部署到配置文件中git地址\n\n\n> 至此,hexo博客部署完毕。\n \n\n# 为Nginx添加系统启动配置 \n\n - 在/etc/init.d/目录下编写脚本，名为nginx\n ```\n #!/bin/sh \n# \n# nginx - this script starts and stops the nginx daemon \n# \n# chkconfig:   - 85 15 \n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \n#               proxy and IMAP/POP3 proxy server \n# processname: nginx \n# config:      /etc/nginx/nginx.conf \n# config:      /etc/sysconfig/nginx \n# pidfile:     /var/run/nginx.pid \n\n# Source function library. \n. /etc/rc.d/init.d/functions \n\n# Source networking configuration. \n. /etc/sysconfig/network \n\n# Check that networking is up. \n[ \"$NETWORKING\" = \"no\" ] && exit 0 \n\nnginx=\"/usr/local/nginx/sbin/nginx\" \nprog=$(basename $nginx) \n\nNGINX_CONF_FILE=\"/usr/local/nginx/conf/nginx.conf\" \n\n[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx \n\nlockfile=/var/lock/subsys/nginx \n\nstart() { \n    [ -x $nginx ] || exit 5 \n    [ -f $NGINX_CONF_FILE ] || exit 6 \n    echo -n $\"Starting $prog: \" \n    daemon $nginx -c $NGINX_CONF_FILE \n    retval=$? \n    echo \n    [ $retval -eq 0 ] && touch $lockfile \n    return $retval \n} \n\nstop() { \n    echo -n $\"Stopping $prog: \" \n    killproc $prog -QUIT \n    retval=$? \n    echo \n    [ $retval -eq 0 ] && rm -f $lockfile \n    return $retval \nkillall -9 nginx \n} \n\nrestart() { \n    configtest || return $? \n    stop \n    sleep 1 \n    start \n} \n\nreload() { \n    configtest || return $? \n    echo -n $\"Reloading $prog: \" \n    killproc $nginx -HUP \nRETVAL=$? \n    echo \n} \n\nforce_reload() { \n    restart \n} \n\nconfigtest() { \n$nginx -t -c $NGINX_CONF_FILE \n} \n\nrh_status() { \n    status $prog \n} \n\nrh_status_q() { \n    rh_status >/dev/null 2>&1 \n} \n\ncase \"$1\" in \n    start) \n        rh_status_q && exit 0 \n    $1 \n        ;; \n    stop) \n        rh_status_q || exit 0 \n        $1 \n        ;; \n    restart|configtest) \n        $1 \n        ;; \n    reload) \n        rh_status_q || exit 7 \n        $1 \n        ;; \n    force-reload) \n        force_reload \n        ;; \n    status) \n        rh_status \n        ;; \n    condrestart|try-restart) \n        rh_status_q || exit 0 \n            ;; \n    *)    \n      echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\" \n        exit 2 \n\nesac\n ```\n\n - 开启nginx服务\n`chmod 755 /etc/init.d/nginx`\n`chkconfig --add nginx`\n\n - nginx启动，停止\n`service nginx start`//启动nginx\n`service nginx stop`//停止nginx\n`service nginx restart`//重启nginx\n`service nginx reload`//修改配置后立马生效\n\n通过系统配置后,nginx可以使用service nginx *的方式来启动了。\n\n# 定时清除nginx日志 \n\n1.修改nginx日志地址\n`vim /etc/nginx/nginx.conf`\n 修改以下内容\n`error_log  /etc/nginx/logs/error.log warn;`\n`access_log  /etc/nginx/logs/access.log  main;`\n\n2.重新启动nginx \n因为重新加载配置不生效，需要重新启动nginx。\n`service nginx restart`\n\n3.添加定时任务（5天前的日志删除）\n`cd /etc/nginx`\n`mkdir sh`\n`cd sh`\n`vim delete_nginx_logs.sh`\n\n添加以下代码\n```\n#set the path to nginx log files\nlog_files_path=\"/etc/nginx/logs/\"\nsave_days=5\n#delete ? days ago nginx log files\nfind $log_files_path -mtime +$save_days -exec rm -rf {} \\;\n``` \n\n修改定时任务\n`crontab -e`\n添加以下代码 保存\n`00 00 * * * /bin/sh /etc/nginx/sh/delete_nginx_logs.sh`\n每天0点0分执行脚本","slug":"hexo_deploy","published":1,"updated":"2018-04-09T03:52:12.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji67200181gfpo6t6illw","content":"<p>&emsp;&emsp;最近发现腾讯云搞活动，然后就心血来潮买了个服务器，感觉是挺便宜的（肯定是腾讯的套路），还续费了2年，希望自己能玩好这台服务器。昨天刚买完之后，一直在想不知道用来干嘛，想到现在还是不清楚要搞些撒东西出来，所以索性就先把博客迁移到这台服务器吧。</p>\n<h1 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h1><h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p><code>yum -y update</code><br><code>yum install -y git nginx</code><br>安装git是因为hexo部署静态资源的时候需要有个git仓库<br>安装nginx用来部署hexo静态资源文件  </p>\n<blockquote>\n<p>git安装后需要配置公钥，打开以下文件,把需要部署的客户端的公钥复制到这个文件中就行，这个操作在部署hexo的时候可以跳过openssh的密码验证。（可以不操作，操作更好）</p>\n</blockquote>\n<ul>\n<li><p>在服务器上操作<br><code>vim ~/.ssh/authorized_keys</code>  </p>\n</li>\n<li><p>在hexo客户端中操作</p>\n</li>\n</ul>\n<p>打开GIT GUI 找到HELP找到SHOW SSH KEY<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyPyy6mKAQrVQXVWCJ/2SeIDxF6a5FA8exlTTBtuAJZawpgRrnTCma+JFIvdViPH0fNIDLU0IwXZMExK5Gw2u90g3z0O2kJqF1pyAduyKUqd2oSK/aBGgcKCMej5OnS6xfDYqZn+zawsfU58ohUJHWNsXvTtK8XMGKi/N7nBsPxBqgwrTBMwHKIzhWjhv6SquQnnGaNXbddaidImixNyIHsbpJiPAQZtT4RH3WfCasBOtYF5Xl1ZMs07MiGEe+grX3MjrenMe1MJyWEziZTKREaV8jOgVbJi0EjpGTYqDb/oC6paqL4MbpQxQiFD70n2gOjSAyyVWEPfIHKaVl4z+cQ== Administrator@LQN-PC</div></pre></td></tr></table></figure></p>\n<p>复制key到authorized_keys 保存即可。<br>PS:如果服务端重装系统了 则需要清除本地公钥缓存 使用以下命令<br><code>ssh-keygen -R 111.230.24.31</code></p>\n<ol>\n<li><p>新建git仓库<br><code>cd /usr/local/wwh</code><br><code>mkdir GitLibrary</code><br><code>chmod -R 755 /data/GitLibrary</code></p>\n</li>\n<li><p>初始化<br><code>git init --bare hexo.git</code><br><code>vim /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive</code></p>\n<p>添加以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">git --work-tree=/usr/local/wwh/hexo --git-dir=/usr/local/wwh/GitLibrary/hexo.git checkout -f</div></pre></td></tr></table></figure>\n<p>保存并退出</p>\n</li>\n<li><p>给文件添加可执行权限<br><code>chmod +x /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive</code></p>\n<blockquote>\n<p>至此 git仓库配置完成。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><blockquote>\n<p>nginx安装目录在/etc/nginx,配置测试性配置来检查是否安装成功了。</p>\n</blockquote>\n<ol>\n<li>在/usr/local/wwh下新建文件夹 <code>mkdir hexo</code></li>\n<li><code>cd hexo</code> 新建index.html 文件 <code>vim index.html</code><br>文件内容如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;title&gt;&lt;/title&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;p&gt;Nginx running&lt;/p&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>3.配置 Nginx 服务器<br><code>vim /etc/nginx/nginx.conf</code>    添加以下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">      listen       80 default_server;</div><div class=\"line\">      listen       [::]:80 default_server;</div><div class=\"line\">      server_name   localhost</div><div class=\"line\">      root         /usr/local/wwh/hexo;//地址为刚才新建hexo文件夹</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>4.启动Nginx 测试是否启动成功<br>输入命令： <code>systemctl start nginx.service</code><br>在没有配置系统启动Nginx的时候只能使用这种方式</p>\n<p>5.访问IP<br>在浏览器输入IP地址：<a href=\"http://111.230.24.31/\" target=\"_blank\" rel=\"external\">http://111.230.24.31/</a><br>会显示<code>Nginx running</code><br>表明Nginx启动成功。</p>\n<h1 id=\"部署Hexo\"><a href=\"#部署Hexo\" class=\"headerlink\" title=\"部署Hexo\"></a>部署Hexo</h1><blockquote>\n<p> hexo 客户端安装 配置等不说明,在另外一篇文章中已经提及过了</p>\n</blockquote>\n<p>1.修改nginx.conf 配置文件 <code>vim  /etc/nginx/nginx.conf</code></p>\n<p>添加以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"> server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  localhost;</div><div class=\"line\">        root         /usr/local/wwh/hexo;</div><div class=\"line\">      </div><div class=\"line\">    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ &#123;</div><div class=\"line\">      expires 30d;</div><div class=\"line\">      access_log off;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ .*\\.(eot|ttf|otf|woff|svg)$ &#123;</div><div class=\"line\">    expires 30d;</div><div class=\"line\">    access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ .*\\.(js|css)?$ &#123;</div><div class=\"line\">    expires 7d;</div><div class=\"line\">    access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>代码中location 可不添加，location的配置主要是用来做页面缓存,提高访问性能,避免页面加载太慢。</p>\n</blockquote>\n<p>重新启动nginx<br><code>systemctl restart nginx.service</code> </p>\n<blockquote>\n<p>nginx 配置完成</p>\n</blockquote>\n<p>2.hexo客户端配置</p>\n<ul>\n<li><p>修改hexo中_config.yml</p>\n<p>修改deploy 参数,修改为以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: </div><div class=\"line\">     github: git@github.com:wenthywang/wenthywang.github.io.git //部署到github</div><div class=\"line\">     wwh: root@111.230.24.31:/usr/local/wwh/GitLibrary/hexo //部署到腾讯云服务器</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>执行hexo部署命令</li>\n</ul>\n<p><code>hexo clean</code> //清除本地资源<br><code>hexo g -d</code> //生成静态文件 并部署到配置文件中git地址</p>\n<blockquote>\n<p>至此,hexo博客部署完毕。</p>\n</blockquote>\n<h1 id=\"为Nginx添加系统启动配置\"><a href=\"#为Nginx添加系统启动配置\" class=\"headerlink\" title=\"为Nginx添加系统启动配置\"></a>为Nginx添加系统启动配置</h1><ul>\n<li><p>在/etc/init.d/目录下编写脚本，名为nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"> #!/bin/sh </div><div class=\"line\"># </div><div class=\"line\"># nginx - this script starts and stops the nginx daemon </div><div class=\"line\"># </div><div class=\"line\"># chkconfig:   - 85 15 </div><div class=\"line\"># description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ </div><div class=\"line\">#               proxy and IMAP/POP3 proxy server </div><div class=\"line\"># processname: nginx </div><div class=\"line\"># config:      /etc/nginx/nginx.conf </div><div class=\"line\"># config:      /etc/sysconfig/nginx </div><div class=\"line\"># pidfile:     /var/run/nginx.pid </div><div class=\"line\"></div><div class=\"line\"># Source function library. </div><div class=\"line\">. /etc/rc.d/init.d/functions </div><div class=\"line\"></div><div class=\"line\"># Source networking configuration. </div><div class=\"line\">. /etc/sysconfig/network </div><div class=\"line\"></div><div class=\"line\"># Check that networking is up. </div><div class=\"line\">[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0 </div><div class=\"line\"></div><div class=\"line\">nginx=&quot;/usr/local/nginx/sbin/nginx&quot; </div><div class=\"line\">prog=$(basename $nginx) </div><div class=\"line\"></div><div class=\"line\">NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot; </div><div class=\"line\"></div><div class=\"line\">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx </div><div class=\"line\"></div><div class=\"line\">lockfile=/var/lock/subsys/nginx </div><div class=\"line\"></div><div class=\"line\">start() &#123; </div><div class=\"line\">    [ -x $nginx ] || exit 5 </div><div class=\"line\">    [ -f $NGINX_CONF_FILE ] || exit 6 </div><div class=\"line\">    echo -n $&quot;Starting $prog: &quot; </div><div class=\"line\">    daemon $nginx -c $NGINX_CONF_FILE </div><div class=\"line\">    retval=$? </div><div class=\"line\">    echo </div><div class=\"line\">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile </div><div class=\"line\">    return $retval </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">stop() &#123; </div><div class=\"line\">    echo -n $&quot;Stopping $prog: &quot; </div><div class=\"line\">    killproc $prog -QUIT </div><div class=\"line\">    retval=$? </div><div class=\"line\">    echo </div><div class=\"line\">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile </div><div class=\"line\">    return $retval </div><div class=\"line\">killall -9 nginx </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">restart() &#123; </div><div class=\"line\">    configtest || return $? </div><div class=\"line\">    stop </div><div class=\"line\">    sleep 1 </div><div class=\"line\">    start </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">reload() &#123; </div><div class=\"line\">    configtest || return $? </div><div class=\"line\">    echo -n $&quot;Reloading $prog: &quot; </div><div class=\"line\">    killproc $nginx -HUP </div><div class=\"line\">RETVAL=$? </div><div class=\"line\">    echo </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">force_reload() &#123; </div><div class=\"line\">    restart </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">configtest() &#123; </div><div class=\"line\">$nginx -t -c $NGINX_CONF_FILE </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">rh_status() &#123; </div><div class=\"line\">    status $prog </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">rh_status_q() &#123; </div><div class=\"line\">    rh_status &gt;/dev/null 2&gt;&amp;1 </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">case &quot;$1&quot; in </div><div class=\"line\">    start) </div><div class=\"line\">        rh_status_q &amp;&amp; exit 0 </div><div class=\"line\">    $1 </div><div class=\"line\">        ;; </div><div class=\"line\">    stop) </div><div class=\"line\">        rh_status_q || exit 0 </div><div class=\"line\">        $1 </div><div class=\"line\">        ;; </div><div class=\"line\">    restart|configtest) </div><div class=\"line\">        $1 </div><div class=\"line\">        ;; </div><div class=\"line\">    reload) </div><div class=\"line\">        rh_status_q || exit 7 </div><div class=\"line\">        $1 </div><div class=\"line\">        ;; </div><div class=\"line\">    force-reload) </div><div class=\"line\">        force_reload </div><div class=\"line\">        ;; </div><div class=\"line\">    status) </div><div class=\"line\">        rh_status </div><div class=\"line\">        ;; </div><div class=\"line\">    condrestart|try-restart) </div><div class=\"line\">        rh_status_q || exit 0 </div><div class=\"line\">            ;; </div><div class=\"line\">    *)    </div><div class=\"line\">      echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot; </div><div class=\"line\">        exit 2 </div><div class=\"line\"></div><div class=\"line\">esac</div></pre></td></tr></table></figure>\n</li>\n<li><p>开启nginx服务<br><code>chmod 755 /etc/init.d/nginx</code><br><code>chkconfig --add nginx</code></p>\n</li>\n<li><p>nginx启动，停止<br><code>service nginx start</code>//启动nginx<br><code>service nginx stop</code>//停止nginx<br><code>service nginx restart</code>//重启nginx<br><code>service nginx reload</code>//修改配置后立马生效</p>\n</li>\n</ul>\n<p>通过系统配置后,nginx可以使用service nginx *的方式来启动了。</p>\n<h1 id=\"定时清除nginx日志\"><a href=\"#定时清除nginx日志\" class=\"headerlink\" title=\"定时清除nginx日志\"></a>定时清除nginx日志</h1><p>1.修改nginx日志地址<br><code>vim /etc/nginx/nginx.conf</code><br> 修改以下内容<br><code>error_log  /etc/nginx/logs/error.log warn;</code><br><code>access_log  /etc/nginx/logs/access.log  main;</code></p>\n<p>2.重新启动nginx<br>因为重新加载配置不生效，需要重新启动nginx。<br><code>service nginx restart</code></p>\n<p>3.添加定时任务（5天前的日志删除）<br><code>cd /etc/nginx</code><br><code>mkdir sh</code><br><code>cd sh</code><br><code>vim delete_nginx_logs.sh</code></p>\n<p>添加以下代码</p>\n<pre><code>#set the path to nginx log files\nlog_files_path=&quot;/etc/nginx/logs/&quot;\nsave_days=5\n#delete ? days ago nginx log files\nfind $log_files_path -mtime +$save_days -exec rm -rf {} \\;\n</code></pre><p>修改定时任务<br><code>crontab -e</code><br>添加以下代码 保存<br><code>00 00 * * * /bin/sh /etc/nginx/sh/delete_nginx_logs.sh</code><br>每天0点0分执行脚本</p>\n","excerpt":"","more":"<p>&emsp;&emsp;最近发现腾讯云搞活动，然后就心血来潮买了个服务器，感觉是挺便宜的（肯定是腾讯的套路），还续费了2年，希望自己能玩好这台服务器。昨天刚买完之后，一直在想不知道用来干嘛，想到现在还是不清楚要搞些撒东西出来，所以索性就先把博客迁移到这台服务器吧。</p>\n<h1 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h1><h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p><code>yum -y update</code><br><code>yum install -y git nginx</code><br>安装git是因为hexo部署静态资源的时候需要有个git仓库<br>安装nginx用来部署hexo静态资源文件  </p>\n<blockquote>\n<p>git安装后需要配置公钥，打开以下文件,把需要部署的客户端的公钥复制到这个文件中就行，这个操作在部署hexo的时候可以跳过openssh的密码验证。（可以不操作，操作更好）</p>\n</blockquote>\n<ul>\n<li><p>在服务器上操作<br><code>vim ~/.ssh/authorized_keys</code>  </p>\n</li>\n<li><p>在hexo客户端中操作</p>\n</li>\n</ul>\n<p>打开GIT GUI 找到HELP找到SHOW SSH KEY<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyPyy6mKAQrVQXVWCJ/2SeIDxF6a5FA8exlTTBtuAJZawpgRrnTCma+JFIvdViPH0fNIDLU0IwXZMExK5Gw2u90g3z0O2kJqF1pyAduyKUqd2oSK/aBGgcKCMej5OnS6xfDYqZn+zawsfU58ohUJHWNsXvTtK8XMGKi/N7nBsPxBqgwrTBMwHKIzhWjhv6SquQnnGaNXbddaidImixNyIHsbpJiPAQZtT4RH3WfCasBOtYF5Xl1ZMs07MiGEe+grX3MjrenMe1MJyWEziZTKREaV8jOgVbJi0EjpGTYqDb/oC6paqL4MbpQxQiFD70n2gOjSAyyVWEPfIHKaVl4z+cQ== Administrator@LQN-PC</div></pre></td></tr></table></figure></p>\n<p>复制key到authorized_keys 保存即可。<br>PS:如果服务端重装系统了 则需要清除本地公钥缓存 使用以下命令<br><code>ssh-keygen -R 111.230.24.31</code></p>\n<ol>\n<li><p>新建git仓库<br><code>cd /usr/local/wwh</code><br><code>mkdir GitLibrary</code><br><code>chmod -R 755 /data/GitLibrary</code></p>\n</li>\n<li><p>初始化<br><code>git init --bare hexo.git</code><br><code>vim /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive</code></p>\n<p>添加以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">git --work-tree=/usr/local/wwh/hexo --git-dir=/usr/local/wwh/GitLibrary/hexo.git checkout -f</div></pre></td></tr></table></figure>\n<p>保存并退出</p>\n</li>\n<li><p>给文件添加可执行权限<br><code>chmod +x /usr/local/wwh/GitLibrary/hexo.git/hooks/post-receive</code></p>\n<blockquote>\n<p>至此 git仓库配置完成。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><blockquote>\n<p>nginx安装目录在/etc/nginx,配置测试性配置来检查是否安装成功了。</p>\n</blockquote>\n<ol>\n<li>在/usr/local/wwh下新建文件夹 <code>mkdir hexo</code></li>\n<li><code>cd hexo</code> 新建index.html 文件 <code>vim index.html</code><br>文件内容如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;title&gt;&lt;/title&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;p&gt;Nginx running&lt;/p&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>3.配置 Nginx 服务器<br><code>vim /etc/nginx/nginx.conf</code>    添加以下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">      listen       80 default_server;</div><div class=\"line\">      listen       [::]:80 default_server;</div><div class=\"line\">      server_name   localhost</div><div class=\"line\">      root         /usr/local/wwh/hexo;//地址为刚才新建hexo文件夹</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>4.启动Nginx 测试是否启动成功<br>输入命令： <code>systemctl start nginx.service</code><br>在没有配置系统启动Nginx的时候只能使用这种方式</p>\n<p>5.访问IP<br>在浏览器输入IP地址：<a href=\"http://111.230.24.31/\">http://111.230.24.31/</a><br>会显示<code>Nginx running</code><br>表明Nginx启动成功。</p>\n<h1 id=\"部署Hexo\"><a href=\"#部署Hexo\" class=\"headerlink\" title=\"部署Hexo\"></a>部署Hexo</h1><blockquote>\n<p> hexo 客户端安装 配置等不说明,在另外一篇文章中已经提及过了</p>\n</blockquote>\n<p>1.修改nginx.conf 配置文件 <code>vim  /etc/nginx/nginx.conf</code></p>\n<p>添加以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"> server &#123;</div><div class=\"line\">        listen       80 default_server;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  localhost;</div><div class=\"line\">        root         /usr/local/wwh/hexo;</div><div class=\"line\">      </div><div class=\"line\">    location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|flv|ico)$ &#123;</div><div class=\"line\">      expires 30d;</div><div class=\"line\">      access_log off;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ .*\\.(eot|ttf|otf|woff|svg)$ &#123;</div><div class=\"line\">    expires 30d;</div><div class=\"line\">    access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    location ~ .*\\.(js|css)?$ &#123;</div><div class=\"line\">    expires 7d;</div><div class=\"line\">    access_log off;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>代码中location 可不添加，location的配置主要是用来做页面缓存,提高访问性能,避免页面加载太慢。</p>\n</blockquote>\n<p>重新启动nginx<br><code>systemctl restart nginx.service</code> </p>\n<blockquote>\n<p>nginx 配置完成</p>\n</blockquote>\n<p>2.hexo客户端配置</p>\n<ul>\n<li><p>修改hexo中_config.yml</p>\n<p>修改deploy 参数,修改为以下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: </div><div class=\"line\">     github: git@github.com:wenthywang/wenthywang.github.io.git //部署到github</div><div class=\"line\">     wwh: root@111.230.24.31:/usr/local/wwh/GitLibrary/hexo //部署到腾讯云服务器</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>执行hexo部署命令</li>\n</ul>\n<p><code>hexo clean</code> //清除本地资源<br><code>hexo g -d</code> //生成静态文件 并部署到配置文件中git地址</p>\n<blockquote>\n<p>至此,hexo博客部署完毕。</p>\n</blockquote>\n<h1 id=\"为Nginx添加系统启动配置\"><a href=\"#为Nginx添加系统启动配置\" class=\"headerlink\" title=\"为Nginx添加系统启动配置\"></a>为Nginx添加系统启动配置</h1><ul>\n<li><p>在/etc/init.d/目录下编写脚本，名为nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"> #!/bin/sh </div><div class=\"line\"># </div><div class=\"line\"># nginx - this script starts and stops the nginx daemon </div><div class=\"line\"># </div><div class=\"line\"># chkconfig:   - 85 15 </div><div class=\"line\"># description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ </div><div class=\"line\">#               proxy and IMAP/POP3 proxy server </div><div class=\"line\"># processname: nginx </div><div class=\"line\"># config:      /etc/nginx/nginx.conf </div><div class=\"line\"># config:      /etc/sysconfig/nginx </div><div class=\"line\"># pidfile:     /var/run/nginx.pid </div><div class=\"line\"></div><div class=\"line\"># Source function library. </div><div class=\"line\">. /etc/rc.d/init.d/functions </div><div class=\"line\"></div><div class=\"line\"># Source networking configuration. </div><div class=\"line\">. /etc/sysconfig/network </div><div class=\"line\"></div><div class=\"line\"># Check that networking is up. </div><div class=\"line\">[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0 </div><div class=\"line\"></div><div class=\"line\">nginx=&quot;/usr/local/nginx/sbin/nginx&quot; </div><div class=\"line\">prog=$(basename $nginx) </div><div class=\"line\"></div><div class=\"line\">NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot; </div><div class=\"line\"></div><div class=\"line\">[ -f /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx </div><div class=\"line\"></div><div class=\"line\">lockfile=/var/lock/subsys/nginx </div><div class=\"line\"></div><div class=\"line\">start() &#123; </div><div class=\"line\">    [ -x $nginx ] || exit 5 </div><div class=\"line\">    [ -f $NGINX_CONF_FILE ] || exit 6 </div><div class=\"line\">    echo -n $&quot;Starting $prog: &quot; </div><div class=\"line\">    daemon $nginx -c $NGINX_CONF_FILE </div><div class=\"line\">    retval=$? </div><div class=\"line\">    echo </div><div class=\"line\">    [ $retval -eq 0 ] &amp;&amp; touch $lockfile </div><div class=\"line\">    return $retval </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">stop() &#123; </div><div class=\"line\">    echo -n $&quot;Stopping $prog: &quot; </div><div class=\"line\">    killproc $prog -QUIT </div><div class=\"line\">    retval=$? </div><div class=\"line\">    echo </div><div class=\"line\">    [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile </div><div class=\"line\">    return $retval </div><div class=\"line\">killall -9 nginx </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">restart() &#123; </div><div class=\"line\">    configtest || return $? </div><div class=\"line\">    stop </div><div class=\"line\">    sleep 1 </div><div class=\"line\">    start </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">reload() &#123; </div><div class=\"line\">    configtest || return $? </div><div class=\"line\">    echo -n $&quot;Reloading $prog: &quot; </div><div class=\"line\">    killproc $nginx -HUP </div><div class=\"line\">RETVAL=$? </div><div class=\"line\">    echo </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">force_reload() &#123; </div><div class=\"line\">    restart </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">configtest() &#123; </div><div class=\"line\">$nginx -t -c $NGINX_CONF_FILE </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">rh_status() &#123; </div><div class=\"line\">    status $prog </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">rh_status_q() &#123; </div><div class=\"line\">    rh_status &gt;/dev/null 2&gt;&amp;1 </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">case &quot;$1&quot; in </div><div class=\"line\">    start) </div><div class=\"line\">        rh_status_q &amp;&amp; exit 0 </div><div class=\"line\">    $1 </div><div class=\"line\">        ;; </div><div class=\"line\">    stop) </div><div class=\"line\">        rh_status_q || exit 0 </div><div class=\"line\">        $1 </div><div class=\"line\">        ;; </div><div class=\"line\">    restart|configtest) </div><div class=\"line\">        $1 </div><div class=\"line\">        ;; </div><div class=\"line\">    reload) </div><div class=\"line\">        rh_status_q || exit 7 </div><div class=\"line\">        $1 </div><div class=\"line\">        ;; </div><div class=\"line\">    force-reload) </div><div class=\"line\">        force_reload </div><div class=\"line\">        ;; </div><div class=\"line\">    status) </div><div class=\"line\">        rh_status </div><div class=\"line\">        ;; </div><div class=\"line\">    condrestart|try-restart) </div><div class=\"line\">        rh_status_q || exit 0 </div><div class=\"line\">            ;; </div><div class=\"line\">    *)    </div><div class=\"line\">      echo $&quot;Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;&quot; </div><div class=\"line\">        exit 2 </div><div class=\"line\"></div><div class=\"line\">esac</div></pre></td></tr></table></figure>\n</li>\n<li><p>开启nginx服务<br><code>chmod 755 /etc/init.d/nginx</code><br><code>chkconfig --add nginx</code></p>\n</li>\n<li><p>nginx启动，停止<br><code>service nginx start</code>//启动nginx<br><code>service nginx stop</code>//停止nginx<br><code>service nginx restart</code>//重启nginx<br><code>service nginx reload</code>//修改配置后立马生效</p>\n</li>\n</ul>\n<p>通过系统配置后,nginx可以使用service nginx *的方式来启动了。</p>\n<h1 id=\"定时清除nginx日志\"><a href=\"#定时清除nginx日志\" class=\"headerlink\" title=\"定时清除nginx日志\"></a>定时清除nginx日志</h1><p>1.修改nginx日志地址<br><code>vim /etc/nginx/nginx.conf</code><br> 修改以下内容<br><code>error_log  /etc/nginx/logs/error.log warn;</code><br><code>access_log  /etc/nginx/logs/access.log  main;</code></p>\n<p>2.重新启动nginx<br>因为重新加载配置不生效，需要重新启动nginx。<br><code>service nginx restart</code></p>\n<p>3.添加定时任务（5天前的日志删除）<br><code>cd /etc/nginx</code><br><code>mkdir sh</code><br><code>cd sh</code><br><code>vim delete_nginx_logs.sh</code></p>\n<p>添加以下代码</p>\n<pre><code>#set the path to nginx log files\nlog_files_path=&quot;/etc/nginx/logs/&quot;\nsave_days=5\n#delete ? days ago nginx log files\nfind $log_files_path -mtime +$save_days -exec rm -rf {} \\;\n</code></pre><p>修改定时任务<br><code>crontab -e</code><br>添加以下代码 保存<br><code>00 00 * * * /bin/sh /etc/nginx/sh/delete_nginx_logs.sh</code><br>每天0点0分执行脚本</p>\n"},{"title":"git工程批量更新和自动提交","date":"2016-09-22T07:53:41.000Z","_content":" ##  git工程批量更新\n用gitbash客户端都有一种不爽，更新多个工程需要很多的fetch，rebase，stash等命令，所以无聊就看了下shell脚本，看能不能批量fetch，rebase，搞了下，还是可以的，不过我这个是直接pull，直接合并到当前工程。\n``` bash\n#/bin/bash\necho '**********选择更新的git项目**********'\necho '0.all'\necho '1.jiaxin_lib_core'\necho '2.jiaxin_lib_dubbox'\necho '3.jiaxin_web_devcenter'\necho '4.jiaxin_web_agent'\necho '5.jiaxin_web_conf'\necho '6.jiaxin_gw_statistics'\necho '7.jiaxin_gw_config'\necho '8.jiaxin_gw_container'\necho '9.jiaxin_gw_order'\nread project\n               #在控制台输入1 2 3，它们之间用空格隔开。\nif test $project -eq 0  ;then\necho '------------------------jiaxin_lib_core-----------------------'\ncd jiaxin_lib_core && git pull && cd ..\necho '------------------------jiaxin_lib_dubbox-----------------------'\ncd jiaxin_lib_dubbox && git pull && cd ..\necho '------------------------jiaxin_web_devcenter-----------------------'\ncd jiaxin_web_devcenter && git pull && cd ..\necho '------------------------jiaxin_web_agent-----------------------'\ncd jiaxin_web_agent && git pull && cd ..\necho '------------------------jiaxin_web_conf-----------------------'\ncd jiaxin_web_conf && git pull && cd ..\necho '------------------------jiaxin_gw_statistics-----------------------'\ncd jiaxin_gw_statistics && git pull && cd ..\necho '------------------------jiaxin_gw_config-----------------------'\ncd jiaxin_gw_config && git pull && cd ..\necho '------------------------jiaxin_gw_container-----------------------'\ncd jiaxin_gw_container && git checkout *.jar && git pull && cd ..\necho '------------------------jiaxin_gw_order-----------------------'\ncd jiaxin_gw_order && git pull && cd ..\nfi\n\nif test $project -eq 1 ;then   \necho '-----------------------jiaxin_lib_core-START-----------------------' \n\ncd jiaxin_lib_core && git pull && cd ..\necho '------------------------jiaxin_lib_core-END-----------------------';\nfi\nif test $project -eq 2  ;then\necho '------------------------jiaxin_lib_dubbox-START----------------------'\ncd jiaxin_lib_dubbox && git pull && cd ..\necho '-----------------------jiaxin_lib_dubbox-END-----------------------';\nfi\nif test $project -eq 3  ;then\necho '------------------------jiaxin_web_devcenter-START----------------------'\ncd jiaxin_web_devcenter && git pull && cd ..\necho '-----------------------jiaxin_web_devcenter-END-----------------------';\nfi\nif test $project -eq 4  ;then\necho '------------------------jiaxin_web_agent-START----------------------'\ncd jiaxin_web_agent && git pull && cd ..\necho '-----------------------jiaxin_web_agent-END-----------------------';\nfi\nif test $project -eq 5  ;then\necho '------------------------jiaxin_web_conf-START----------------------'\ncd jiaxin_web_conf && git pull && cd ..\necho '-----------------------jiaxin_web_conf-END-----------------------';\nfi\nif test $project -eq 6  ;then\necho '------------------------jiaxin_gw_statistics-START----------------------'\ncd jiaxin_gw_statistics && git pull && cd ..\necho '-----------------------jiaxin_gw_statistics-END-----------------------';\nfi\nif test $project -eq 7  ;then\necho '------------------------jiaxin_gw_config-START----------------------'\ncd jiaxin_gw_config && git pull && cd ..\necho '-----------------------jiaxin_gw_config-END-----------------------';\nfi\nif test $project -eq 8  ;then\necho '------------------------jiaxin_gw_container-START----------------------'\ncd jiaxin_gw_container && git checkout *.jar && git pull && cd ..\necho '-----------------------jiaxin_gw_container-END-----------------------';\nfi\nif test $project -eq 9  ;then\necho '------------------------jiaxin_gw_order-START----------------------'\ncd jiaxin_gw_order && git pull && cd ..\necho '-----------------------jiaxin_gw_order-END-----------------------';\nfi\n\n```\n\n##  git工程push\n\n``` bash\n#/bin/bash\necho '**********选择push的git项目**********'\necho '1.jiaxin_lib_core'\necho '2.jiaxin_lib_dubbox'\necho '3.jiaxin_web_devcenter'\necho '4.jiaxin_web_agent'\necho '5.jiaxin_web_conf'\necho '6.jiaxin_gw_statistics'\necho '7.jiaxin_gw_config'\necho '8.jiaxin_gw_order'\n\nread project\necho '请输入提交参数commit：'\nread commit\n               #在控制台输入1 2 3，它们之间用空格隔开。\nif test $project -eq 1 ;then   \necho '-----------------------jiaxin_lib_core-START-----------------------' \ncd jiaxin_lib_core && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '------------------------jiaxin_lib_core-END-----------------------';\nfi\nif test $project -eq 2  ;then\necho '------------------------jiaxin_lib_dubbox-START----------------------'\ncd jiaxin_lib_dubbox && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_lib_dubbox-END-----------------------';\nfi\nif test $project -eq 3  ;then\necho '------------------------jiaxin_web_devcenter-START----------------------'\ncd jiaxin_web_devcenter && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_devcenter-END-----------------------';\nfi\nif test $project -eq 4  ;then\necho '------------------------jiaxin_web_agent-START----------------------'\ncd jiaxin_web_agent && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_agent-END-----------------------';\nfi\nif test $project -eq 5  ;then\necho '------------------------jiaxin_web_conf-START----------------------'\ncd jiaxin_web_conf && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_conf-END-----------------------';\nfi\nif test $project -eq 6  ;then\necho '------------------------jiaxin_gw_statistics-START----------------------'\ncd jiaxin_gw_statistics && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_statistics-END-----------------------';\nfi\nif test $project -eq 7  ;then\necho '------------------------jiaxin_gw_config-START----------------------'\ncd jiaxin_gw_config && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_config-END-----------------------';\nfi\nif test $project -eq 8  ;then\necho '------------------------jiaxin_gw_order-START----------------------'\ncd jiaxin_gw_order && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_order-END-----------------------';\nfi  \n```   \n\n##  执行脚本  \n使用git客户端切换到git的根目录，执行脚本命令即可。\n```bash\n./update.sh\n```  \n或\n```bash\n./push.sh\n```  \n\n##  注意事项\n- 脚本放到git根目录，其实不放也可以的。你喜欢，[我的脚本位置](/img/git.png)\n- 根据个人需要修改相应git命令，以免造成代码混乱，容易产生冲突\n- 还有push的时候，也是需要按照个人需要修改的，因为git add的时候是全部的，最好区分一下\n- **相关代码已上传到github**          **[链接](https://github.com/wenthywang/pullAndpush)**","source":"_posts/git_push.md","raw":"---\ntitle: git工程批量更新和自动提交\ndate: 2016-09-22 15:53:41\ntags: \n- Git\n- Shell\ncategories: \n- GIT\n---\n ##  git工程批量更新\n用gitbash客户端都有一种不爽，更新多个工程需要很多的fetch，rebase，stash等命令，所以无聊就看了下shell脚本，看能不能批量fetch，rebase，搞了下，还是可以的，不过我这个是直接pull，直接合并到当前工程。\n``` bash\n#/bin/bash\necho '**********选择更新的git项目**********'\necho '0.all'\necho '1.jiaxin_lib_core'\necho '2.jiaxin_lib_dubbox'\necho '3.jiaxin_web_devcenter'\necho '4.jiaxin_web_agent'\necho '5.jiaxin_web_conf'\necho '6.jiaxin_gw_statistics'\necho '7.jiaxin_gw_config'\necho '8.jiaxin_gw_container'\necho '9.jiaxin_gw_order'\nread project\n               #在控制台输入1 2 3，它们之间用空格隔开。\nif test $project -eq 0  ;then\necho '------------------------jiaxin_lib_core-----------------------'\ncd jiaxin_lib_core && git pull && cd ..\necho '------------------------jiaxin_lib_dubbox-----------------------'\ncd jiaxin_lib_dubbox && git pull && cd ..\necho '------------------------jiaxin_web_devcenter-----------------------'\ncd jiaxin_web_devcenter && git pull && cd ..\necho '------------------------jiaxin_web_agent-----------------------'\ncd jiaxin_web_agent && git pull && cd ..\necho '------------------------jiaxin_web_conf-----------------------'\ncd jiaxin_web_conf && git pull && cd ..\necho '------------------------jiaxin_gw_statistics-----------------------'\ncd jiaxin_gw_statistics && git pull && cd ..\necho '------------------------jiaxin_gw_config-----------------------'\ncd jiaxin_gw_config && git pull && cd ..\necho '------------------------jiaxin_gw_container-----------------------'\ncd jiaxin_gw_container && git checkout *.jar && git pull && cd ..\necho '------------------------jiaxin_gw_order-----------------------'\ncd jiaxin_gw_order && git pull && cd ..\nfi\n\nif test $project -eq 1 ;then   \necho '-----------------------jiaxin_lib_core-START-----------------------' \n\ncd jiaxin_lib_core && git pull && cd ..\necho '------------------------jiaxin_lib_core-END-----------------------';\nfi\nif test $project -eq 2  ;then\necho '------------------------jiaxin_lib_dubbox-START----------------------'\ncd jiaxin_lib_dubbox && git pull && cd ..\necho '-----------------------jiaxin_lib_dubbox-END-----------------------';\nfi\nif test $project -eq 3  ;then\necho '------------------------jiaxin_web_devcenter-START----------------------'\ncd jiaxin_web_devcenter && git pull && cd ..\necho '-----------------------jiaxin_web_devcenter-END-----------------------';\nfi\nif test $project -eq 4  ;then\necho '------------------------jiaxin_web_agent-START----------------------'\ncd jiaxin_web_agent && git pull && cd ..\necho '-----------------------jiaxin_web_agent-END-----------------------';\nfi\nif test $project -eq 5  ;then\necho '------------------------jiaxin_web_conf-START----------------------'\ncd jiaxin_web_conf && git pull && cd ..\necho '-----------------------jiaxin_web_conf-END-----------------------';\nfi\nif test $project -eq 6  ;then\necho '------------------------jiaxin_gw_statistics-START----------------------'\ncd jiaxin_gw_statistics && git pull && cd ..\necho '-----------------------jiaxin_gw_statistics-END-----------------------';\nfi\nif test $project -eq 7  ;then\necho '------------------------jiaxin_gw_config-START----------------------'\ncd jiaxin_gw_config && git pull && cd ..\necho '-----------------------jiaxin_gw_config-END-----------------------';\nfi\nif test $project -eq 8  ;then\necho '------------------------jiaxin_gw_container-START----------------------'\ncd jiaxin_gw_container && git checkout *.jar && git pull && cd ..\necho '-----------------------jiaxin_gw_container-END-----------------------';\nfi\nif test $project -eq 9  ;then\necho '------------------------jiaxin_gw_order-START----------------------'\ncd jiaxin_gw_order && git pull && cd ..\necho '-----------------------jiaxin_gw_order-END-----------------------';\nfi\n\n```\n\n##  git工程push\n\n``` bash\n#/bin/bash\necho '**********选择push的git项目**********'\necho '1.jiaxin_lib_core'\necho '2.jiaxin_lib_dubbox'\necho '3.jiaxin_web_devcenter'\necho '4.jiaxin_web_agent'\necho '5.jiaxin_web_conf'\necho '6.jiaxin_gw_statistics'\necho '7.jiaxin_gw_config'\necho '8.jiaxin_gw_order'\n\nread project\necho '请输入提交参数commit：'\nread commit\n               #在控制台输入1 2 3，它们之间用空格隔开。\nif test $project -eq 1 ;then   \necho '-----------------------jiaxin_lib_core-START-----------------------' \ncd jiaxin_lib_core && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '------------------------jiaxin_lib_core-END-----------------------';\nfi\nif test $project -eq 2  ;then\necho '------------------------jiaxin_lib_dubbox-START----------------------'\ncd jiaxin_lib_dubbox && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_lib_dubbox-END-----------------------';\nfi\nif test $project -eq 3  ;then\necho '------------------------jiaxin_web_devcenter-START----------------------'\ncd jiaxin_web_devcenter && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_devcenter-END-----------------------';\nfi\nif test $project -eq 4  ;then\necho '------------------------jiaxin_web_agent-START----------------------'\ncd jiaxin_web_agent && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_agent-END-----------------------';\nfi\nif test $project -eq 5  ;then\necho '------------------------jiaxin_web_conf-START----------------------'\ncd jiaxin_web_conf && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_web_conf-END-----------------------';\nfi\nif test $project -eq 6  ;then\necho '------------------------jiaxin_gw_statistics-START----------------------'\ncd jiaxin_gw_statistics && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_statistics-END-----------------------';\nfi\nif test $project -eq 7  ;then\necho '------------------------jiaxin_gw_config-START----------------------'\ncd jiaxin_gw_config && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_config-END-----------------------';\nfi\nif test $project -eq 8  ;then\necho '------------------------jiaxin_gw_order-START----------------------'\ncd jiaxin_gw_order && git add -A && git commit -m $commit && git push origin HEAD:refs/for/master && cd ..\necho '-----------------------jiaxin_gw_order-END-----------------------';\nfi  \n```   \n\n##  执行脚本  \n使用git客户端切换到git的根目录，执行脚本命令即可。\n```bash\n./update.sh\n```  \n或\n```bash\n./push.sh\n```  \n\n##  注意事项\n- 脚本放到git根目录，其实不放也可以的。你喜欢，[我的脚本位置](/img/git.png)\n- 根据个人需要修改相应git命令，以免造成代码混乱，容易产生冲突\n- 还有push的时候，也是需要按照个人需要修改的，因为git add的时候是全部的，最好区分一下\n- **相关代码已上传到github**          **[链接](https://github.com/wenthywang/pullAndpush)**","slug":"git_push","published":1,"updated":"2016-09-22T09:44:33.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji673001a1gfp90kivbcd","content":"<h2 id=\"git工程批量更新\"><a href=\"#git工程批量更新\" class=\"headerlink\" title=\"git工程批量更新\"></a>git工程批量更新</h2><p>用gitbash客户端都有一种不爽，更新多个工程需要很多的fetch，rebase，stash等命令，所以无聊就看了下shell脚本，看能不能批量fetch，rebase，搞了下，还是可以的，不过我这个是直接pull，直接合并到当前工程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#/bin/bash</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'**********选择更新的git项目**********'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'0.all'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'1.jiaxin_lib_core'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'2.jiaxin_lib_dubbox'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'3.jiaxin_web_devcenter'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'4.jiaxin_web_agent'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'5.jiaxin_web_conf'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'6.jiaxin_gw_statistics'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'7.jiaxin_gw_config'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'8.jiaxin_gw_container'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'9.jiaxin_gw_order'</span></div><div class=\"line\"><span class=\"built_in\">read</span> project</div><div class=\"line\">               <span class=\"comment\">#在控制台输入1 2 3，它们之间用空格隔开。</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 0  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_container-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 1 ;<span class=\"keyword\">then</span>   </div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_core-START-----------------------'</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 2  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 3  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 4  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_agent-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 5  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_conf-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 6  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 7  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_config-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 8  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_container-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_container-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 9  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_order-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"git工程push\"><a href=\"#git工程push\" class=\"headerlink\" title=\"git工程push\"></a>git工程push</h2><pre><code class=\"bash\"><span class=\"comment\">#/bin/bash</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'**********选择push的git项目**********'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'1.jiaxin_lib_core'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'2.jiaxin_lib_dubbox'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'3.jiaxin_web_devcenter'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'4.jiaxin_web_agent'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'5.jiaxin_web_conf'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'6.jiaxin_gw_statistics'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'7.jiaxin_gw_config'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'8.jiaxin_gw_order'</span>\n\n<span class=\"built_in\">read</span> project\n<span class=\"built_in\">echo</span> <span class=\"string\">'请输入提交参数commit：'</span>\n<span class=\"built_in\">read</span> commit\n               <span class=\"comment\">#在控制台输入1 2 3，它们之间用空格隔开。</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 1 ;<span class=\"keyword\">then</span>   \n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_core-START-----------------------'</span> \n<span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 2  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 3  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 4  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_agent-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 5  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_conf-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 6  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 7  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_config-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 8  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_order-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n</code></pre>\n<h2 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h2><p>使用git客户端切换到git的根目录，执行脚本命令即可。</p>\n<pre><code class=\"bash\">./update.sh\n</code></pre>\n<p>或</p>\n<pre><code class=\"bash\">./push.sh\n</code></pre>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>脚本放到git根目录，其实不放也可以的。你喜欢，<a href=\"/img/git.png\">我的脚本位置</a></li>\n<li>根据个人需要修改相应git命令，以免造成代码混乱，容易产生冲突</li>\n<li>还有push的时候，也是需要按照个人需要修改的，因为git add的时候是全部的，最好区分一下</li>\n<li><strong>相关代码已上传到github</strong>          <strong><a href=\"https://github.com/wenthywang/pullAndpush\" target=\"_blank\" rel=\"external\">链接</a></strong></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"git工程批量更新\"><a href=\"#git工程批量更新\" class=\"headerlink\" title=\"git工程批量更新\"></a>git工程批量更新</h2><p>用gitbash客户端都有一种不爽，更新多个工程需要很多的fetch，rebase，stash等命令，所以无聊就看了下shell脚本，看能不能批量fetch，rebase，搞了下，还是可以的，不过我这个是直接pull，直接合并到当前工程。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#/bin/bash</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'**********选择更新的git项目**********'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'0.all'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'1.jiaxin_lib_core'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'2.jiaxin_lib_dubbox'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'3.jiaxin_web_devcenter'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'4.jiaxin_web_agent'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'5.jiaxin_web_conf'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'6.jiaxin_gw_statistics'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'7.jiaxin_gw_config'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'8.jiaxin_gw_container'</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'9.jiaxin_gw_order'</span></div><div class=\"line\"><span class=\"built_in\">read</span> project</div><div class=\"line\">               <span class=\"comment\">#在控制台输入1 2 3，它们之间用空格隔开。</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 0  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_container-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 1 ;<span class=\"keyword\">then</span>   </div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_core-START-----------------------'</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 2  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 3  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 4  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_agent-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 5  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_conf-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 6  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 7  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_config-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 8  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_container-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_container &amp;&amp; git checkout *.jar &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_container-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 9  ;<span class=\"keyword\">then</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-START----------------------'</span></div><div class=\"line\"><span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git pull &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_order-END-----------------------'</span>;</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"git工程push\"><a href=\"#git工程push\" class=\"headerlink\" title=\"git工程push\"></a>git工程push</h2><pre><code class=\"bash\"><span class=\"comment\">#/bin/bash</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'**********选择push的git项目**********'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'1.jiaxin_lib_core'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'2.jiaxin_lib_dubbox'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'3.jiaxin_web_devcenter'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'4.jiaxin_web_agent'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'5.jiaxin_web_conf'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'6.jiaxin_gw_statistics'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'7.jiaxin_gw_config'</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'8.jiaxin_gw_order'</span>\n\n<span class=\"built_in\">read</span> project\n<span class=\"built_in\">echo</span> <span class=\"string\">'请输入提交参数commit：'</span>\n<span class=\"built_in\">read</span> commit\n               <span class=\"comment\">#在控制台输入1 2 3，它们之间用空格隔开。</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 1 ;<span class=\"keyword\">then</span>   \n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_core-START-----------------------'</span> \n<span class=\"built_in\">cd</span> jiaxin_lib_core &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_core-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 2  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_lib_dubbox-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_lib_dubbox &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_lib_dubbox-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 3  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_devcenter-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_devcenter &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_devcenter-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 4  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_agent-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_agent &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_agent-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 5  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_web_conf-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_web_conf &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_web_conf-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 6  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_statistics-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_statistics &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_statistics-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 7  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_config-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_config &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_config-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n<span class=\"keyword\">if</span> <span class=\"built_in\">test</span> <span class=\"variable\">$project</span> <span class=\"_\">-eq</span> 8  ;<span class=\"keyword\">then</span>\n<span class=\"built_in\">echo</span> <span class=\"string\">'------------------------jiaxin_gw_order-START----------------------'</span>\n<span class=\"built_in\">cd</span> jiaxin_gw_order &amp;&amp; git add -A &amp;&amp; git commit -m <span class=\"variable\">$commit</span> &amp;&amp; git push origin HEAD:refs/<span class=\"keyword\">for</span>/master &amp;&amp; <span class=\"built_in\">cd</span> ..\n<span class=\"built_in\">echo</span> <span class=\"string\">'-----------------------jiaxin_gw_order-END-----------------------'</span>;\n<span class=\"keyword\">fi</span>\n</code></pre>\n<h2 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h2><p>使用git客户端切换到git的根目录，执行脚本命令即可。</p>\n<pre><code class=\"bash\">./update.sh\n</code></pre>\n<p>或</p>\n<pre><code class=\"bash\">./push.sh\n</code></pre>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>脚本放到git根目录，其实不放也可以的。你喜欢，<a href=\"/img/git.png\">我的脚本位置</a></li>\n<li>根据个人需要修改相应git命令，以免造成代码混乱，容易产生冲突</li>\n<li>还有push的时候，也是需要按照个人需要修改的，因为git add的时候是全部的，最好区分一下</li>\n<li><strong>相关代码已上传到github</strong>          <strong><a href=\"https://github.com/wenthywang/pullAndpush\">链接</a></strong></li>\n</ul>\n"},{"title":"公瑾科技给我的...","date":"2015-12-23T14:55:44.000Z","_content":" 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自\n\n[Jenkins](http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/).\n\n## 持续集成概述\n\n### 什么是持续集成\n随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。\n\n持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。\n\n持续集成的核心价值在于：  \n``` bash\n  持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。\n  持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。\n  持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。\n```\n\n\n\n### 持续集成的原则\n业界普遍认同的持续集成的原则包括：\n``` bash\n需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。\n开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。\n需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。\n必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。\n```\n\n\n\n### 持续集成系统的组成\n由此可见，一个完整的构建系统必须包括：\n``` bash\n一个自动构建过程，包括自动编译、分发、部署和测试等。\n一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。\n一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。\n```\n\n\n### 总结\n上面的介绍估计了解得差不多了。 \n\n另外还会有ivy，下面内容是它的简介。\n\n\tApache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 \n\n    公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。\n\n傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。\n\n说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。\n\n今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。\n","source":"_posts/kungeek.md","raw":"---\ntitle: 公瑾科技给我的...\ndate: 2015-12-23 22:55:44\ntags: \n- 持续集成\n- API\n- Jenkins\ncategories: \n- Java\n- 实习\n---\n 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自\n\n[Jenkins](http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/).\n\n## 持续集成概述\n\n### 什么是持续集成\n随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。\n\n持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。\n\n持续集成的核心价值在于：  \n``` bash\n  持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。\n  持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。\n  持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。\n```\n\n\n\n### 持续集成的原则\n业界普遍认同的持续集成的原则包括：\n``` bash\n需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。\n开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。\n需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。\n必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。\n```\n\n\n\n### 持续集成系统的组成\n由此可见，一个完整的构建系统必须包括：\n``` bash\n一个自动构建过程，包括自动编译、分发、部署和测试等。\n一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。\n一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。\n```\n\n\n### 总结\n上面的介绍估计了解得差不多了。 \n\n另外还会有ivy，下面内容是它的简介。\n\n\tApache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 \n\n    公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。\n\n傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。\n\n说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。\n\n今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。\n","slug":"kungeek","published":1,"updated":"2016-09-08T02:15:33.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji675001c1gfp7lnfbdzs","content":"<p> 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自</p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/\" target=\"_blank\" rel=\"external\">Jenkins</a>.</p>\n<h2 id=\"持续集成概述\"><a href=\"#持续集成概述\" class=\"headerlink\" title=\"持续集成概述\"></a>持续集成概述</h2><h3 id=\"什么是持续集成\"><a href=\"#什么是持续集成\" class=\"headerlink\" title=\"什么是持续集成\"></a>什么是持续集成</h3><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p>\n<p>持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p>\n<p>持续集成的核心价值在于：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。</div><div class=\"line\">持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。</div><div class=\"line\">持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</div></pre></td></tr></table></figure></p>\n<h3 id=\"持续集成的原则\"><a href=\"#持续集成的原则\" class=\"headerlink\" title=\"持续集成的原则\"></a>持续集成的原则</h3><p>业界普遍认同的持续集成的原则包括：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。</div><div class=\"line\">开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。</div><div class=\"line\">需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。</div><div class=\"line\">必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。</div></pre></td></tr></table></figure></p>\n<h3 id=\"持续集成系统的组成\"><a href=\"#持续集成系统的组成\" class=\"headerlink\" title=\"持续集成系统的组成\"></a>持续集成系统的组成</h3><p>由此可见，一个完整的构建系统必须包括：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">一个自动构建过程，包括自动编译、分发、部署和测试等。</div><div class=\"line\">一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。</div><div class=\"line\">一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。</div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面的介绍估计了解得差不多了。 </p>\n<p>另外还会有ivy，下面内容是它的简介。</p>\n<pre><code>Apache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 \n\n公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。\n</code></pre><p>傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。</p>\n<p>说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。</p>\n<p>今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。</p>\n","excerpt":"","more":"<p> 今天主要是浏览了公司的api的各种测试类，在测试的时候出现很多问题，如登陆的非法问题，原因是有个tokenRefresh的类需要更新，然后才能测试api的各种类。测试类的时候，会用debug来运行junit测试，来看看整个测试时怎么走，在走的过程中，也遇到过很多问题，公司里面很多类都通过jar包来管理，所以debug到一定的类时会有找不到类的情况，所以单步的时候很多时候都会头晕了。另外，再看看公司的代码规范文档，有很多问题在代码上面需要注意的。还有一点就是公司的项目用到的技术真的很多，有持续集成的，有ivy的，文档都有说到。公司用到的服务器也是Jenkins，下面内容来自</p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-jenkins/\">Jenkins</a>.</p>\n<h2 id=\"持续集成概述\"><a href=\"#持续集成概述\" class=\"headerlink\" title=\"持续集成概述\"></a>持续集成概述</h2><h3 id=\"什么是持续集成\"><a href=\"#什么是持续集成\" class=\"headerlink\" title=\"什么是持续集成\"></a>什么是持续集成</h3><p>随着软件开发复杂度的不断提高，团队开发成员间如何更好地协同工作以确保软件开发的质量已经慢慢成为开发过程中不可回避的问题。尤其是近些年来，敏捷（Agile） 在软件工程领域越来越红火，如何能再不断变化的需求中快速适应和保证软件的质量也显得尤其的重要。</p>\n<p>持续集成正是针对这一类问题的一种软件开发实践。它倡导团队开发成员必须经常集成他们的工作，甚至每天都可能发生多次集成。而每次的集成都是通过自动化的构建来验证，包括自动编译、发布和测试，从而尽快地发现集成错误，让团队能够更快的开发内聚的软件。</p>\n<p>持续集成的核心价值在于：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量。</div><div class=\"line\">持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能。</div><div class=\"line\">持续集成还能利于软件本身的发展趋势，这点在需求不明确或是频繁性变更的情景中尤其重要，持续集成的质量能帮助团队进行有效决策，同时建立团队对开发产品的信心。</div></pre></td></tr></table></figure></p>\n<h3 id=\"持续集成的原则\"><a href=\"#持续集成的原则\" class=\"headerlink\" title=\"持续集成的原则\"></a>持续集成的原则</h3><p>业界普遍认同的持续集成的原则包括：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">需要版本控制软件保障团队成员提交的代码不会导致集成失败，常用的版本控制软件有 IBM Rational ClearCase、CVS、Subversion 等。</div><div class=\"line\">开发人员必须及时向版本控制库中提交代码，也必须经常性地从版本控制库中更新代码到本地。</div><div class=\"line\">需要有专门的集成服务器来执行集成构建，根据项目的具体实际，集成构建可以被软件的修改来直接触发，也可以定时启动，如每半个小时构建一次。</div><div class=\"line\">必须保证构建的成功;如果构建失败，修复构建过程中的错误是优先级最高的工作。一旦修复，需要手动启动一次构建。</div></pre></td></tr></table></figure></p>\n<h3 id=\"持续集成系统的组成\"><a href=\"#持续集成系统的组成\" class=\"headerlink\" title=\"持续集成系统的组成\"></a>持续集成系统的组成</h3><p>由此可见，一个完整的构建系统必须包括：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">一个自动构建过程，包括自动编译、分发、部署和测试等。</div><div class=\"line\">一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库。</div><div class=\"line\">一个持续集成服务器，Jenkins就是一个配置简单和使用方便的持续集成服务器。</div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面的介绍估计了解得差不多了。 </p>\n<p>另外还会有ivy，下面内容是它的简介。</p>\n<pre><code>Apache Ivy 是Apache Ant 的一个子项目，提供了一致、可重复、易于维护的方法，来管理项目的所有构建依赖项。它提供了一些强大的功能包括依赖传递，ant集成, maven存储库兼容，持续集成，html报告等。 \n\n公司的项目ivy主要是用来依赖管理啊相关的jar包，跟maven差不多，也是管理jar包一种方式，当时我用 ivy的时候，真的很方便，只要在ivy.xml文件配置jar包。相关的jar包会自动加入到项目中来，这个是我学过很好的管理jar包的工具了。\n</code></pre><p>傍晚公司有培训，关于网页爬虫的，用java实现的，看到公司这样的氛围是不错的，以前没有接触过网页爬虫，现在听了一课，觉得在一定程度上会给我们带来便利，于是我很认真了听完了整个培训，了解到爬虫的流程，以及代码的实现，相关的算法，突然觉得有时间还是要看看爬虫有关的东西，会给自己带来更好的知识。</p>\n<p>说真的，在这公司给自己带来的收获还是蛮多的，自己也真的学习到很多东西。</p>\n<p>今天开了博客，为了让自己在以后的日子能到自己过去是如何成长的。</p>\n"},{"title":"next部署git页面资源加载404","date":"2016-11-18T07:44:41.000Z","_content":" ## 资源404\n - 引用一下其他博主的话，这位博主不要生气哦，资源共享嘛\n ** 最近github page更新了，GitHub Pages 过滤掉了 source/vendors 目录的访问，所以next主题下的source下的vendors目录不能够被访问到，所以就出现了本地hexo s能够正常访问，但是deploy到github就是一片空白，按f12，可以看到大量来自source/vendors的css和js提示404 \n **\n\n![404](/img/404.png)  \n\n\n- 这两天推送git的时候发现，推送hexo成功，但是在github上面打开就报了一堆404找不到资源的情况。所有的配置都已经配置好的，跟以前没有什么区别，然后自己再反复找下是不是hexo的问题，然后就重新装了hexo。发现问题还是存在，于是就度娘了一下，原来最近真的有这样情况，然后next的博主也在git上面解决了这个bug，详情请看[资源加载失败](https://github.com/iissnan/hexo-theme-next/issues/1214 \"issues\")，原来是有个jekyll的东西改了，导致不能加载这些资源。\n\n- 看到比较快的解决方法，亲测成功，因为我把博主的master的git删掉了，我在想当初我怎么这么手贱啊。同时我也改了挺多博主的东西，免得冲突了。听说博主更新了很多东西，最近实在是太忙了，没有去研究博主的新东西。我还是很喜欢next 这个主题的。更好的方法应该是直接更新博主的next master了。\n\n### 解决方法\n- 参考: issue: #1220\n- 步骤:\n```\n.deploy_git 目录, 添加 .nojekyll 空文件\nsource目录, 添加.nojekyll 空文件\n修改 Hexo 上层_config.yml配置文件, 添加\ninclude:\n  - .nojekyll\n重新部署推送: hexo d -g\n```\n\n## 同时出现的问题\n- 添加以上内容的时候，还发现win10直接添加.xx的文件是不行。后来想到绝招，使用git bash 添加文件，真是无所不能。git base的命令跟linux的命令几乎一样，所以一下就建好了。新建文件命令\n```\ntouch .nojekyll\n```\n- 这个bug 就解决到这了。嘻嘻","source":"_posts/next.md","raw":"---\ntitle: next部署git页面资源加载404\ndate: 2016-11-18 15:44:41\ntags: \n- hexo\ncategories: \n- 笔记\n- bug\n---\n ## 资源404\n - 引用一下其他博主的话，这位博主不要生气哦，资源共享嘛\n ** 最近github page更新了，GitHub Pages 过滤掉了 source/vendors 目录的访问，所以next主题下的source下的vendors目录不能够被访问到，所以就出现了本地hexo s能够正常访问，但是deploy到github就是一片空白，按f12，可以看到大量来自source/vendors的css和js提示404 \n **\n\n![404](/img/404.png)  \n\n\n- 这两天推送git的时候发现，推送hexo成功，但是在github上面打开就报了一堆404找不到资源的情况。所有的配置都已经配置好的，跟以前没有什么区别，然后自己再反复找下是不是hexo的问题，然后就重新装了hexo。发现问题还是存在，于是就度娘了一下，原来最近真的有这样情况，然后next的博主也在git上面解决了这个bug，详情请看[资源加载失败](https://github.com/iissnan/hexo-theme-next/issues/1214 \"issues\")，原来是有个jekyll的东西改了，导致不能加载这些资源。\n\n- 看到比较快的解决方法，亲测成功，因为我把博主的master的git删掉了，我在想当初我怎么这么手贱啊。同时我也改了挺多博主的东西，免得冲突了。听说博主更新了很多东西，最近实在是太忙了，没有去研究博主的新东西。我还是很喜欢next 这个主题的。更好的方法应该是直接更新博主的next master了。\n\n### 解决方法\n- 参考: issue: #1220\n- 步骤:\n```\n.deploy_git 目录, 添加 .nojekyll 空文件\nsource目录, 添加.nojekyll 空文件\n修改 Hexo 上层_config.yml配置文件, 添加\ninclude:\n  - .nojekyll\n重新部署推送: hexo d -g\n```\n\n## 同时出现的问题\n- 添加以上内容的时候，还发现win10直接添加.xx的文件是不行。后来想到绝招，使用git bash 添加文件，真是无所不能。git base的命令跟linux的命令几乎一样，所以一下就建好了。新建文件命令\n```\ntouch .nojekyll\n```\n- 这个bug 就解决到这了。嘻嘻","slug":"next","published":1,"updated":"2016-11-18T08:14:58.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji676001f1gfpd8le0u1v","content":"<h2 id=\"资源404\"><a href=\"#资源404\" class=\"headerlink\" title=\"资源404\"></a>资源404</h2><ul>\n<li>引用一下其他博主的话，这位博主不要生气哦，资源共享嘛<br><strong> 最近github page更新了，GitHub Pages 过滤掉了 source/vendors 目录的访问，所以next主题下的source下的vendors目录不能够被访问到，所以就出现了本地hexo s能够正常访问，但是deploy到github就是一片空白，按f12，可以看到大量来自source/vendors的css和js提示404 \n</strong></li>\n</ul>\n<p><img src=\"/img/404.png\" alt=\"404\">  </p>\n<ul>\n<li><p>这两天推送git的时候发现，推送hexo成功，但是在github上面打开就报了一堆404找不到资源的情况。所有的配置都已经配置好的，跟以前没有什么区别，然后自己再反复找下是不是hexo的问题，然后就重新装了hexo。发现问题还是存在，于是就度娘了一下，原来最近真的有这样情况，然后next的博主也在git上面解决了这个bug，详情请看<a href=\"https://github.com/iissnan/hexo-theme-next/issues/1214\" title=\"issues\" target=\"_blank\" rel=\"external\">资源加载失败</a>，原来是有个jekyll的东西改了，导致不能加载这些资源。</p>\n</li>\n<li><p>看到比较快的解决方法，亲测成功，因为我把博主的master的git删掉了，我在想当初我怎么这么手贱啊。同时我也改了挺多博主的东西，免得冲突了。听说博主更新了很多东西，最近实在是太忙了，没有去研究博主的新东西。我还是很喜欢next 这个主题的。更好的方法应该是直接更新博主的next master了。</p>\n</li>\n</ul>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li>参考: issue: #1220</li>\n<li>步骤:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.deploy_git 目录, 添加 .nojekyll 空文件</div><div class=\"line\">source目录, 添加.nojekyll 空文件</div><div class=\"line\">修改 Hexo 上层_config.yml配置文件, 添加</div><div class=\"line\">include:</div><div class=\"line\">  - .nojekyll</div><div class=\"line\">重新部署推送: hexo d -g</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"同时出现的问题\"><a href=\"#同时出现的问题\" class=\"headerlink\" title=\"同时出现的问题\"></a>同时出现的问题</h2><ul>\n<li><p>添加以上内容的时候，还发现win10直接添加.xx的文件是不行。后来想到绝招，使用git bash 添加文件，真是无所不能。git base的命令跟linux的命令几乎一样，所以一下就建好了。新建文件命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch .nojekyll</div></pre></td></tr></table></figure>\n</li>\n<li><p>这个bug 就解决到这了。嘻嘻</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"资源404\"><a href=\"#资源404\" class=\"headerlink\" title=\"资源404\"></a>资源404</h2><ul>\n<li>引用一下其他博主的话，这位博主不要生气哦，资源共享嘛<br><strong> 最近github page更新了，GitHub Pages 过滤掉了 source/vendors 目录的访问，所以next主题下的source下的vendors目录不能够被访问到，所以就出现了本地hexo s能够正常访问，但是deploy到github就是一片空白，按f12，可以看到大量来自source/vendors的css和js提示404 \n</strong></li>\n</ul>\n<p><img src=\"/img/404.png\" alt=\"404\">  </p>\n<ul>\n<li><p>这两天推送git的时候发现，推送hexo成功，但是在github上面打开就报了一堆404找不到资源的情况。所有的配置都已经配置好的，跟以前没有什么区别，然后自己再反复找下是不是hexo的问题，然后就重新装了hexo。发现问题还是存在，于是就度娘了一下，原来最近真的有这样情况，然后next的博主也在git上面解决了这个bug，详情请看<a href=\"https://github.com/iissnan/hexo-theme-next/issues/1214\" title=\"issues\">资源加载失败</a>，原来是有个jekyll的东西改了，导致不能加载这些资源。</p>\n</li>\n<li><p>看到比较快的解决方法，亲测成功，因为我把博主的master的git删掉了，我在想当初我怎么这么手贱啊。同时我也改了挺多博主的东西，免得冲突了。听说博主更新了很多东西，最近实在是太忙了，没有去研究博主的新东西。我还是很喜欢next 这个主题的。更好的方法应该是直接更新博主的next master了。</p>\n</li>\n</ul>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li>参考: issue: #1220</li>\n<li>步骤:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.deploy_git 目录, 添加 .nojekyll 空文件</div><div class=\"line\">source目录, 添加.nojekyll 空文件</div><div class=\"line\">修改 Hexo 上层_config.yml配置文件, 添加</div><div class=\"line\">include:</div><div class=\"line\">  - .nojekyll</div><div class=\"line\">重新部署推送: hexo d -g</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"同时出现的问题\"><a href=\"#同时出现的问题\" class=\"headerlink\" title=\"同时出现的问题\"></a>同时出现的问题</h2><ul>\n<li><p>添加以上内容的时候，还发现win10直接添加.xx的文件是不行。后来想到绝招，使用git bash 添加文件，真是无所不能。git base的命令跟linux的命令几乎一样，所以一下就建好了。新建文件命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch .nojekyll</div></pre></td></tr></table></figure>\n</li>\n<li><p>这个bug 就解决到这了。嘻嘻</p>\n</li>\n</ul>\n"},{"title":"maven mirror修改 国内镜像","date":"2016-11-02T12:18:41.000Z","_content":" ## 修改setting.xml\n setting.xml是工程所用的maven的setting.xml,可存在maven安装目录的conf下，或者在.m2下面。\n修改 .m2 文件夹中的setting.xml 中的 <mirrors>元素。添加<mirror>子元素如下：\n```\n<mirrors>  \n    <id>alimaven</id>  \n    <name>aliyun maven</name>  \n    <url>http://maven.aliyun.com/nexus/content/groups/public/</url>  \n    <mirrorOf>central</mirrorOf>          \n  </mirror>  \n</mirrors>\n```\n阿里云的镜像，亲测很快。以后都用它了。","source":"_posts/maven_mirror.md","raw":"---\ntitle: maven mirror修改 国内镜像\ndate: 2016-11-02 20:18:41\ntags: \n- maven\n- eclipse\ncategories: \n- 笔记\n---\n ## 修改setting.xml\n setting.xml是工程所用的maven的setting.xml,可存在maven安装目录的conf下，或者在.m2下面。\n修改 .m2 文件夹中的setting.xml 中的 <mirrors>元素。添加<mirror>子元素如下：\n```\n<mirrors>  \n    <id>alimaven</id>  \n    <name>aliyun maven</name>  \n    <url>http://maven.aliyun.com/nexus/content/groups/public/</url>  \n    <mirrorOf>central</mirrorOf>          \n  </mirror>  \n</mirrors>\n```\n阿里云的镜像，亲测很快。以后都用它了。","slug":"maven_mirror","published":1,"updated":"2016-11-02T12:07:14.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji678001k1gfpmfbd5t8n","content":"<h2 id=\"修改setting-xml\"><a href=\"#修改setting-xml\" class=\"headerlink\" title=\"修改setting.xml\"></a>修改setting.xml</h2><p> setting.xml是工程所用的maven的setting.xml,可存在maven安装目录的conf下，或者在.m2下面。<br>修改 .m2 文件夹中的setting.xml 中的 <mirrors>元素。添加<mirror>子元素如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;mirrors&gt;  </div><div class=\"line\">    &lt;id&gt;alimaven&lt;/id&gt;  </div><div class=\"line\">    &lt;name&gt;aliyun maven&lt;/name&gt;  </div><div class=\"line\">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  </div><div class=\"line\">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;          </div><div class=\"line\">  &lt;/mirror&gt;  </div><div class=\"line\">&lt;/mirrors&gt;</div></pre></td></tr></table></figure></mirror></mirrors></p>\n<p>阿里云的镜像，亲测很快。以后都用它了。</p>\n","excerpt":"","more":"<h2 id=\"修改setting-xml\"><a href=\"#修改setting-xml\" class=\"headerlink\" title=\"修改setting.xml\"></a>修改setting.xml</h2><p> setting.xml是工程所用的maven的setting.xml,可存在maven安装目录的conf下，或者在.m2下面。<br>修改 .m2 文件夹中的setting.xml 中的 <mirrors>元素。添加<mirror>子元素如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;mirrors&gt;  </div><div class=\"line\">    &lt;id&gt;alimaven&lt;/id&gt;  </div><div class=\"line\">    &lt;name&gt;aliyun maven&lt;/name&gt;  </div><div class=\"line\">    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  </div><div class=\"line\">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;          </div><div class=\"line\">  &lt;/mirror&gt;  </div><div class=\"line\">&lt;/mirrors&gt;</div></pre></td></tr></table></figure></p>\n<p>阿里云的镜像，亲测很快。以后都用它了。</p>\n"},{"title":"预览office","date":"2017-10-27T02:11:41.000Z","_content":"\n ## 各处搜寻最佳方案\n   项目中需要在线预览office文档的功能，因此在网络上搜寻大量资料。最终得到以下结论\n  -  使用开源openoffice 需要搭建openoffice服务 解析office文档转成pdf 然后通过控制器响应pdf的格式输出文档        再显示到页面\n      缺点是 ：效果不好 不推荐使用（简单的office文档或许还行）  \n\n  - 使用第三方在线预览API 这个需要付费 推荐qq邮箱使用的永中第三方\n    官网地址：http://dcs.yozosoft.com/  \n    注册账号可使用免费试用次数 效果还是很满意的 并且似乎支持所有格式的文档 txt...\n\n\n  -  使用微软提供url来解析office文档 \n  预览地址：https://products.office.com/zh-CN/office-online/view-office-documents-online  \n  这种方式是最省钱 省时间 缺点是有大小限制 以及文档类型（只支持office文档word，excel，ppt）官网有写  还有 解析效果不能自定义 但是效果还是蛮不错的\n \n  - 总的来说，如果不缺钱就选用第二种，可联系第三方是否可自定义什么的，如果没钱，可选用第三种（前提是部署应用的服务器可外网访问），第一种是备选状态。\n  以上仅个人理解。","source":"_posts/view_office.md","raw":"---\ntitle: 预览office\ndate: 2017-10-27 10:11:41\ntags: \n- 在线预览\n- office\ncategories: \n- Java\n---\n\n ## 各处搜寻最佳方案\n   项目中需要在线预览office文档的功能，因此在网络上搜寻大量资料。最终得到以下结论\n  -  使用开源openoffice 需要搭建openoffice服务 解析office文档转成pdf 然后通过控制器响应pdf的格式输出文档        再显示到页面\n      缺点是 ：效果不好 不推荐使用（简单的office文档或许还行）  \n\n  - 使用第三方在线预览API 这个需要付费 推荐qq邮箱使用的永中第三方\n    官网地址：http://dcs.yozosoft.com/  \n    注册账号可使用免费试用次数 效果还是很满意的 并且似乎支持所有格式的文档 txt...\n\n\n  -  使用微软提供url来解析office文档 \n  预览地址：https://products.office.com/zh-CN/office-online/view-office-documents-online  \n  这种方式是最省钱 省时间 缺点是有大小限制 以及文档类型（只支持office文档word，excel，ppt）官网有写  还有 解析效果不能自定义 但是效果还是蛮不错的\n \n  - 总的来说，如果不缺钱就选用第二种，可联系第三方是否可自定义什么的，如果没钱，可选用第三种（前提是部署应用的服务器可外网访问），第一种是备选状态。\n  以上仅个人理解。","slug":"view_office","published":1,"updated":"2018-04-11T03:15:06.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji67a001l1gfpz48bvann","content":"<h2 id=\"各处搜寻最佳方案\"><a href=\"#各处搜寻最佳方案\" class=\"headerlink\" title=\"各处搜寻最佳方案\"></a>各处搜寻最佳方案</h2><p>   项目中需要在线预览office文档的功能，因此在网络上搜寻大量资料。最终得到以下结论</p>\n<ul>\n<li><p>使用开源openoffice 需要搭建openoffice服务 解析office文档转成pdf 然后通过控制器响应pdf的格式输出文档        再显示到页面<br> 缺点是 ：效果不好 不推荐使用（简单的office文档或许还行）  </p>\n</li>\n<li><p>使用第三方在线预览API 这个需要付费 推荐qq邮箱使用的永中第三方<br>官网地址：<a href=\"http://dcs.yozosoft.com/\" target=\"_blank\" rel=\"external\">http://dcs.yozosoft.com/</a><br>注册账号可使用免费试用次数 效果还是很满意的 并且似乎支持所有格式的文档 txt…</p>\n</li>\n</ul>\n<ul>\n<li><p>使用微软提供url来解析office文档<br>预览地址：<a href=\"https://products.office.com/zh-CN/office-online/view-office-documents-online\" target=\"_blank\" rel=\"external\">https://products.office.com/zh-CN/office-online/view-office-documents-online</a><br>这种方式是最省钱 省时间 缺点是有大小限制 以及文档类型（只支持office文档word，excel，ppt）官网有写  还有 解析效果不能自定义 但是效果还是蛮不错的</p>\n</li>\n<li><p>总的来说，如果不缺钱就选用第二种，可联系第三方是否可自定义什么的，如果没钱，可选用第三种（前提是部署应用的服务器可外网访问），第一种是备选状态。<br>以上仅个人理解。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"各处搜寻最佳方案\"><a href=\"#各处搜寻最佳方案\" class=\"headerlink\" title=\"各处搜寻最佳方案\"></a>各处搜寻最佳方案</h2><p>   项目中需要在线预览office文档的功能，因此在网络上搜寻大量资料。最终得到以下结论</p>\n<ul>\n<li><p>使用开源openoffice 需要搭建openoffice服务 解析office文档转成pdf 然后通过控制器响应pdf的格式输出文档        再显示到页面<br> 缺点是 ：效果不好 不推荐使用（简单的office文档或许还行）  </p>\n</li>\n<li><p>使用第三方在线预览API 这个需要付费 推荐qq邮箱使用的永中第三方<br>官网地址：<a href=\"http://dcs.yozosoft.com/\">http://dcs.yozosoft.com/</a><br>注册账号可使用免费试用次数 效果还是很满意的 并且似乎支持所有格式的文档 txt…</p>\n</li>\n</ul>\n<ul>\n<li><p>使用微软提供url来解析office文档<br>预览地址：<a href=\"https://products.office.com/zh-CN/office-online/view-office-documents-online\">https://products.office.com/zh-CN/office-online/view-office-documents-online</a><br>这种方式是最省钱 省时间 缺点是有大小限制 以及文档类型（只支持office文档word，excel，ppt）官网有写  还有 解析效果不能自定义 但是效果还是蛮不错的</p>\n</li>\n<li><p>总的来说，如果不缺钱就选用第二种，可联系第三方是否可自定义什么的，如果没钱，可选用第三种（前提是部署应用的服务器可外网访问），第一种是备选状态。<br>以上仅个人理解。</p>\n</li>\n</ul>\n"},{"title":"spring aop 初体验","date":"2017-06-28T02:53:41.000Z","_content":"\n ## AOP\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n ## AOP核心概念\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（introduction）\n\n在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\nSpring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了\n\n2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB\n\nAOP的实现也不是难事，配置下文件（可用注解），可分3步。\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。\n\n\neg:aop.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd\">\n            \n</beans>\n```\n\n## 基于Spring的AOP简单实现\n需要额外下载以下两个jar\n\n1、aopalliance.jar\n\n2、aspectjweaver.jar\n\nxml实现方式，注解方式就不多说了。\n- 声明接口\n```\npublic interface HelloWorld\n{\n    void printHelloWorld();\n    void doPrint();\n}\n```\n- 添加接口实现\n```\npublic class HelloWorldImpl implements HelloWorld\n{\n    public void printHelloWorld()\n    {\n        System.out.println(\"Enter HelloWorldImpl.printHelloWorld()\");\n    }\n    \n    public void doPrint()\n    {\n        System.out.println(\"Enter HelloWorldImpl.doPrint()\");\n        return ;\n    }\n}\n```\n- 横切关注点，这里是打印时间：\n```\npublic class TimeHandler\n{\n    public void printTime()\n    {\n        System.out.println(\"CurrentTime = \" + System.currentTimeMillis());\n    }\n}\n```\n\n-aop.xml配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd\">\n        \n        <bean id=\"helloWorldImpl\" class=\"com.xrq.aop.HelloWorldImpl\" />\n     \n        <bean id=\"timeHandler\" class=\"com.xrq.aop.TimeHandler\" />\n        \n        <aop:config>\n            <aop:aspect id=\"time\" ref=\"timeHandler\">\n                <aop:pointcut id=\"addAllMethod\" expression=\"execution(* com.xrq.aop.HelloWorld.*(..))\" />\n                <aop:before method=\"printTime\" pointcut-ref=\"addAllMethod\" />\n                <aop:after method=\"printTime\" pointcut-ref=\"addAllMethod\" />\n            </aop:aspect>\n        </aop:config>\n</beans>\n```\n\n- main 方法\n```\npublic static void main(String[] args)\n{\n    ApplicationContext ctx = \n            new ClassPathXmlApplicationContext(\"aop.xml\");\n        \n    HelloWorld hw1 = (HelloWorld)ctx.getBean(\"helloWorldImpl\");\n   \n    hw1.printHelloWorld();\n    System.out.println();\n    hw1.doPrint();\n \n}\n```\n- 结果\n```\nCurrentTime = 1446129611993\nEnter HelloWorldImpl.printHelloWorld()\nCurrentTime = 1446129611993\n\nCurrentTime = 1446129611994\nEnter HelloWorldImpl.doPrint()\nCurrentTime = 1446129611994\n```\n\n- 总结\n   很不好意思地从度娘那拷过来的，暂时对aop的理解还没有这么深刻，但是使用过之后已经有了进一步的了解，然后再通过这篇博文发现对aop更加了解。以后对于一些能用aop方式解决的问题，还是用aop。\n   总得来讲，现在公司的所有模块都几乎没有用aop，这是有很大的优化空间啊，因为看到一堆重复的代码，真叫人费解。","source":"_posts/springAOP.md","raw":"---\ntitle: spring aop 初体验\ndate: 2017-06-28 10:53:41\ntags: \n- spring\n- aop\ncategories: \n- spring\n---\n\n ## AOP\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n ## AOP核心概念\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（introduction）\n\n在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\nSpring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了\n\n2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB\n\nAOP的实现也不是难事，配置下文件（可用注解），可分3步。\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。\n\n\neg:aop.xml\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd\">\n            \n</beans>\n```\n\n## 基于Spring的AOP简单实现\n需要额外下载以下两个jar\n\n1、aopalliance.jar\n\n2、aspectjweaver.jar\n\nxml实现方式，注解方式就不多说了。\n- 声明接口\n```\npublic interface HelloWorld\n{\n    void printHelloWorld();\n    void doPrint();\n}\n```\n- 添加接口实现\n```\npublic class HelloWorldImpl implements HelloWorld\n{\n    public void printHelloWorld()\n    {\n        System.out.println(\"Enter HelloWorldImpl.printHelloWorld()\");\n    }\n    \n    public void doPrint()\n    {\n        System.out.println(\"Enter HelloWorldImpl.doPrint()\");\n        return ;\n    }\n}\n```\n- 横切关注点，这里是打印时间：\n```\npublic class TimeHandler\n{\n    public void printTime()\n    {\n        System.out.println(\"CurrentTime = \" + System.currentTimeMillis());\n    }\n}\n```\n\n-aop.xml配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd\">\n        \n        <bean id=\"helloWorldImpl\" class=\"com.xrq.aop.HelloWorldImpl\" />\n     \n        <bean id=\"timeHandler\" class=\"com.xrq.aop.TimeHandler\" />\n        \n        <aop:config>\n            <aop:aspect id=\"time\" ref=\"timeHandler\">\n                <aop:pointcut id=\"addAllMethod\" expression=\"execution(* com.xrq.aop.HelloWorld.*(..))\" />\n                <aop:before method=\"printTime\" pointcut-ref=\"addAllMethod\" />\n                <aop:after method=\"printTime\" pointcut-ref=\"addAllMethod\" />\n            </aop:aspect>\n        </aop:config>\n</beans>\n```\n\n- main 方法\n```\npublic static void main(String[] args)\n{\n    ApplicationContext ctx = \n            new ClassPathXmlApplicationContext(\"aop.xml\");\n        \n    HelloWorld hw1 = (HelloWorld)ctx.getBean(\"helloWorldImpl\");\n   \n    hw1.printHelloWorld();\n    System.out.println();\n    hw1.doPrint();\n \n}\n```\n- 结果\n```\nCurrentTime = 1446129611993\nEnter HelloWorldImpl.printHelloWorld()\nCurrentTime = 1446129611993\n\nCurrentTime = 1446129611994\nEnter HelloWorldImpl.doPrint()\nCurrentTime = 1446129611994\n```\n\n- 总结\n   很不好意思地从度娘那拷过来的，暂时对aop的理解还没有这么深刻，但是使用过之后已经有了进一步的了解，然后再通过这篇博文发现对aop更加了解。以后对于一些能用aop方式解决的问题，还是用aop。\n   总得来讲，现在公司的所有模块都几乎没有用aop，这是有很大的优化空间啊，因为看到一堆重复的代码，真叫人费解。","slug":"springAOP","published":1,"updated":"2017-07-06T12:50:19.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfuji67c001p1gfpvvu0zmdd","content":"<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（introduction）</p>\n<p>在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了</p>\n<p>2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB</p>\n<p>AOP的实现也不是难事，配置下文件（可用注解），可分3步。</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。</p>\n<p>eg:aop.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop</div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class=\"line\">            </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"基于Spring的AOP简单实现\"><a href=\"#基于Spring的AOP简单实现\" class=\"headerlink\" title=\"基于Spring的AOP简单实现\"></a>基于Spring的AOP简单实现</h2><p>需要额外下载以下两个jar</p>\n<p>1、aopalliance.jar</p>\n<p>2、aspectjweaver.jar</p>\n<p>xml实现方式，注解方式就不多说了。</p>\n<ul>\n<li><p>声明接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface HelloWorld</div><div class=\"line\">&#123;</div><div class=\"line\">    void printHelloWorld();</div><div class=\"line\">    void doPrint();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加接口实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class HelloWorldImpl implements HelloWorld</div><div class=\"line\">&#123;</div><div class=\"line\">    public void printHelloWorld()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;Enter HelloWorldImpl.printHelloWorld()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public void doPrint()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;Enter HelloWorldImpl.doPrint()&quot;);</div><div class=\"line\">        return ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>横切关注点，这里是打印时间：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TimeHandler</div><div class=\"line\">&#123;</div><div class=\"line\">    public void printTime()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;CurrentTime = &quot; + System.currentTimeMillis());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-aop.xml配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop</div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;bean id=&quot;helloWorldImpl&quot; class=&quot;com.xrq.aop.HelloWorldImpl&quot; /&gt;</div><div class=\"line\">     </div><div class=\"line\">        &lt;bean id=&quot;timeHandler&quot; class=&quot;com.xrq.aop.TimeHandler&quot; /&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;aop:config&gt;</div><div class=\"line\">            &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot;&gt;</div><div class=\"line\">                &lt;aop:pointcut id=&quot;addAllMethod&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.*(..))&quot; /&gt;</div><div class=\"line\">                &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class=\"line\">                &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class=\"line\">            &lt;/aop:aspect&gt;</div><div class=\"line\">        &lt;/aop:config&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>main 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String[] args)</div><div class=\"line\">&#123;</div><div class=\"line\">    ApplicationContext ctx = </div><div class=\"line\">            new ClassPathXmlApplicationContext(&quot;aop.xml&quot;);</div><div class=\"line\">        </div><div class=\"line\">    HelloWorld hw1 = (HelloWorld)ctx.getBean(&quot;helloWorldImpl&quot;);</div><div class=\"line\">   </div><div class=\"line\">    hw1.printHelloWorld();</div><div class=\"line\">    System.out.println();</div><div class=\"line\">    hw1.doPrint();</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">CurrentTime = 1446129611993</div><div class=\"line\">Enter HelloWorldImpl.printHelloWorld()</div><div class=\"line\">CurrentTime = 1446129611993</div><div class=\"line\"></div><div class=\"line\">CurrentTime = 1446129611994</div><div class=\"line\">Enter HelloWorldImpl.doPrint()</div><div class=\"line\">CurrentTime = 1446129611994</div></pre></td></tr></table></figure>\n</li>\n<li><p>总结<br> 很不好意思地从度娘那拷过来的，暂时对aop的理解还没有这么深刻，但是使用过之后已经有了进一步的了解，然后再通过这篇博文发现对aop更加了解。以后对于一些能用aop方式解决的问题，还是用aop。<br> 总得来讲，现在公司的所有模块都几乎没有用aop，这是有很大的优化空间啊，因为看到一堆重复的代码，真叫人费解。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（introduction）</p>\n<p>在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了</p>\n<p>2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB</p>\n<p>AOP的实现也不是难事，配置下文件（可用注解），可分3步。</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：代理对象的方法=增强处理+被代理对象的方法。</p>\n<p>eg:aop.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop</div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class=\"line\">            </div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"基于Spring的AOP简单实现\"><a href=\"#基于Spring的AOP简单实现\" class=\"headerlink\" title=\"基于Spring的AOP简单实现\"></a>基于Spring的AOP简单实现</h2><p>需要额外下载以下两个jar</p>\n<p>1、aopalliance.jar</p>\n<p>2、aspectjweaver.jar</p>\n<p>xml实现方式，注解方式就不多说了。</p>\n<ul>\n<li><p>声明接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface HelloWorld</div><div class=\"line\">&#123;</div><div class=\"line\">    void printHelloWorld();</div><div class=\"line\">    void doPrint();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加接口实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class HelloWorldImpl implements HelloWorld</div><div class=\"line\">&#123;</div><div class=\"line\">    public void printHelloWorld()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;Enter HelloWorldImpl.printHelloWorld()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public void doPrint()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;Enter HelloWorldImpl.doPrint()&quot;);</div><div class=\"line\">        return ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>横切关注点，这里是打印时间：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class TimeHandler</div><div class=\"line\">&#123;</div><div class=\"line\">    public void printTime()</div><div class=\"line\">    &#123;</div><div class=\"line\">        System.out.println(&quot;CurrentTime = &quot; + System.currentTimeMillis());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-aop.xml配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</div><div class=\"line\">    xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class=\"line\">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class=\"line\">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</div><div class=\"line\">        http://www.springframework.org/schema/aop</div><div class=\"line\">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;bean id=&quot;helloWorldImpl&quot; class=&quot;com.xrq.aop.HelloWorldImpl&quot; /&gt;</div><div class=\"line\">     </div><div class=\"line\">        &lt;bean id=&quot;timeHandler&quot; class=&quot;com.xrq.aop.TimeHandler&quot; /&gt;</div><div class=\"line\">        </div><div class=\"line\">        &lt;aop:config&gt;</div><div class=\"line\">            &lt;aop:aspect id=&quot;time&quot; ref=&quot;timeHandler&quot;&gt;</div><div class=\"line\">                &lt;aop:pointcut id=&quot;addAllMethod&quot; expression=&quot;execution(* com.xrq.aop.HelloWorld.*(..))&quot; /&gt;</div><div class=\"line\">                &lt;aop:before method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class=\"line\">                &lt;aop:after method=&quot;printTime&quot; pointcut-ref=&quot;addAllMethod&quot; /&gt;</div><div class=\"line\">            &lt;/aop:aspect&gt;</div><div class=\"line\">        &lt;/aop:config&gt;</div><div class=\"line\">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>main 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void main(String[] args)</div><div class=\"line\">&#123;</div><div class=\"line\">    ApplicationContext ctx = </div><div class=\"line\">            new ClassPathXmlApplicationContext(&quot;aop.xml&quot;);</div><div class=\"line\">        </div><div class=\"line\">    HelloWorld hw1 = (HelloWorld)ctx.getBean(&quot;helloWorldImpl&quot;);</div><div class=\"line\">   </div><div class=\"line\">    hw1.printHelloWorld();</div><div class=\"line\">    System.out.println();</div><div class=\"line\">    hw1.doPrint();</div><div class=\"line\"> </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">CurrentTime = 1446129611993</div><div class=\"line\">Enter HelloWorldImpl.printHelloWorld()</div><div class=\"line\">CurrentTime = 1446129611993</div><div class=\"line\"></div><div class=\"line\">CurrentTime = 1446129611994</div><div class=\"line\">Enter HelloWorldImpl.doPrint()</div><div class=\"line\">CurrentTime = 1446129611994</div></pre></td></tr></table></figure>\n</li>\n<li><p>总结<br> 很不好意思地从度娘那拷过来的，暂时对aop的理解还没有这么深刻，但是使用过之后已经有了进一步的了解，然后再通过这篇博文发现对aop更加了解。以后对于一些能用aop方式解决的问题，还是用aop。<br> 总得来讲，现在公司的所有模块都几乎没有用aop，这是有很大的优化空间啊，因为看到一堆重复的代码，真叫人费解。</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfuji66300031gfpvb38xsrb","category_id":"cjfuji66e000b1gfp14jv1kok","_id":"cjfuji66k000j1gfpnrlblc5s"},{"post_id":"cjfuji66900071gfpwcrnru77","category_id":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji66q000o1gfpvaeb9c2d"},{"post_id":"cjfuji66l000m1gfpxco6ez4g","category_id":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji66v000t1gfpbhzw08co"},{"post_id":"cjfuji66b00091gfpiflsar6q","category_id":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji66v000w1gfpc3lw0oo2"},{"post_id":"cjfuji66v000u1gfpf2s7a72a","category_id":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji67000131gfpi2oc5k8w"},{"post_id":"cjfuji66f000d1gfpjrv8e9sp","category_id":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji676001e1gfp7vjwgd5f"},{"post_id":"cjfuji67200181gfpo6t6illw","category_id":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji678001i1gfpsguq7ds4"},{"post_id":"cjfuji675001c1gfp7lnfbdzs","category_id":"cjfuji66600051gfpcpynztyh","_id":"cjfuji67a001m1gfpt60ky2a3"},{"post_id":"cjfuji675001c1gfp7lnfbdzs","category_id":"cjfuji66s000p1gfpi6bianev","_id":"cjfuji67d001q1gfpisehj8xe"},{"post_id":"cjfuji678001k1gfpmfbd5t8n","category_id":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji67e001s1gfpx1yhprw0"},{"post_id":"cjfuji66i000h1gfp808e3rwx","category_id":"cjfuji66600051gfpcpynztyh","_id":"cjfuji67f001v1gfp328zkjw8"},{"post_id":"cjfuji66i000h1gfp808e3rwx","category_id":"cjfuji677001g1gfp5s3j1838","_id":"cjfuji67g001x1gfpufjbskss"},{"post_id":"cjfuji67a001l1gfpz48bvann","category_id":"cjfuji66600051gfpcpynztyh","_id":"cjfuji67h001z1gfpymawcjfk"},{"post_id":"cjfuji65z00011gfpvlk3st7c","category_id":"cjfuji66600051gfpcpynztyh","_id":"cjfuji67j00281gfpwwvllwkr"},{"post_id":"cjfuji65z00011gfpvlk3st7c","category_id":"cjfuji66s000p1gfpi6bianev","_id":"cjfuji67k002a1gfpnlqfsjl8"},{"post_id":"cjfuji65z00011gfpvlk3st7c","category_id":"cjfuji67h00221gfpyuucldhm","_id":"cjfuji67k002c1gfp7oh505hn"},{"post_id":"cjfuji673001a1gfp90kivbcd","category_id":"cjfuji67n002j1gfp5vw3vcs8","_id":"cjfuji67o002q1gfpm8qy5gxx"},{"post_id":"cjfuji66g000e1gfp1qh1xjt6","category_id":"cjfuji67300191gfpb0v1foes","_id":"cjfuji67p002v1gfprs9o7p7m"},{"post_id":"cjfuji66g000e1gfp1qh1xjt6","category_id":"cjfuji67o002o1gfphdoay63z","_id":"cjfuji67q002y1gfp4bm09ye5"},{"post_id":"cjfuji676001f1gfpd8le0u1v","category_id":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji67q00301gfpqeyw7jmr"},{"post_id":"cjfuji676001f1gfpd8le0u1v","category_id":"cjfuji67o002r1gfpbs3m5pcc","_id":"cjfuji67r00331gfp2zrwmz4c"},{"post_id":"cjfuji67c001p1gfpvvu0zmdd","category_id":"cjfuji67q002x1gfpou2weevq","_id":"cjfuji67s00361gfp63jnkkdp"},{"post_id":"cjfuji66j000i1gfppevovp07","category_id":"cjfuji66600051gfpcpynztyh","_id":"cjfuji67t003a1gfp7yh85w6r"},{"post_id":"cjfuji66j000i1gfppevovp07","category_id":"cjfuji67b001n1gfp9uod99s1","_id":"cjfuji67u003d1gfpwxkgds6d"},{"post_id":"cjfuji66j000i1gfppevovp07","category_id":"cjfuji67r00321gfpydyurtva","_id":"cjfuji67v003g1gfp4ytmzgp8"},{"post_id":"cjfuji66n000n1gfpagpwmivs","category_id":"cjfuji66600051gfpcpynztyh","_id":"cjfuji67w003i1gfp57f5685p"},{"post_id":"cjfuji66n000n1gfpagpwmivs","category_id":"cjfuji67b001n1gfp9uod99s1","_id":"cjfuji67x003k1gfpnn2fmt71"},{"post_id":"cjfuji66n000n1gfpagpwmivs","category_id":"cjfuji67r00321gfpydyurtva","_id":"cjfuji67y003n1gfps2r5nken"},{"post_id":"cjfuji66u000r1gfpkxi155qp","category_id":"cjfuji67g001y1gfpvvqgahkb","_id":"cjfuji67z003q1gfpwe9v8jyu"},{"post_id":"cjfuji66u000r1gfpkxi155qp","category_id":"cjfuji67t003b1gfpyjl2romf","_id":"cjfuji67z003s1gfpse4q6iwn"},{"post_id":"cjfuji66w000y1gfpimf6e7b6","category_id":"cjfuji67g001y1gfpvvqgahkb","_id":"cjfuji680003t1gfppzvd3ots"},{"post_id":"cjfuji66w000y1gfpimf6e7b6","category_id":"cjfuji67t003b1gfpyjl2romf","_id":"cjfuji681003x1gfpxpd41htx"},{"post_id":"cjfuji66y00111gfpg1u5dy34","category_id":"cjfuji67g001y1gfpvvqgahkb","_id":"cjfuji682003z1gfp222iy2qy"},{"post_id":"cjfuji66y00111gfpg1u5dy34","category_id":"cjfuji67x003m1gfpa0efyckz","_id":"cjfuji68300411gfp9ed63ekw"},{"post_id":"cjfuji66d000a1gfpp9gvla0h","category_id":"cjfuji66h000f1gfpexcevncq","_id":"cjfuji68300421gfpfhpkcdal"},{"post_id":"cjfuji66d000a1gfpp9gvla0h","category_id":"cjfuji67l002e1gfpom0jvn9y","_id":"cjfuji68300441gfp9azwkl79"},{"post_id":"cjfuji66d000a1gfpp9gvla0h","category_id":"cjfuji67z003r1gfph3iplynv","_id":"cjfuji68400461gfpbg7slrkf"},{"post_id":"cjfuji67000151gfpvwxrjj1r","category_id":"cjfuji67g001y1gfpvvqgahkb","_id":"cjfuji68400491gfpfbhl0om5"},{"post_id":"cjfuji67000151gfpvwxrjj1r","category_id":"cjfuji67t003b1gfpyjl2romf","_id":"cjfuji685004a1gfpptvsabti"}],"PostTag":[{"post_id":"cjfuji65z00011gfpvlk3st7c","tag_id":"cjfuji66700061gfp4osl4c3f","_id":"cjfuji66v000s1gfpkxa4jit9"},{"post_id":"cjfuji65z00011gfpvlk3st7c","tag_id":"cjfuji66e000c1gfp24kskabn","_id":"cjfuji66v000v1gfpus838jm9"},{"post_id":"cjfuji65z00011gfpvlk3st7c","tag_id":"cjfuji66i000g1gfp0dkkjtn9","_id":"cjfuji66y00101gfptkysc7f8"},{"post_id":"cjfuji65z00011gfpvlk3st7c","tag_id":"cjfuji66l000l1gfp0nwswoq7","_id":"cjfuji66z00121gfpdog4fxs7"},{"post_id":"cjfuji66300031gfpvb38xsrb","tag_id":"cjfuji66s000q1gfp9aacgyxy","_id":"cjfuji67200171gfpd4rb7bmh"},{"post_id":"cjfuji66900071gfpwcrnru77","tag_id":"cjfuji66y000z1gfpfmyjrq7c","_id":"cjfuji675001d1gfp9amvxkjn"},{"post_id":"cjfuji66900071gfpwcrnru77","tag_id":"cjfuji67100161gfpmzpu2zt6","_id":"cjfuji678001h1gfphx4vc2ya"},{"post_id":"cjfuji66b00091gfpiflsar6q","tag_id":"cjfuji66y000z1gfpfmyjrq7c","_id":"cjfuji67e001r1gfpovt0u4o0"},{"post_id":"cjfuji66b00091gfpiflsar6q","tag_id":"cjfuji678001j1gfpuavymx6r","_id":"cjfuji67f001u1gfply7e1z1a"},{"post_id":"cjfuji66d000a1gfpp9gvla0h","tag_id":"cjfuji67c001o1gfplxovsnms","_id":"cjfuji67h00211gfpyl0mttj9"},{"post_id":"cjfuji66d000a1gfpp9gvla0h","tag_id":"cjfuji67f001w1gfpo7krrsce","_id":"cjfuji67i00231gfpmde4feoq"},{"post_id":"cjfuji66f000d1gfpjrv8e9sp","tag_id":"cjfuji67h00201gfps884e265","_id":"cjfuji67j00251gfpihz8u9k2"},{"post_id":"cjfuji66g000e1gfp1qh1xjt6","tag_id":"cjfuji67i00241gfplrdsnw6v","_id":"cjfuji67l002d1gfpz5bie1yz"},{"post_id":"cjfuji66g000e1gfp1qh1xjt6","tag_id":"cjfuji67j00271gfpj0fgrxub","_id":"cjfuji67l002f1gfp6odm5g2b"},{"post_id":"cjfuji66i000h1gfp808e3rwx","tag_id":"cjfuji66700061gfp4osl4c3f","_id":"cjfuji67n002k1gfponzgbj2u"},{"post_id":"cjfuji66i000h1gfp808e3rwx","tag_id":"cjfuji67k002b1gfpzx4p4fcm","_id":"cjfuji67n002l1gfp25kojsgu"},{"post_id":"cjfuji66i000h1gfp808e3rwx","tag_id":"cjfuji67m002g1gfpzjx4yu7i","_id":"cjfuji67o002n1gfpvh7cc21b"},{"post_id":"cjfuji66j000i1gfppevovp07","tag_id":"cjfuji66700061gfp4osl4c3f","_id":"cjfuji67p002s1gfpx79yk570"},{"post_id":"cjfuji66j000i1gfppevovp07","tag_id":"cjfuji67m002i1gfp9fcbtu0r","_id":"cjfuji67p002t1gfpzdss63mk"},{"post_id":"cjfuji66j000i1gfppevovp07","tag_id":"cjfuji67n002m1gfp66jhu556","_id":"cjfuji67p002w1gfpblnouwei"},{"post_id":"cjfuji66l000m1gfpxco6ez4g","tag_id":"cjfuji66y000z1gfpfmyjrq7c","_id":"cjfuji67r00311gfpv200ff94"},{"post_id":"cjfuji66l000m1gfpxco6ez4g","tag_id":"cjfuji67p002u1gfpm0jye5tt","_id":"cjfuji67r00341gfppsefnfyt"},{"post_id":"cjfuji66n000n1gfpagpwmivs","tag_id":"cjfuji66700061gfp4osl4c3f","_id":"cjfuji67t00391gfp6pj1cza9"},{"post_id":"cjfuji66n000n1gfpagpwmivs","tag_id":"cjfuji67m002i1gfp9fcbtu0r","_id":"cjfuji67u003c1gfpobqkldyn"},{"post_id":"cjfuji66n000n1gfpagpwmivs","tag_id":"cjfuji67n002m1gfp66jhu556","_id":"cjfuji67v003f1gfp8frqxq8f"},{"post_id":"cjfuji66u000r1gfpkxi155qp","tag_id":"cjfuji67t00381gfpfg0qnij0","_id":"cjfuji67x003l1gfp35thwx4l"},{"post_id":"cjfuji66u000r1gfpkxi155qp","tag_id":"cjfuji67u003e1gfpqr8vd4x2","_id":"cjfuji67y003o1gfpwvpndo8z"},{"post_id":"cjfuji66v000u1gfpf2s7a72a","tag_id":"cjfuji67w003j1gfpd0k6j9f7","_id":"cjfuji680003v1gfpsylu96i4"},{"post_id":"cjfuji66v000u1gfpf2s7a72a","tag_id":"cjfuji67y003p1gfpqucd3z24","_id":"cjfuji681003y1gfppbdmfu4b"},{"post_id":"cjfuji66w000y1gfpimf6e7b6","tag_id":"cjfuji680003u1gfp1otvg34s","_id":"cjfuji68400451gfpavc2o47q"},{"post_id":"cjfuji66w000y1gfpimf6e7b6","tag_id":"cjfuji68200401gfpjnr9jrsg","_id":"cjfuji68400471gfprmr05dr4"},{"post_id":"cjfuji66y00111gfpg1u5dy34","tag_id":"cjfuji68300431gfpcwuzauaq","_id":"cjfuji685004c1gfpzetorzuh"},{"post_id":"cjfuji66y00111gfpg1u5dy34","tag_id":"cjfuji68400481gfpb4vri0xb","_id":"cjfuji686004d1gfpcilohwp1"},{"post_id":"cjfuji67000151gfpvwxrjj1r","tag_id":"cjfuji685004b1gfp103y7vpf","_id":"cjfuji687004g1gfpdir562vm"},{"post_id":"cjfuji67000151gfpvwxrjj1r","tag_id":"cjfuji67u003e1gfpqr8vd4x2","_id":"cjfuji687004h1gfpwnns9v5t"},{"post_id":"cjfuji67200181gfpo6t6illw","tag_id":"cjfuji67h00201gfps884e265","_id":"cjfuji688004j1gfpoqj2tfu4"},{"post_id":"cjfuji67200181gfpo6t6illw","tag_id":"cjfuji66y000z1gfpfmyjrq7c","_id":"cjfuji688004k1gfptq9j8cgv"},{"post_id":"cjfuji673001a1gfp90kivbcd","tag_id":"cjfuji687004i1gfpoeaxgvxl","_id":"cjfuji689004n1gfpbvcqr78k"},{"post_id":"cjfuji673001a1gfp90kivbcd","tag_id":"cjfuji688004l1gfpa1g278qm","_id":"cjfuji689004o1gfpg8dq76xp"},{"post_id":"cjfuji675001c1gfp7lnfbdzs","tag_id":"cjfuji688004m1gfppx8eza8a","_id":"cjfuji68b004r1gfpdi6cn5aq"},{"post_id":"cjfuji675001c1gfp7lnfbdzs","tag_id":"cjfuji66i000g1gfp0dkkjtn9","_id":"cjfuji68b004s1gfpam4ubn4p"},{"post_id":"cjfuji675001c1gfp7lnfbdzs","tag_id":"cjfuji689004p1gfp45lv39b6","_id":"cjfuji68c004u1gfp1qjjrmls"},{"post_id":"cjfuji676001f1gfpd8le0u1v","tag_id":"cjfuji68b004q1gfpz8r5mxmy","_id":"cjfuji68c004v1gfp2uhvr0ju"},{"post_id":"cjfuji678001k1gfpmfbd5t8n","tag_id":"cjfuji68c004t1gfp3tf6mcl8","_id":"cjfuji68d004y1gfpzfuh3jtd"},{"post_id":"cjfuji678001k1gfpmfbd5t8n","tag_id":"cjfuji68d004w1gfp3oz0trs3","_id":"cjfuji68d004z1gfpfvdyl987"},{"post_id":"cjfuji67a001l1gfpz48bvann","tag_id":"cjfuji68d004x1gfpu9t96b8u","_id":"cjfuji68f00521gfpgqcr3kek"},{"post_id":"cjfuji67a001l1gfpz48bvann","tag_id":"cjfuji68e00501gfplbk7y9d7","_id":"cjfuji68f00531gfpn9kwlxxa"},{"post_id":"cjfuji67c001p1gfpvvu0zmdd","tag_id":"cjfuji68e00511gfp673t5kih","_id":"cjfuji68f00551gfp2rxycnxs"},{"post_id":"cjfuji67c001p1gfpvvu0zmdd","tag_id":"cjfuji68f00541gfpgo1mnu2z","_id":"cjfuji68g00561gfp9lq0ovod"}],"Tag":[{"name":"Java","_id":"cjfuji66700061gfp4osl4c3f"},{"name":"Rest","_id":"cjfuji66e000c1gfp24kskabn"},{"name":"API","_id":"cjfuji66i000g1gfp0dkkjtn9"},{"name":"MD5","_id":"cjfuji66l000l1gfp0nwswoq7"},{"name":"百度API","_id":"cjfuji66s000q1gfp9aacgyxy"},{"name":"Linux","_id":"cjfuji66y000z1gfpfmyjrq7c"},{"name":"MySQL","_id":"cjfuji67100161gfpmzpu2zt6"},{"name":"JDK1.8","_id":"cjfuji678001j1gfpuavymx6r"},{"name":"Future","_id":"cjfuji67c001o1gfplxovsnms"},{"name":"excel导出","_id":"cjfuji67f001w1gfpo7krrsce"},{"name":"Hexo","_id":"cjfuji67h00201gfps884e265"},{"name":"Mybatis","_id":"cjfuji67i00241gfplrdsnw6v"},{"name":"存储过程","_id":"cjfuji67j00271gfpj0fgrxub"},{"name":"POI","_id":"cjfuji67k002b1gfpzx4p4fcm"},{"name":"特殊符号","_id":"cjfuji67m002g1gfpzjx4yu7i"},{"name":"SpringMVC","_id":"cjfuji67m002i1gfp9fcbtu0r"},{"name":"静态资源","_id":"cjfuji67n002m1gfp66jhu556"},{"name":"Redis","_id":"cjfuji67p002u1gfpm0jye5tt"},{"name":"elasticsearch","_id":"cjfuji67t00381gfpfg0qnij0"},{"name":"分布式","_id":"cjfuji67u003e1gfpqr8vd4x2"},{"name":"csv","_id":"cjfuji67w003j1gfpd0k6j9f7"},{"name":"myslq","_id":"cjfuji67y003p1gfpqucd3z24"},{"name":"elasticsearch-sql","_id":"cjfuji680003u1gfp1otvg34s"},{"name":"group_by","_id":"cjfuji68200401gfpjnr9jrsg"},{"name":"elasticsearch插件","_id":"cjfuji68300431gfpcwuzauaq"},{"name":"linux","_id":"cjfuji68400481gfpb4vri0xb"},{"name":"elasticsearch-插件","_id":"cjfuji685004b1gfp103y7vpf"},{"name":"Git","_id":"cjfuji687004i1gfpoeaxgvxl"},{"name":"Shell","_id":"cjfuji688004l1gfpa1g278qm"},{"name":"持续集成","_id":"cjfuji688004m1gfppx8eza8a"},{"name":"Jenkins","_id":"cjfuji689004p1gfp45lv39b6"},{"name":"hexo","_id":"cjfuji68b004q1gfpz8r5mxmy"},{"name":"maven","_id":"cjfuji68c004t1gfp3tf6mcl8"},{"name":"eclipse","_id":"cjfuji68d004w1gfp3oz0trs3"},{"name":"在线预览","_id":"cjfuji68d004x1gfpu9t96b8u"},{"name":"office","_id":"cjfuji68e00501gfplbk7y9d7"},{"name":"spring","_id":"cjfuji68e00511gfp673t5kih"},{"name":"aop","_id":"cjfuji68f00541gfpgo1mnu2z"}]}}